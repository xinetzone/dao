<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度学习基础：线性回归</title>
      <link href="/dao/xint/zh-CN/065e781efeaf.html"/>
      <url>/dao/xint/zh-CN/065e781efeaf.html</url>
      
        <content type="html"><![CDATA[<p>对 <span class="w3-yellow">样本</span> 做如下约定：</p><article>$$\tag{1} \mathbf{X} = \begin{bmatrix}\mathbf{x}_1^T \\ \mathbf{x}_2^T \\ \vdots \\ \mathbf{x}_m^T\end{bmatrix} \in \mathbb{R}^{m \times n} $$$$\begin{matrix}\tag{2}\mathbf{x}_i = \begin{bmatrix}x_{i1} \\ x_{i2} \\ \vdots \\ x_{in}\end{bmatrix} \in \mathbb{R}^n, &amp; i \in \{1, \cdots, m\}\end{matrix}$$</article><h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><p>若有权重 $\mathbf{w} = (w_1, w_2, \cdots, w_n)^T \in \mathbb{R}^n$，偏置 $b \in \mathbb{R}$，则<span class="w3-yellow">线性模型</span>可以表示为：</p><article>$$\tag{3} \hat{\mathbf{y}} = \mathbf{Xw} + b \in \mathbb{R}^m$$</article><p>展开公式 (3)，即：</p><article>$$\begin{cases}\tag{4} \hat{\mathbf{y}} = (\hat{y}_1, \hat{y}_2, \cdots, \hat{y}_m)^T\\\hat{y}_i = \mathbf{x}_i^T \mathbf{w} + b = \langle \mathbf{x}_i, \mathbf{w} \rangle + b,&amp;i \in \{1, \cdots, m\}\end{cases}$$</article><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>已知样本 $(\mathbf{x}_i, y_i) _{i=1}^{m}$，且 $\mathbf{x}_i$ 的预测值为 $\hat{y_i}$，则定义可单个样本是损失函数：</p><article>$$\tag{5}l^{(i)}(\mathbf{w}, b) = \frac 1 2 (\hat{y}_i - y_i)^2, i \in \{1, \cdots, m\}$$</article><p>总损失函数定义为：</p><article>$$\tag{6}L(\mathbf{w}, b) = {\frac 1 m} \sum_{i=1}^m l^{(i)}(\mathbf{w}, b) = {\frac 1 {2m}} \lVert \mathbf{Xw} + b - \mathbf{y} \rVert ^2$$</article><p>在训练模型时，我们希望寻找一组参数 $(\mathbf{w}^*, b^*)$，这组参数能最小化在所有训练样本上的总损失。如下式：</p><article>$$\tag{7}\mathbf{w}^{\ast}, b^{\ast} = \argmin_{\mathbf{w}^{\ast}, b^{\ast}} L(\mathbf{w}, b)$$</article><p>可以求得解析解：</p><p>将 $\mathbf{w}$ 与 $b$ 合并为 $\overline{\mathbf{w}}$，$\overline{\mathbf{X}} = (\mathbf{X}, \mathbf{1})$，则公式 (6)，可以写作：</p><article>$$\tag{8}L(\mathbf{w}, b) = {\frac 1 {2m}} \lVert \overline{\mathbf{X}} \overline{\mathbf{w}} - \mathbf{y} \rVert ^2$$</article><p>这很容易求得解析解：</p><article>$$\tag{9}\overline{\mathbf{w}}^{\ast} = (\overline{\mathbf{X}}^T \overline{\mathbf{X}})^{-1} \overline{\mathbf{X}}^T \mathbf{y}$$</article><p>对于实际问题，往往模型很复杂很难求得解析解，大都仅仅求得其近似解。</p><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>由计算梯度得：</p><article>$$\tag{10}\nabla_{\overline{\mathbf{w}}} L = {\cfrac 1 m} \overline{\mathbf{X}}^T (\overline{\mathbf{X}} \overline{\mathbf{w}} - y)$$</article><p>所以，参数更新：</p><article>$$\tag{11}\begin{cases}\mathbf{w} \leftarrow \mathbf{w} - {\cfrac \eta m} \mathbf{X}^T (\mathbf{Xw} + b - \mathbf{y}) \\b \leftarrow b - {\frac \eta m} \mathbf{1}^T (\mathbf{Xw} + b - \mathbf{y})\end{cases}$$</article><p>其中 $\eta$ 表示学习率。</p>]]></content>
      
      
      <categories>
          
          <category> xint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/dao/post/en-US/a5385d3af835.html"/>
      <url>/dao/post/en-US/a5385d3af835.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学符号</title>
      <link href="/dao/post/zh-CN/f6112ee484a0.html"/>
      <url>/dao/post/zh-CN/f6112ee484a0.html</url>
      
        <content type="html"><![CDATA[<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><ul><li>$x$：标量</li><li>$\mathbf{x}$：向量</li><li>$\mathbf{X}$：矩阵</li><li>$\mathsf{X}$：张量</li><li>$\mathbf{I}$：单位矩阵</li><li>$x_i$, $[\mathbf{x}]_i$：向量$\mathbf{x}$第$i$个元素</li><li>$x_{ij}$, $[\mathbf{X}]_{ij}$：矩阵$\mathbf{X}$第$i$行第$j$列的元素</li></ul><div class="w3-pale-green">向量、矩阵使用 <code>\mathbf</code>，张量使用 <code>\mathsf</code>。</div><h1 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h1><ul><li>$\mathcal{X}$: 集合</li><li>$\mathbb{Z}$: 整数集合</li><li>$\mathbb{R}$ 实数集合</li><li>$\mathbb{R}^n$: $n$维实数向量</li><li>$\mathbb{R}^{a\times b}$: 包含$a$行和$b$列的实数矩阵</li><li>$\mathcal{A}\cup\mathcal{B}$: 集合$\mathcal{A}$和$\mathcal{B}$的并集（<code>\cup</code>）</li><li>$\mathcal{A}\cap\mathcal{B}$：集合$\mathcal{A}$和$\mathcal{B}$的交集（<code>\cap</code>）</li><li>$\mathcal{A}\setminus\mathcal{B}$：集合$\mathcal{B}$与集合$\mathcal{A}$相减（<code>\setminus</code>）</li></ul><div class="w3-pale-green">集合使用 <code>\mathbb</code>，集合族使用 <code>\mathcal</code>。</div><h1 id="函数和运算符"><a href="#函数和运算符" class="headerlink" title="函数和运算符"></a>函数和运算符</h1><ul><li>$f(\cdot)$：函数</li><li>$\log(\cdot)$：自然对数</li><li>$\exp(\cdot)$: 指数函数</li><li>$\mathbf{1}_\mathcal{X}$: 指示函数</li><li>$\mathbf{(\cdot)}^\top$: 向量或矩阵的转置</li><li>$\mathbf{X}^{-1}$: 矩阵的逆</li><li>$\odot$: 按元素相乘</li><li>$[\cdot, \cdot]$：连结</li><li>$\lvert \mathcal{X} \rvert$：集合的基数</li><li>$|\cdot|_p$: ：$L_p$ 正则</li><li>$|\cdot|$: $L_2$ 正则</li><li>$\langle \mathbf{x}, \mathbf{y} \rangle$：向量$\mathbf{x}$和$\mathbf{y}$的点积</li><li>$\sum$: 连加</li><li>$\prod$: 连乘</li><li>$\stackrel{\mathrm{def}}{=}$：定义</li><li>$\ast$: 例如，$a^{\ast}$</li></ul><h1 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h1><ul><li>$\frac{dy}{dx}$：$y$关于$x$的导数</li><li>$\frac{\partial y}{\partial x}$：$y$关于$x$的偏导数</li><li>$\nabla_{\mathbf{x}} y$：$y$关于$\mathbf{x}$的梯度</li><li>$\int_a^b f(x) ;dx$: $f$在$a$到$b$区间上关于$x$的定积分</li><li>$\int f(x) ;dx$: $f$关于$x$的不定积分</li></ul><h1 id="概率与信息论"><a href="#概率与信息论" class="headerlink" title="概率与信息论"></a>概率与信息论</h1><ul><li>$P(\cdot)$：概率分布</li><li>$z \sim P$: 随机变量$z$具有概率分布$P$</li><li>$P(X \mid Y)$：$X\mid Y$的条件概率</li><li>$p(x)$: 概率密度函数</li><li>$\mathbb{E}_{x} [f(x)]$: 函数$f$对$x$的数学期望</li><li>$X \perp Y$: 随机变量$X$和$Y$是独立的</li><li>$X \perp Y \mid Z$: 随机变量$X$和$Y$在给定随机变量$Z$的条件下是独立的</li><li>$\mathrm{Var}(X)$: 随机变量$X$的方差</li><li>$\sigma_X$: 随机变量$X$的标准差</li><li>$\mathrm{Cov}(X, Y)$: 随机变量$X$和$Y$的协方差</li><li>$\rho(X, Y)$: 随机变量$X$和$Y$的相关性</li><li>$H(X)$: 随机变量$X$的熵</li><li>$D_{\mathrm{KL}}(P|Q)$: $P$和$Q$的KL-散度</li></ul><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li>$\mathcal{O}$：大O标记</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学符号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scheduler</title>
      <link href="/dao/event/zh-CN/099cf7229b3b.html"/>
      <url>/dao/event/zh-CN/099cf7229b3b.html</url>
      
        <content type="html"><![CDATA[<p><code>sched</code> 模块实现了一个通用事件调度程序，用于在特定时间运行任务。<code>scheduler</code> 类使用 <code>time</code> 函数来学习当前时间，使用  <code>delay</code> 函数等待特定的一段时间。实际的时间单位并不重要，这使得接口足够灵活，可以用于许多目的。</p><h2 id="运行有延迟的事件"><a href="#运行有延迟的事件" class="headerlink" title="运行有延迟的事件"></a>运行有延迟的事件</h2><p>事件可以计划在延迟之后运行，或在特定时间运行。要使用延迟调度它们，可以使用<code>scheduler.enter(delay, priority, action, argument=(), kwargs={})</code>方法，该方法有四个主要参数。</p><ul><li>表示延迟的数字</li><li>优先级值</li><li>要调用的函数</li><li>函数的参数元组</li></ul><p>这个示例分别安排两个不同的事件在 $2$ 秒和 $3$ 秒后运行。当事件的时间出现时，将调用 <code>print_event()</code> 并打印当前时间和传递给事件的 <code>name</code> 参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sched_basic.py</span><span class="token keyword">import</span> sched<span class="token keyword">import</span> timescheduler <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_event</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    elapsed <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>now <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'EVENT: </span><span class="token interpolation"><span class="token punctuation">{</span>now<span class="token punctuation">}</span></span><span class="token string"> elapsed=</span><span class="token interpolation"><span class="token punctuation">{</span>elapsed<span class="token punctuation">}</span></span><span class="token string"> name=</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> print_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> print_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><output>START: Mon May 17 13:34:28 2021EVENT: Mon May 17 13:34:30 2021 elapsed=2 name=firstEVENT: Mon May 17 13:34:31 2021 elapsed=3 name=second</output><p>为第一个事件打印的时间是在开始后 $2$ 秒，为第二个事件打印的时间是在开始后 $3$ 秒。</p><h2 id="重叠的事件"><a href="#重叠的事件" class="headerlink" title="重叠的事件"></a>重叠的事件</h2><p>对<code>run()</code>的调用会阻塞，直到所有事件都被处理完。每个事件都在同一个线程中运行，所以如果一个事件的运行时间比事件之间的延迟时间长，就会出现重叠。通过推迟后面的事件来解决重叠问题。事件不会丢失，但是有些事件可能会在计划时间之后被调用。在下一个例子中，<code>long_event()</code> 会休眠，但它可以通过执行长时间的计算或阻塞I/O来轻易地延迟。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sched_overlap.py</span><span class="token keyword">import</span> sched<span class="token keyword">import</span> timescheduler <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">long_event</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'BEGIN EVENT :'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FINISH EVENT:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> long_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> long_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><output>START: Mon May 17 13:43:54 2021BEGIN EVENT : Mon May 17 13:43:56 2021 firstFINISH EVENT: Mon May 17 13:43:58 2021 firstBEGIN EVENT : Mon May 17 13:43:58 2021 secondFINISH EVENT: Mon May 17 13:44:00 2021 second</output><p>结果是在第一个事件结束后立即运行第二个事件，因为第一个事件花费了足够长的时间来推动时钟超过第二个事件的期望开始时间。</p><h2 id="事件优先级"><a href="#事件优先级" class="headerlink" title="事件优先级"></a>事件优先级</h2><p>如果计划在同一时间调度多个事件，则将使用它们的优先级值来确定它们的运行顺序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sched_priority.py</span><span class="token keyword">import</span> sched<span class="token keyword">import</span> timescheduler <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_event</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'EVENT:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enterabs<span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> print_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enterabs<span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> print_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><output>START: Mon May 17 13:50:50 2021EVENT: Mon May 17 13:50:52 2021 secondEVENT: Mon May 17 13:50:52 2021 first</output><p>这个示例需要确保它们被安排在完全相同的时间，因此使用 <code>enterabs()</code> 方法而不是 <code>enter()</code>。<code>enterabs()</code> 的第一个参数是运行事件的时间，而不是延迟的时间。</p><h2 id="取消事件"><a href="#取消事件" class="headerlink" title="取消事件"></a>取消事件</h2><p><code>enter()</code> 和 <code>enterabs()</code> 都返回一个对事件的引用，可以在以后用来取消该事件。因为 <code>run()</code> 会阻塞，所以必须在不同的线程中取消该事件。对于本例，将启动一个线程来运行调度程序，并使用主处理线程来取消事件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sched_cancel.py</span><span class="token keyword">import</span> sched<span class="token keyword">import</span> threading<span class="token keyword">import</span> timescheduler <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token comment"># Set up a global to be modified by the threads</span>counter <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">increment_counter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> counter    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'EVENT:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    counter <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'NOW:'</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>e1 <span class="token operator">=</span> scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> increment_counter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'E1'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>e2 <span class="token operator">=</span> scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> increment_counter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'E2'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Start a thread to run the events</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>scheduler<span class="token punctuation">.</span>run<span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Back in the main thread, cancel the first scheduled event.</span>scheduler<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token comment"># Wait for the scheduler to finish running in the thread</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FINAL:'</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原定有两项活动，但第一项后来被取消。只有第二个事件运行，因此计数器变量只增加一次。</p><output>START: Mon May 17 13:55:10 2021EVENT: Mon May 17 13:55:13 2021 E2NOW: 1FINAL: 1</output>]]></content>
      
      
      
        <tags>
            
            <tag> sched </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>start</title>
      <link href="/dao/airflow/zh-CN/35c01ec92e42.html"/>
      <url>/dao/airflow/zh-CN/35c01ec92e42.html</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://airflow.apache.org/">airflow</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dash 创建上位机界面</title>
      <link href="/dao/dash/zh-CN/74799cf285db.html"/>
      <url>/dao/dash/zh-CN/74799cf285db.html</url>
      
        <content type="html"><![CDATA[<p><code>Dash</code> 是建立在 <code>Flask</code>、<code>Poltly.js</code> 以及 <code>React.js</code> 之上的 Python 框架，它降低了前端入门的门槛，帮助你快速搭建网站、数据可视化工具、上位机界面等应用。</p><p>为了更加方便使用 <code>Dash</code>，需要安装一些包：</p><ul><li><code>numpy</code>，<code>pandas</code>，<code>matplotlib</code></li><li><code>dash</code>，<code>jupyter_dash</code></li></ul><p>其中 <a href="https://github.com/plotly/jupyter-dash">jupyter_dash</a> 用于支持在 Jupyter Notebook 中运行 Dash。为了提供可以同时在 CMD 和 Jupyter 运行的 Dash 环境，在 <a href="https://github.com/xinetzone/aispace">aispace</a> 维护了一个代码库。</p><h2 id="创建服务器主接口"><a href="#创建服务器主接口" class="headerlink" title="创建服务器主接口"></a>创建服务器主接口</h2><p>关于 <code>aispace.server</code> 的细节可参考：<a href="https://xinetzone.github.io/dao/dash/zh-CN/ef498434c4c8.html">添加 CSS 和 JS，覆盖页面加载模板</a>。</p><p>运行 Dash：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">Jupyter Notebook</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">from</span> aispace<span class="token punctuation">.</span>server <span class="token keyword">import</span> create_app<span class="token punctuation">,</span> run_serverapp <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>H1<span class="token punctuation">(</span><span class="token string">'第一个 Dash 应用！'</span><span class="token punctuation">)</span><span class="token keyword">await</span> run_server<span class="token punctuation">(</span>app<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">CMD</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">from</span> aispace<span class="token punctuation">.</span>server <span class="token keyword">import</span> create_app<span class="token punctuation">,</span> run_serverapp <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>H1<span class="token punctuation">(</span><span class="token string">'第一个 Dash 应用！'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>run_server<span class="token punctuation">(</span>app<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        </div>    </div></article><p>由于 Jupyter 十分便利，所以后面均以 Jupyter 作为运行环境。</p><p>本例便是一个完整的 Dash 应用，<code>app</code> 是 Dash 的应用主接口，<code>layout</code> 是 UI 的布局，<code>run_server</code> 启动服务器。</p><p>本例仅仅定义了 <code>&lt;h1&gt;</code> 元素，效果如下：</p><p><img src="/dao/dash/zh-CN/74799cf285db/first.png"></p><div class="w3-yellow"><code>aispace.server</code> 提供了 <a href="https://www.w3schools.com/w3css/default.asp">W3.CSS</a> 与 <a href="https://xinetzone.github.io/Font-Awesome/css/all.css">Font Awesome</a> 支持。</div><p>为了便利，先载入一些必需包和模块（此处先不深入，后续会一一展开）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dcc<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>express <span class="token keyword">as</span> px<span class="token keyword">from</span> dash<span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Output<span class="token punctuation">,</span> State<span class="token punctuation">,</span> MATCH<span class="token punctuation">,</span> ALL<span class="token comment"># 自定义</span><span class="token keyword">from</span> aispace<span class="token punctuation">.</span>server <span class="token keyword">import</span> create_app<span class="token punctuation">,</span> run_server<span class="token keyword">from</span> aispace<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>nav <span class="token keyword">import</span> create_nav<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本文将探讨如何使用 Dash 创建一个可交互的上位机界面。</p><h2 id="与外部软件交互（待更）"><a href="#与外部软件交互（待更）" class="headerlink" title="与外部软件交互（待更）"></a>与外部软件交互（待更）</h2><p>从零开发一个产品难度很大，往往可以借助其他成熟的软件与自己的产品交互。下面以打开音乐播放器为例进行介绍。</p><p>首先，下载并安装一个音乐播放器，比如 <a href="https://music.163.com/">网易云音乐</a>，然后，找到运行它的可执行性文件，即 “C:\Program Files (x86)\Netease\CloudMusic\cloudmusic.exe”。</p><p><img src="/dao/dash/zh-CN/74799cf285db/wyy.png"></p>]]></content>
      
      
      <categories>
          
          <category> notebook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dash </tag>
            
            <tag> aispace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Faculty 基础</title>
      <link href="/dao/faculty/zh-CN/802ec9bb8beb.html"/>
      <url>/dao/faculty/zh-CN/802ec9bb8beb.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.faculty.ai/#">Faculty 文档</a>|<a href="https://faculty.ai/platform/">平台</a></p><p>Faculty 是为需要强大计算、快速配置、安全协作和易于部署的数据科学家提供的云平台。Faculty 允许您与团队成员安全地共享数据和代码，发布版本控制的分析报告，并通过触摸按钮访问 Jupyter 环境。无限文件上传、自动数据探索和可伸缩计算能力等功能意味着更少的时间访问和清理数据，更多的时间构建模型。然而，当你需要它的时候，你可以打开一个终端不受限制地访问你的服务器。Faculty 环境预先安装了用于数据科学的 Python 库，包括 Pandas 和 NumPy 等公共库，以及 <a href="https://docs.faculty.ai/libraries/lens.html#lens-library">Lens</a> 和 <a href="https://docs.faculty.ai/libraries/customer_intelligence/getting_started.html">Customer Intelligence</a> 等仅在 Faculty 可用的库。</p><h2 id="快速开发模型"><a href="#快速开发模型" class="headerlink" title="快速开发模型"></a>快速开发模型</h2><p>无论您的数据科学团队是为决策者带来见解、开发人工智能产品还是在研究前沿开辟新领域，Faculty 平台都将为您提供完成工作所需的生产力特性、开源工具的灵活性和弹性计算资源的可伸缩性。</p><p>。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch 讨论</title>
      <link href="/dao/pytorch/zh-CN/83b18c7171db.html"/>
      <url>/dao/pytorch/zh-CN/83b18c7171db.html</url>
      
        <content type="html"><![CDATA[<ol><li>可以认为 <code>a.reshape = a.view() + a.contiguous().view()</code>，所以建议仅仅使用 <code>reshape</code> 即可。（参考<a href="https://blog.csdn.net/Flag_ing/article/details/109129752">PyTorch：view() 与 reshape() 区别详解</a>）</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单的梯度运算</title>
      <link href="/dao/xint/zh-CN/9d900d55bcfe.html"/>
      <url>/dao/xint/zh-CN/9d900d55bcfe.html</url>
      
        <content type="html"><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>有矩阵 $\mathbf{A} = [\mathbf{a}_1, \mathbf{a}_2, \cdots, \mathbf{a}_m]^T \in \mathbb{R}^{m \times n}$，和向量 $\mathbf{x} = [x_1, x_2, \cdots, x_n]^T \in \mathbb{R}^{n}$，则有：</p><div>$$\mathbf{Ax} = \begin{bmatrix}   \mathbf{a}_1^T \mathbf{x} \\   \mathbf{a}_2^T \mathbf{x} \\   \vdots \\   \mathbf{a}_m^T \mathbf{x}\end{bmatrix}$$</div><p>又有：</p><div>$$\nabla_{\mathbf{x}} \mathbf{a}_i^T \mathbf{x} = \mathbf{a}_i$$$$ \mathbf{1}^T \mathbf{A} \mathbf{x} = \langle \mathbf{1}, \mathbf{Ax} \rangle = \langle \mathbf{A}^T \mathbf{1}, \mathbf{x} \rangle$$</div><p>所以，</p><div>$$\nabla_{\mathbf{x}} \mathbf{1}^T \mathbf{A} \mathbf{x} = \nabla_{\mathbf{x}} \sum_{i=1}^m \mathbf{a}_i^T \mathbf{x} = \sum_{i=1}^m \mathbf{a}_i = \mathbf{A}^T \mathbf{1}_{m \times 1} = \mathbf{A}^T \mathbf{1}$$</div><p>这样，有：</p><div>$$\nabla_{\mathbf{x}} \mathbf{Ax} = \nabla_{\mathbf{x}} \langle  \mathbf{A}^T, \mathbf{x} \mathbf{1}^T \rangle = \mathbf{A}^T$$$$\nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{A} = \mathbf{A}$$$$\nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{A} \mathbf{x} = (\mathbf{A} + \mathbf{A}^\top)\mathbf{x}$$$$\nabla_{\mathbf{x}} \|\mathbf{x} \|^2 = \nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{x} = 2\mathbf{x}$$$$\nabla_{\mathbf{X}} \|\mathbf{X} \|_F^2 = 2\mathbf{X}$$</div><p>即：</p><div>$$\nabla_{\mathbf{x}} \langle f(\mathbf{x}), g(\mathbf{x}) \rangle = \langle \nabla{_\mathbf{x}} f(\mathbf{x}), g(\mathbf{x}) \rangle + \langle f(\mathbf{x}), \nabla_{\mathbf{x}} g(\mathbf{x}) \rangle$$</div><p>下面看一个例子：</p><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> mxnet <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--3" name="tab-set--0" type="radio">        <label for="tab-set--0-input--3">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> torch <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>    </div></article><p>创建张量 $\mathbf{x}$：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算函数 $y = 2\mathbf{x}^{\top}\mathbf{x}$ 的梯度：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--1-input--1" name="tab-set--1" type="radio">        <label for="tab-set--1-input--1">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 我们通过调用`attach_grad`来为一个张量的梯度分配内存</span>x<span class="token punctuation">.</span>attach_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 在我们计算关于`x`的梯度后，我们将能够通过'grad'属性访问它，它的值被初始化为0</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--1-input--2" name="tab-set--1" type="radio">        <label for="tab-set--1-input--2">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        </div>        <input id="tab-set--1-input--3" name="tab-set--1" type="radio">        <label for="tab-set--1-input--3">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 等价于 `x = torch.arange(4.0, requires_grad=True)`</span>x<span class="token punctuation">.</span>grad  <span class="token comment"># 默认值是None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        </div>    </div></article><p>现在让计算 $y$：</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--2-input--1" name="tab-set--2" type="radio">    <label for="tab-set--2-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> mxnet <span class="token keyword">import</span> autograd<span class="token comment"># 把代码放到`autograd.record`内，以建立计算图</span><span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>T @ x<span class="token builtin">float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--2-input--2" name="tab-set--2" type="radio">    <label for="tab-set--2-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 把所有计算记录在磁带上</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> tf<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>x<span class="token punctuation">)</span> @ x<span class="token builtin">float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--2-input--3" name="tab-set--2" type="radio">    <label for="tab-set--2-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>T @ x<span class="token builtin">float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>    </div></div><p><output>28.0</output></p><p>接下来，我们可以通过调用反向传播函数来自动计算 $y$ 关于 $\mathbf{x}$ 每个分量的梯度，并打印这些梯度：</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--3-input--1" name="tab-set--3" type="radio">    <label for="tab-set--3-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python">y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>    <output>    array([[ 0.],       [ 4.],       [ 8.],       [12.]])</output>    </div>    <input id="tab-set--3-input--2" name="tab-set--3" type="radio">    <label for="tab-set--3-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 把所有计算记录在磁带上</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> tf<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>x<span class="token punctuation">)</span> @ x<span class="token builtin">float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>    <output>    &lt;tf.Tensor: shape=(4, 1), dtype=float64, numpy=    array([[ 0.],        [ 4.],        [ 8.],        [12.]])&gt;</output>    </div>    <input id="tab-set--3-input--3" name="tab-set--3" type="radio">    <label for="tab-set--3-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python">y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>    <output>    tensor([[ 0.],        [ 8.],        [16.],        [24.]])</output>    </div></div><p>可以计算 $\mathbf{x}$ 的另一个函数：</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--4-input--1" name="tab-set--4" type="radio">    <label for="tab-set--4-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad  <span class="token comment"># 被新计算的梯度覆盖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>    <output>    array([[1.],       [1.],       [1.],       [1.]])    </output>    </div>    <input id="tab-set--4-input--2" name="tab-set--4" type="radio">    <label for="tab-set--4-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>x<span class="token punctuation">)</span>t<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment"># 被新计算的梯度覆盖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>    <output>    &lt;tf.Tensor: shape=(4, 1), dtype=float64, numpy=    array([[1.],        [1.],        [1.],        [1.]])&gt;    </output>    </div>    <input id="tab-set--4-input--3" name="tab-set--4" type="radio">    <label for="tab-set--4-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在默认情况下，PyTorch会累积梯度，我们需要清除之前的值</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>    <output>    tensor([[1.],        [1.],        [1.],        [1.]])    </output>    </div></div><p>注意：对于非标量变量的反向传播，MXNet/TensorFlow 直接调用相应的函数即可获得梯度，但是 Pytorch 不支持直接对非标量进行反向传播，故而需要先对其求和，再求梯度。比如：</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--5-input--1" name="tab-set--5" type="radio">    <label for="tab-set--5-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 当我们对向量值变量`y`（关于`x`的函数）调用`backward`时，</span><span class="token comment"># 将通过对`y`中的元素求和来创建一个新的标量变量。然后计算这个标量变量相对于`x`的梯度</span><span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">*</span> x  <span class="token comment"># `y`是一个向量</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad  <span class="token comment"># 等价于y = sum(x * x)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--5-input--2" name="tab-set--5" type="radio">    <label for="tab-set--5-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">*</span> xt<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment"># 等价于 `y = tf.reduce_sum(x * x)`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--5-input--3" name="tab-set--5" type="radio">    <label for="tab-set--5-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对非标量调用`backward`需要传入一个`gradient`参数，该参数指定微分函数关于`self`的梯度。</span><span class="token comment">## 在我们的例子中，我们只想求偏导数的和，所以传递一个1的梯度是合适的</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token comment"># 等价于y.backward(torch.ones(len(x)))</span>y<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div></div><h2 id="分离计算"><a href="#分离计算" class="headerlink" title="分离计算"></a>分离计算</h2><p>有时，我们希望将某些计算移动到记录的计算图之外。例如，假设 $\mathbf{y}$ 是作为 $\mathbf{x}$ 的函数计算的，而 $\mathbf{z}$ 则是作为 $\mathbf{y}$ 和 $\mathbf{x}$ 的函数计算的。现在，想象一下，我们想计算 $\mathbf{z}$ 关于 $\mathbf{x}$ 的梯度，但由于某种原因，我们希望将 $\mathbf{y}$ 视为一个常数，并且只考虑到 $\mathbf{x}$ 在 $\mathbf{y}$ 被计算后发挥的作用。</p><p>在这里，我们可以分离 $\mathbf{y}$ 来返回一个新变量 $u$，该变量与 $\mathbf{y}$ 具有相同的值，但截断计算图中关于如何计算 $\mathbf{y}$ 的任何信息。换句话说，梯度不会向后流经 $u$ 到 $\mathbf{x}$。因此，下面的反向传播函数计算 $\mathbf{z} = u * \mathbf{x}$ 关于 $\mathbf{x}$ 的偏导数，同时将 $u$ 作为常数处理，而不是 $\mathbf{z} = \mathbf{x} * \mathbf{x} * \mathbf{x}$ 关于 $\mathbf{x}$ 的偏导数。</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--6-input--1" name="tab-set--6" type="radio">    <label for="tab-set--6-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">*</span> x    u <span class="token operator">=</span> y<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>    z <span class="token operator">=</span> u <span class="token operator">*</span> xz<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad <span class="token operator">==</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--6-input--2" name="tab-set--6" type="radio">    <label for="tab-set--6-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置 `persistent=True` 来运行 `t.gradient`多次</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span>persistent<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">*</span> x    u <span class="token operator">=</span> tf<span class="token punctuation">.</span>stop_gradient<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    z <span class="token operator">=</span> u <span class="token operator">*</span> xx_grad <span class="token operator">=</span> t<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>z<span class="token punctuation">,</span> x<span class="token punctuation">)</span>x_grad <span class="token operator">==</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--6-input--3" name="tab-set--6" type="radio">    <label for="tab-set--6-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">*</span> xu <span class="token operator">=</span> y<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>z <span class="token operator">=</span> u <span class="token operator">*</span> xz<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad <span class="token operator">==</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div></div><h2 id="通用微分函数"><a href="#通用微分函数" class="headerlink" title="通用微分函数"></a>通用微分函数</h2><p>令 $f: \mathbb{R}^n \rightarrow \mathbb{R}$，$\mathbf{x} = [x_1, x_2, \ldots, x_n]^\top$，有</p><div>$$\nabla_{\mathbf{x}} f(\mathbf{x}) = \bigg[\frac{\partial f(\mathbf{x})}{\partial x_1}, \frac{\partial f(\mathbf{x})}{\partial x_2}, \ldots, \frac{\partial f(\mathbf{x})}{\partial x_n}\bigg]^\top$$</div><p>若有 $\mathbf{y} = [y_1, y_2, \ldots, y_m]^\top$，$x \in \mathbb{R}$，则：</p><div>$$\frac{\partial \mathbf{y}}{\partial x} = \bigg[\frac{\partial y_1}{\partial x}, \frac{\partial y_2}{\partial x}, \ldots, \frac{\partial y_m}{\partial x}\bigg]^\top$$</div><p>还有，</p><div>$$\frac{\partial \mathbf{y}}{\partial \mathbf{x}} = \bigg[\frac{\partial y_1}{\partial \mathbf{x}}, \frac{\partial y_2}{\partial \mathbf{x}}, \ldots, \frac{\partial y_m}{\partial \mathbf{x}}\bigg]^\top = \begin{bmatrix} \frac{\partial y_1}{\partial x_1} &amp; \frac{\partial y_1}{\partial x_2} &amp;\cdots &amp;\frac{\partial y_1}{\partial x_n} \\\frac{\partial y_2}{\partial x_1} &amp; \frac{\partial y_2}{\partial x_2} &amp; \cdots &amp; \frac{\partial y_2}{\partial x_n}\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\\frac{\partial y_m}{\partial x_1} &amp; \frac{\partial y_m}{\partial x_2} &amp; \cdots &amp; \frac{\partial y_m}{\partial x_n}\end{bmatrix}$$</div>]]></content>
      
      
      <categories>
          
          <category> xint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一 MXNet，PyTorch，TensorFlow 接口</title>
      <link href="/dao/xint/zh-CN/7a4a91cc735e.html"/>
      <url>/dao/xint/zh-CN/7a4a91cc735e.html</url>
      
        <content type="html"><![CDATA[<p>为了提供一个统一的接口，我在 GitHub 上维护了一个通用 API：<a href="https://github.com/xinetzone/atom">atom</a>。可以使用 <code>pip</code> 安装。本仓库借鉴了 <a href="https://zh-v2.d2l.ai/">d2l</a> 和 <a href="https://tf.wiki/zh_hans/">简单粗暴 TensorFlow 2</a>。</p><p>首先导入一些库：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> mxnet <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--3" name="tab-set--0" type="radio">        <label for="tab-set--0-input--3">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> torch <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>    </div></article><h2 id="简单的使用-atom"><a href="#简单的使用-atom" class="headerlink" title="简单的使用 atom"></a>简单的使用 atom</h2><p>由于 <code>np</code> 已经绑定了各自的深度学习环境，且三种框架及其相似，所以，下文如果框架之间没有分歧，统一使用没有指示环境的模式，比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">10000</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n<span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你可以分别查看各自环境的数据：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--4" name="tab-set--1" type="radio">        <label for="tab-set--0-input--4">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>            <output>array([1., 1., 1., ..., 1., 1., 1.])</output>        </div>        <input id="tab-set--0-input--5" name="tab-set--1" type="radio">        <label for="tab-set--0-input--5">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>            <output>&lt;ndarray&lt;&lt;tf.Tensor: shape=(10000,), dtype=float64, numpy=array([1., 1., 1., ..., 1., 1., 1.])&gt;&gt;</output>        </div>        <input id="tab-set--0-input--6" name="tab-set--1" type="radio">        <label for="tab-set--0-input--6">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>            <output>tensor([1., 1., 1.,  ..., 1., 1., 1.])</output>        </div>    </div></article><p>可以看到不同环境表示的不同的 <code>np</code>，可以无缝的使用它。</p><p><code>atom</code> 定义了一个计时器 <code>Timer</code>，下面测试矢量化的好处。</p><ol><li>使用 <code>for</code> 循环：</li></ol><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--7" name="tab-set--2" type="radio">        <label for="tab-set--0-input--7">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span>timer <span class="token operator">=</span> utils<span class="token punctuation">.</span>Timer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> sec'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>            <output>'2.83601 sec'</output>        </div>        <input id="tab-set--0-input--8" name="tab-set--2" type="radio">        <label for="tab-set--0-input--8">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfc <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>timer <span class="token operator">=</span> utils<span class="token punctuation">.</span>Timer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>assign<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> sec'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>            <output>'3.42657 sec'</output>        </div>        <input id="tab-set--0-input--9" name="tab-set--2" type="radio">        <label for="tab-set--0-input--9">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span>timer <span class="token operator">=</span> utils<span class="token punctuation">.</span>Timer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> sec'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>            <output>'0.13695 sec'</output>        </div>    </div></article><ol start="2"><li>使用重载的 <code>+</code> 运算符来计算按张量的和。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">timer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>d <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.9f</span><span class="token punctuation">}</span></span><span class="token string"> sec'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出的时间有点差异，但是都很快：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--10" name="tab-set--3" type="radio">        <label for="tab-set--0-input--10">MXNet</label>        <div class="tab-content w3-padding">            <output>'0.0009992 sec'</output>        </div>        <input id="tab-set--0-input--11" name="tab-set--3" type="radio">        <label for="tab-set--0-input--11">TensorFlow</label>        <div class="tab-content w3-padding">            <output>'0.000999451 sec'</output>        </div>        <input id="tab-set--0-input--12" name="tab-set--3" type="radio">        <label for="tab-set--0-input--12">PyTorch</label>        <div class="tab-content w3-padding">            <output>'0.000944614 sec'</output>        </div>    </div></article><p>可以看出矢量化对运算速度的提升是数量级的。</p><h2 id="正态分布与平方损失"><a href="#正态分布与平方损失" class="headerlink" title="正态分布与平方损失"></a>正态分布与平方损失</h2><p><strong>正态分布</strong>（normal distribution），也被称为 <strong>高斯分布</strong>（Gaussian distribution），最早由德国数学家高斯（Gauss）应用于天文学研究。简单的说，若随机变量 $x$ 具有均值 $\mu$ 和方差 $\sigma^2$（标准差 $\sigma$），其正态分布概率密度函数如下：</p><section>$$p(x) = \frac{1}{\sqrt{2 \pi \sigma^2}} \exp\left(-\frac{1}{2 \sigma^2} (x - \mu)^2\right).$$</section><p>使用 <code>np</code> 可以实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> sigma<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> sigma<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p <span class="token operator">*</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">/</span> sigma<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mu<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可视化正态分布：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token comment"># 均值和标准差对</span>params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>utils<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span>normal<span class="token punctuation">(</span>x<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> sigma<span class="token punctuation">)</span> <span class="token keyword">for</span> mu<span class="token punctuation">,</span> sigma <span class="token keyword">in</span> params<span class="token punctuation">]</span><span class="token punctuation">,</span> xlabel<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span>           ylabel<span class="token operator">=</span><span class="token string">'p(x)'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           legend<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'mean </span><span class="token interpolation"><span class="token punctuation">{</span>mu<span class="token punctuation">}</span></span><span class="token string">, std </span><span class="token interpolation"><span class="token punctuation">{</span>sigma<span class="token punctuation">}</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> mu<span class="token punctuation">,</span> sigma <span class="token keyword">in</span> params<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><output></output><img src="/dao/xint/zh-CN/7a4a91cc735e/output_2_0.svg"></p><p>改变均值会产生沿 $x$ 轴的偏移，增加方差将会分散分布、降低其峰值。</p><p>利用<strong>均方误差损失</strong>函数（简称<strong>均方损失</strong>）可以用于线性回归的一个原因是：假设观测 $\mathbf{x}$ 中包含噪声，其中噪声服从正态分布。噪声正态分布如下式:</p><section>$$\tag{1.1} y = \mathbf{w}^\top \mathbf{x} + b + \epsilon \text{ where } \epsilon \sim \mathcal{N}(0, \sigma^2).$$</section><p>因此，我们现在可以写出通过给定的观测 $\mathbf{x}$  到特定 $y$ 的似然（likelihood）：</p><section>$$\tag{1.2} P(y \mid \mathbf{x}) = \frac{1}{\sqrt{2 \pi \sigma^2}} \exp\left(-\frac{1}{2 \sigma^2} (y - \mathbf{w}^\top \mathbf{x} - b)^2\right).$$</section><p>根据最大似然估计法，参数 $\mathbf{w}$ 和 $b$ 的最优值是使整个数据集的似然最大的值：</p><section>$$\tag{1.3} P(\mathbf y \mid \mathbf X) = \prod_{i=1}^{n} p(y^{(i)}|\mathbf{x}^{(i)}).$$</section><p>根据最大似然估计法选择的估计量称为<strong>最大似然估计量</strong> 。为了更好的计算，可以<strong>最小化负对数似然</strong> $-\log P(\mathbf y \mid \mathbf X)$。由此可以得到的数学公式是：</p><section>$$\tag{1.4} -\log P(\mathbf y \mid \mathbf X) = \sum_{i=1}^n \frac{1}{2} \log(2 \pi \sigma^2) + \frac{1}{2 \sigma^2} \left(y^{(i)} - \mathbf{w}^\top \mathbf{x}^{(i)} - b\right)^2.$$</section><p>现在我们只需要假设 $\sigma$ 是某个固定常数就可以忽略第一项，因为第一项不依赖于 $\mathbf{w}$ 和 $b$。现在第二项除了常数 $\frac{1}{\sigma^2}$ 外，其余部分和前面介绍的平方误差损失是一样的。因此，<span class="w3-card w3-pale-blue">在高斯噪声的假设下，最小化均方误差等价于对线性模型的最大似然估计</span>。</p>]]></content>
      
      
      <categories>
          
          <category> xint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-github-pages</title>
      <link href="/dao/post/zh-CN/23dd9200e1e9.html"/>
      <url>/dao/post/zh-CN/23dd9200e1e9.html</url>
      
        <content type="html"><![CDATA[<p>参考 <a href="https://hexo.io/docs/github-pages">GitHub Pages | Hexo</a> 配置。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微精通</title>
      <link href="/dao/mircromastery/zh-CN/f0e28335bb89.html"/>
      <url>/dao/mircromastery/zh-CN/f0e28335bb89.html</url>
      
        <content type="html"><![CDATA[<p>发掘兴趣+识别重心+立体学习+内行经验=无限可能</p><p>《微精通》 作者：罗伯特．特威格尔</p><h2 id="什么是“微精通”"><a href="#什么是“微精通”" class="headerlink" title="什么是“微精通”"></a>什么是“微精通”</h2><p><dfn class="xin-term">微精通</dfn> 是一种完整、独立的<strong>实践体系</strong>，但也可以扩展到更大的领域中。</p><p>你可以先精通一件小事儿，然后把它做大，也可以二者都做。</p><p><dfn class="xin-term">微精通</dfn> 可被<strong>复验</strong>，且往往<strong>能够取得成功</strong>。它的实践本身就是令人愉悦的过程。你可以试着去实践。<br><dfn class="xin-term">微精通</dfn>，它有一定的弹性，可以对其进行调整。同时，当你用一种三维立体的方法开展学习时，大脑中的各种感觉神经元也会被调动起来，变得活跃。</p><div class="w3-pale-yellow w3-card-4">心理学家米哈里·契克森米哈赖定义 <dfn class="xin-term">心流</dfn> 为一种将个体注意力完全投注在某活动上的感觉；心流产生时同时会有高度的兴奋及充实感。</div><div class="w3-pale-yellow w3-margin-top w3-card-4"><p><dfn class="xin-term">精神熵</dfn>（psychic entropy）：参考物理学中的熵，精神熵是用于衡量意识的无序程度的。每当资讯对意识本身的信息构成威胁，就会发生内在失序的现象，这种失序会造成意识的混乱和无序。为了衡量这种意识的混乱程度，米哈里提出了精神熵的概念。</p><p>对于我们个人而言，如果长期的意识混乱和精力不集中，并且自身没有对于意识和注意力的管理。那么如果这种情况维持过久，意识会越来越无序，越来越无法集中注意力，势必会对自己的工作与生活产生不小的影响。</p><p>而精神熵的反面就是有序的意识，米哈里把这种有序的意识称之为“最优体验”，也应用于用户体验和交互设计领域。在最优体验种，意识形成良性的循环，注意力得到集中，工作效率得到提升，对外干扰事物的感知降低，甚至达到忘我的境界。</p></div><p>米哈里提出了<strong>构成心流的要素</strong>：</p><ol class="w3-pale-yellow w3-margin-top w3-card-4"><li><span class="w3-pale-blue">一个可量化的目标</span>：目标是明确可以衡量的，或者说无法完成的目标是无法提供乐趣的，只有挫折和无望。目标是符合 SMART 原则的：明确（Specific）, 可衡量（Measurable）, 可达成（Achievable）, 相关（Relevant）, 时限（Time-bound）。</li><li><span class="w3-pale-blue">目标具有挑战性</span>：不具有挑战性的目标只消耗极少的注意力资源，无法使人专注其中。</li><li><span class="w3-pale-blue">自身具备一定能力</span>：在挑战的过程中，自身应当具备可能完成目标的能力，同时目标难度应当适当高出自身所具备的能力。当能力与挑战难度不相匹配，容易产生轻易感或是失落感。对于能力和挑战难度的关系如下图所示。</li><li><span class="w3-pale-blue">集中注意力</span>：达到最优体验状态需要集中注意力，而且深沉的快乐是严格的自律和集中注意力换来的。</li><li><span class="w3-pale-blue">挑战的过程反馈及时</span>：缺少反馈的过程是茫然的、无助的、也是无趣的。反馈作为用户体验闭环中的重要环节，既给用户带来信息的感知和内心的感受，同时也可以作为奖励而存在。</li></ol><p><img src="/dao/mircromastery/zh-CN/f0e28335bb89/aa.png"></p><p>既然精神熵代表意识的混乱程度，而心流则表示意识的有序，那么我们追寻心流的过程可以认为是“管理意识”的过程，也是“降熵”的过程。</p><p>微精通并不是让你遵循让人失去活力的方法（比如购买入门教科书），也并不意味着你必须做那些似乎永远做不完的事情。它的<strong>有限性</strong>能够让你对这个世界保持兴趣，同时消除焦虑，不会让你觉得浪费了很多时间。</p><p>微精通的结构以一种关键方法，在更广泛的领域中与诸多重要元素想关联。（建立联系）</p><div class="w3-pale-green w3-card-4 w3-padding">在一项微精通中，仅用少量的文字就能揭示各个元素间的关联和平衡关系。</div><p>微精通具有可<strong>复验性</strong>，<strong>游戏性</strong>，<strong>人人可为性</strong>。</p><p>如果在学习过程中不能获得一系列微小的成功，你将失去信心，甚至放弃，特别是在完全自学的情况下。</p><h2 id="微精通内核"><a href="#微精通内核" class="headerlink" title="微精通内核"></a>微精通内核</h2><p>依据必要的（微精通）结构来管理学习进程，并最终实现目标。</p><p>每一种微精通都有精确的结构：</p><ol><li>入门技巧</li><li>协同障碍</li><li>背景支持</li><li>成功回报</li><li>可复验性</li><li>可实验性</li></ol><h3 id="入门技巧"><a href="#入门技巧" class="headerlink" title="入门技巧"></a>入门技巧</h3><p>入门技巧是<strong>如何使你迈开步子走上微精通之路的</strong>。入门技巧可以为你克服微精通实践初期存在的障碍，比如增强自信心和熟悉程度，或者，让你针对学习过程中的每一部分分配合适的重视程度。</p><p>入门技巧能够让你快速地对事物有个基本的把握，虽然到最后阶段时你可能就不需要它了，不过在最初阶段，它是你最好的朋友。</p><p>入门技巧可以有很多的形式。比如：</p><ul><li>一些简单的改进方法</li><li>专注训练某一方面</li><li>对某些事情加以特别关注</li></ul><p>入门技巧的益处：</p><ul><li>使你能够很投入地做事情，你安心地告诉自己，知道技巧就能做了。</li><li>即使不能很快做好，起码可以提高速度，让你有耐心忍受长达几个小时的练习。</li></ul><p>随着学习的推进，或许到某个节点时，你会发现自己不再需要这些技巧了，这说明它们已经完成助你走向完美微精通的光荣使命。</p><h3 id="协同障碍"><a href="#协同障碍" class="headerlink" title="协同障碍"></a>协同障碍</h3>]]></content>
      
      
      
        <tags>
            
            <tag> mircromastery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程基础：socket</title>
      <link href="/dao/python/zh-CN/31ee077c5c0f.html"/>
      <url>/dao/python/zh-CN/31ee077c5c0f.html</url>
      
        <content type="html"><![CDATA[<p><code>socket</code>模块（底层网络接口）提供了访问 BSD 套接字 的接口。在所有现代 Unix 系统、Windows、macOS 和其他一些平台上可用。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Socket 又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。这个 Python 接口是用 Python 的面向对象风格对 Unix 系统调用和套接字库接口的直译：函数 <code>socket()</code> 返回一个 <strong>套接字对象</strong>，其方法是对各种套接字系统调用的实现。形参类型一般与 C 接口相比更高级：例如在 Python 文件 <code>read()</code> 和 <code>write()</code> 操作中，接收操作的缓冲区分配是自动的，发送操作的缓冲区长度是隐式的。</p><ul><li>模块 <a href="https://docs.python.org/zh-cn/3.10/library/socketserver.html#module-socketserver">socketserver</a>：用于简化网络服务端编写的类。</li><li>模块 <a href="https://docs.python.org/zh-cn/3.10/library/ssl.html#module-ssl">ssl</a>：套接字对象的TLS/SSL封装。</li></ul><h2 id="套接字协议族"><a href="#套接字协议族" class="headerlink" title="套接字协议族"></a>套接字协议族</h2><p>根据系统以及构建选项，<code>socket</code>模块提供了各种套接字协议簇。</p><p><strong>协议</strong>（Protocol）就是网络通信过程中的约定或者合同，通信的双方必须都遵守才能正常收发数据。协议有很多种，例如 TCP、UDP、IP 等，通信的双方必须使用同一协议才能通信。协议是一种规范，由计算机组织制定，规定了很多细节，例如，如何建立连接，如何相互识别等。</p><blockquote><p>协议仅仅是一种规范，必须由计算机软件来实现。例如 IP 协议规定了如何找到目标计算机，那么各个开发商在开发自己的软件时就必须遵守该协议，不能另起炉灶。</p></blockquote><p>TCP/IP 模型包含了 TCP、IP、UDP、Telnet、FTP、SMTP 等上百个互为关联的协议，其中 TCP 和 IP 是最常用的两种底层协议，所以把它们统称为“TCP/IP 协议族”。它们的层级关系如下图所示：</p><p><img src="/dao/python/zh-CN/31ee077c5c0f/q.gif"></p><p>我们平常使用的程序（或者说软件）一般都是通过应用层来访问网络的，程序产生的数据会一层一层地往下传输，直到最后的网络接口层，就通过网线发送到互联网上去了。数据每往下走一层，就会被这一层的协议增加一层包装，等到发送到互联网上时，已经比原始数据多了四层包装。整个数据封装的过程就像俄罗斯套娃。</p><p>当另一台计算机接收到数据包时，会从网络接口层再一层一层往上传输，每传输一层就拆开一层包装，直到最后的应用层，就得到了最原始的数据，这才是程序要使用的数据。</p><p>给数据加包装的过程，实际上就是在数据的头部增加一个标志（一个数据块），表示数据经过了这一层，我已经处理过了。给数据拆包装的过程正好相反，就是去掉数据头部的标志，让它逐渐现出原形。</p><p>两台计算机进行通信时，必须遵守以下原则：</p><ul><li>必须是同一层次进行通信，比如，A 计算机的应用层和 B 计算机的传输层就不能通信，因为它们不在一个层次，数据的拆包会遇到问题。</li><li>每一层的功能都必须相同，也就是拥有完全相同的网络模型。如果网络模型都不同，那不就乱套了，谁都不认识谁。</li><li>数据只能逐层传输，不能跃层。</li><li>每一层可以使用下层提供的服务，并向上层提供服务。</li></ul><p>路由器用来完成 IP 层的交互任务。某个网络原来使用 A 公司的路由器，现要将其替换成 B 公司的，是否可行？这并非难事，并不一定要换成同一公司的同一型号路由器，因为所有生产商都会按照 IP 层标准制造。再举个例子。大家的计算机是否装有网络接口卡，也就是所谓的网卡？尚未安装也无妨，其实很容易买到，因为所有网卡制造商都会遵守链路层的协议标准。这就是开放式系统的优点。</p><h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>IP 地址是 Internet Protocol Address 的缩写，译为“网际协议地址”。一台计算机可以拥有一个独立的 IP 地址，一个局域网也可以拥有一个独立的 IP 地址（对外就好像只有一台计算机）。对于目前广泛使用 IPv4 地址，它的资源是非常有限的，一台计算机一个 IP 地址是不现实的，往往是一个局域网才拥有一个 IP 地址。</p><p>在因特网上进行通信时，必须要知道对方的 IP 地址。实际上数据包中已经附带了 IP 地址，把数据包发送给路由器以后，路由器会根据 IP 地址找到对方的地里位置，完成一次数据的传递。路由器有非常高效和智能的算法，很快就会找到目标计算机。</p><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><p>现实的情况是，一个局域网往往才能拥有一个独立的 IP；换句话说，IP 地址只能定位到一个局域网，无法定位到具体的一台计算机。这可怎么办呀？这样也没法通信啊。</p><p>其实，真正能唯一标识一台计算机的是 MAC 地址，每个网卡的 MAC 地址在全世界都是独一无二的。计算机出厂时，MAC 地址已经被写死到网卡里面了（当然通过某些“奇巧淫技”也是可以修改的）。局域网中的路由器/交换机会记录每台计算机的 MAC 地址。</p><blockquote><p>MAC 地址是 Media Access Control Address 的缩写，直译为“媒体访问控制地址”，也称为局域网地址（LAN Address），以太网地址（Ethernet Address）或物理地址（Physical Address）。</p></blockquote><p>数据包中除了会附带对方的 IP 地址，还会附带对方的 MAC 地址，当数据包达到局域网以后，路由器/交换机会根据数据包中的 MAC 地址找到对应的计算机，然后把数据包转交给它，这样就完成了数据的传递。</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>有了 IP 地址和 MAC 地址，虽然可以找到目标计算机，但仍然不能进行通信。一台计算机可以同时提供多种网络服务，例如 Web 服务（网站）、FTP 服务（文件传输服务）、SMTP 服务（邮箱服务）等，仅有 IP 地址和 MAC 地址，计算机虽然可以正确接收到数据包，但是却不知道要将数据包交给哪个网络程序来处理，所以通信失败。</p><p>为了区分不同的网络程序，计算机会为每个网络程序分配一个独一无二的端口号（Port Number），例如，Web 服务的端口号是 80，FTP 服务的端口号是 21，SMTP 服务的端口号是 25。</p><p>端口（Port）是一个虚拟的、逻辑上的概念。可以将端口理解为一道门，数据通过这道门流入流出，每道门有不同的编号，就是端口号。</p>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级 I/O 复用库</title>
      <link href="/dao/python/zh-CN/c7565b5b6ae3.html"/>
      <url>/dao/python/zh-CN/c7565b5b6ae3.html</url>
      
        <content type="html"><![CDATA[<p>参考自：<a href="https://docs.python.org/3.10/library/selectors.html">selectors — High-level I/O multiplexing</a></p><p><code>selectors</code> 模块允许高层级且高效率的 I/O 复用，它建立在 <code>select</code> 模块原型的基础之上，提供基于 <code>select</code> 模块的 I/O 复用的平台无关的抽象。推荐使用 <code>selectors</code> 模块，除非希望对所使用的 OS 层级原型进行精确控制。它定义了一个 <code>BaseSelector</code> 抽象基类，以及多个实际的实现 (<a href="https://docs.python.org/zh-cn/3.10/library/selectors.html#selectors.KqueueSelector" title="selectors.KqueueSelector"><code>KqueueSelector</code></a>,&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/selectors.html#selectors.EpollSelector" title="selectors.EpollSelector"><code>EpollSelector</code></a>…)，它们可被用于在多个文件对象上等待 I/O 就绪通知。 在下文中，”文件对象” 是指任何具有 <code>fileno()</code> 方法的对象，或是一个原始文件描述器。参见 <a href="https://docs.python.org/3.10/glossary.html#term-file-object">file object</a>。</p><div class="w3-pale-green w3-card w3-padding"><p><dfn class="xin-term">文件对象</dfn>（file object）：对外提供面向文件 API 以使用下层资源的对象（带有 <code>read()</code> 或 <code>write()</code> 这样的方法）。根据其创建方式的不同，文件对象可以处理对真实磁盘文件，对其他类型存储，或是对通讯设备的访问（例如标准输入/输出、内存缓冲区、套接字、管道等等）。文件对象也被称为 <strong>file-like objects</strong> 或 <strong>流</strong>（streams）。</p><p>实际上共有三种类别的文件对象: 原始 <a href="https://docs.python.org/3.10/glossary.html#term-binary-file">二进制文件</a>, 被缓冲的 <a href="https://docs.python.org/3.10/glossary.html#term-binary-file">二进制文件</a> 以及 <a href="https://docs.python.org/3.10/glossary.html#term-text-file">文本文件</a>。它们的接口定义均在 <code>io</code> 模块中。创建文件对象的规范方式是使用 <code><a href="https://docs.python.org/3.10/library/functions.html#open">open()</a></code> 函数。</p></div><p><code>DefaultSelector</code> 是一个指向当前平台上可用的最高效实现的别名：这应为大多数用户的默认选择。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> _can_use<span class="token punctuation">(</span><span class="token string">'kqueue'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> KqueueSelector<span class="token keyword">elif</span> _can_use<span class="token punctuation">(</span><span class="token string">'epoll'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> EpollSelector<span class="token keyword">elif</span> _can_use<span class="token punctuation">(</span><span class="token string">'devpoll'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> DevpollSelector<span class="token keyword">elif</span> _can_use<span class="token punctuation">(</span><span class="token string">'poll'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> PollSelector<span class="token keyword">else</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> SelectSelector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下文中，<code>events</code> 一个位掩码，指明哪些 I/O 事件要在给定的文件对象上执行等待。它可以是以下模块级常量的组合:</p><table><thead><tr><th align="center">常量</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">EVENT_READ</td><td align="center">可读</td></tr><tr><td align="center">EVENT_WRITE</td><td align="center">可写</td></tr></tbody></table><h2 id="class-selectors-SelectorKey"><a href="#class-selectors-SelectorKey" class="headerlink" title="class selectors.SelectorKey"></a>class selectors.SelectorKey</h2><p><code>SelectorKey</code> 是一个 <a href="https://docs.python.org/zh-cn/3.10/library/collections.html#collections.namedtuple">namedtuple</a>，用来将文件对象关联到其隐含的文件描述器、选定事件掩码和附加数据等。它会被某些 <code>BaseSelector</code> 方法返回。</p><dl class="w3-pale-yellow w3-card-4 w3-padding"> <dt class="w3-pale-green w3-card-4">fileobj</dt> <dd>已注册的文件对象</dd> <dt class="w3-pale-green w3-card-4">fd</dt> <dd>隐含的的文件描述器（Underlying file descriptor）</dd> <dt class="w3-pale-green w3-card-4">events</dt> <dd>必须在此文件对象上被等待的事件</dd> <dt class="w3-pale-green w3-card-4">data</dt> <dd>可选的关联到此文件对象的不透明数据：例如，这可被用来存储各个客户端的会话 ID</dd></dl><h2 id="class-selectors-BaseSelector"><a href="#class-selectors-BaseSelector" class="headerlink" title="class selectors.BaseSelector"></a>class selectors.BaseSelector</h2><p>一个 <code>BaseSelector</code>，用来在多个文件对象上等待 I/O 事件就绪。它支持文件流注册、注销，以及在这些流上等待 I/O 事件的方法。它是一个抽象基类，因此不能被实例化。请改用 <code>DefaultSelector</code>，或者 <code>SelectSelector</code>, <code>KqueueSelector</code> 等。如果你想要指明使用某个实现，并且你的平台支持它的话。<code>BaseSelector</code> 及其具体实现支持 <a href="https://docs.python.org/3.10/glossary.html#term-context-manager">context manager</a> 协议。</p><dl class="w3-pale-yellow w3-card-4 w3-padding"> <dt class="w3-pale-green w3-card-4">abstractmethod register(fileobj, events, data=None)</dt> <dd>注册一个用于选择的文件对象，在其上监视 I/O 事件。</dd> <dd><code>fileobj</code> 是要监视的文件对象。它可以是整数形式的文件描述符或者具有 <code>fileno()</code> 方法的对象。<code>events</code> 是要监视的事件的位掩码。<code>data</code> 是一个不透明对象。</dd> <dd>这将返回一个新的 <code>SelectorKey</code> 实例，或在出现无效事件掩码或文件描述符时引发 <code>ValueError</code>，或在文件对象已被注册时引发 <code>KeyError</code>。</dd> <dt class="w3-pale-green w3-card-4">abstractmethod unregister(fileobj)</dt> <dd>注销对一个文件对象的选择，移除对它的监视。在文件对象被关闭之前应当先将其注销。</dd> <dd><code>fileobj</code>必须是之前已注册的文件对象。</dd> <dd>这将返回已关联的 <code>SelectorKey</code> 实例，或者如果 <code>fileobj</code> 未注册则会引发 <code>KeyError</code>。 如果 <code>fileobj</code> 无效（例如它没有 <code>fileobj()</code> 方法或其 <code>fileobj()</code> 方法返回无效值），则返回 <code>ValueError</code></dd>  <dt class="w3-pale-green w3-card-4">modify(fileobj, events, data=None)(fileobj)</dt> <dd>更改已注册文件对象所监视的事件或所附带的数据。</dd> <dd>这等价于 <code>BaseSelector.unregister(fileobj)()</code> 加 <code>BaseSelector.register(fileobj, events, data)()</code>，区别在于它可以被更高效地实现。</dd> <dd>这将返回一个新的 <code>SelectorKey</code> 实例，或在出现无效事件掩码或文件描述符时引发 <code>ValueError</code>，或在文件对象未被注册时引发 <code>KeyError</code>。</dd> <dt class="w3-pale-green w3-card-4">abstractmethod select(timeout=None)</dt> <dd>等待直到有已注册的文件对象就绪，或是超过时限。</dd> <dd>如果 <code>timeout &gt; 0</code>，这指定以秒数表示的最大等待时间。如果 <code>timeout &lt;= 0</code>，调用将不会阻塞，并将报告当前就绪的文件对象。如果 <code>timeout</code> 为 <code>None</code>，调用将阻塞直到某个被监视的文件对象就绪。</dd> <dd>返回由 <code>(key, events)</code> 元组构成的列表，每项各表示一个就绪的文件对象。</dd> <dd><code>key</code> 是对应于就绪文件对象的 <code>SelectorKey</code> 实例。<code>events</code> 是在此文件对象上等待的事件位掩码。</dd> <dd class="w3-card-4 w3-light-grey w3-padding"><span class="w3-text-blue">注解</span>：如果当前进程收到一个信号（<code>signal</code>），此方法可在任何文件对象就绪之前或超出时限时返回：在此情况下，将返回一个空列表。</dd><dd> </dd><dd>在 3.5 版更改: 现在当被某个信号中断时，如果信号处理程序没有引发异常，选择器会用重新计算的超时值进行重试（理由请查看 <a href="https://www.python.org/dev/peps/pep-0475">PEP 475</a> ），而不是在超时之前返回空的事件列表。</dd> <dt class="w3-pale-green w3-card-4">close()</dt> <dd>关闭选择器（selector）。</dd> <dd>必须调用这个方法以确保下层资源会被释放。选择器被关闭后将不可再使用。</dd> <dt class="w3-pale-green w3-card-4">get_key(fileobj)</dt> <dd>返回关联到某个已注册文件对象的键。</dd> <dd>此方法将返回关联到文件对象的 <code>SelectorKey</code> 实例，或在文件对象未注册时引发 <code>KeyError</code>。</dd> <dt class="w3-pale-green w3-card-4">abstractmethod get_map()</dt> <dd>返回从文件对象到选择器键的映射。</dd> <dd>返回一个将已注册文件对象映射到与其相关联的<code>SelectorKey</code> 实例的 <a href="https://docs.python.org/zh-cn/3.10/library/collections.abc.html#collections.abc.Mapping">Mapping</a> 实例。</dd></dl><h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><p>下面是一个简单的<code>echo</code>服务器实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> selectors<span class="token keyword">import</span> socket<span class="token comment"># 生成一个 select 对象</span>sel <span class="token operator">=</span> selectors<span class="token punctuation">.</span>DefaultSelector<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">accept</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Should be ready</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'accepted'</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 设定非阻塞</span>    <span class="token comment"># 新连接注册 read 回调函数</span>    sel<span class="token punctuation">.</span>register<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> selectors<span class="token punctuation">.</span>EVENT_READ<span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment"># Should be ready</span>    <span class="token keyword">if</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'echoing'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># Hope it won't block</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing'</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span>        sel<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 把刚生成的sock连接对象注册到select连接列表中，并交给accept函数处理</span>sel<span class="token punctuation">.</span>register<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> selectors<span class="token punctuation">.</span>EVENT_READ<span class="token punctuation">,</span> accept<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    events <span class="token operator">=</span> sel<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 默认是阻塞，有活动连接就返回活动的连接列表</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> mask <span class="token keyword">in</span> events<span class="token punctuation">:</span>        callback <span class="token operator">=</span> key<span class="token punctuation">.</span>data <span class="token comment"># 去调accept函数</span>        callback<span class="token punctuation">(</span>key<span class="token punctuation">.</span>fileobj<span class="token punctuation">,</span> mask<span class="token punctuation">)</span>  <span class="token comment"># key.fileobj就是readable中的一个socket连接对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://pymotw.com/3/selectors/">https://pymotw.com/3/selectors/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 异步编程技巧</title>
      <link href="/dao/python/zh-CN/59343b396510.html"/>
      <url>/dao/python/zh-CN/59343b396510.html</url>
      
        <content type="html"><![CDATA[<p>经验告诉我们永远不要面向用户的接口暴露 <code>Future</code> 对象，同时建议使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.create_future" title="asyncio.loop.create_future"><code>loop.create_future()</code></a>&nbsp;来创建 <code>Future</code> 对象。这种方法可以让 <code>Future</code> 对象使用其它的事件循环实现，它可以注入自己的优化实现。</p>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发执行任务</title>
      <link href="/dao/post/zh-CN/99261320ee2d.html"/>
      <url>/dao/post/zh-CN/99261320ee2d.html</url>
      
        <content type="html"><![CDATA[<p>任务（<code>Task</code>）是与事件循环进行交互的主要方式之一。任务包装协程并跟踪它们何时完成。任务是 <code>Future</code> 的子类，因此其他协程可以等待它们，并且每个协程都有可以在任务完成后检索的结果。</p><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p>要启动任务，请使用 <code>create_task()</code> 创建一个 <code>Task</code> 实例。只要循环正在运行且协程不返回，结果任务将作为事件循环管理的并发操作的一部分运行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_create_task.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in task_func'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'the result'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'creating task'</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'waiting for </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    return_value <span class="token operator">=</span> <span class="token keyword">await</span> task    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'task completed </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'return value: </span><span class="token interpolation"><span class="token punctuation">{</span>return_value<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本示例在 <code>main()</code> 函数退出之前等待任务返回结果。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_create_task.pycreating taskwaiting <span class="token keyword">for</span> <span class="token operator">&lt;</span>Task pending <span class="token assign-left variable">coro</span><span class="token operator">=</span><span class="token operator">&lt;</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span> running atasyncio_create_task.py:1<span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span><span class="token keyword">in</span> task_functask completed <span class="token operator">&lt;</span>Task finished <span class="token assign-left variable">coro</span><span class="token operator">=</span><span class="token operator">&lt;</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span> done, defined atasyncio_create_task.py:1<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token string">'the result'</span><span class="token operator">&gt;</span><span class="token builtin class-name">return</span> value: <span class="token string">'the result'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取消任务"><a href="#取消任务" class="headerlink" title="取消任务"></a>取消任务</h2><p>通过保留从 <code>create_task()</code> 返回的 <code>Task</code> 对象，可以在任务完成之前取消其操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_cancel_task.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in task_func'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'the result'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'creating task'</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'canceling task'</span><span class="token punctuation">)</span>    task<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'canceled task </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> task    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>CancelledError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'caught error from canceled task'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'task result: </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本示例在启动事件循环之前创建并取消任务。结果是来自 <code>run_until_complete()</code> 的 <code>CancelledError</code> 异常。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_cancel_task.pycreating taskcanceling taskcanceled task <span class="token operator">&lt;</span>Task cancelling <span class="token assign-left variable">coro</span><span class="token operator">=</span><span class="token operator">&lt;</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span> running atasyncio_cancel_task.py:1<span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span>caught error from canceled task<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果任务在等待另一个并发操作时被取消，则通过在任务等待时引发 <code>CancelledError</code> 异常来通知该任务已取消。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_cancel_task2.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in task_func, sleeping'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>CancelledError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task_func was canceled'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span>    <span class="token keyword">return</span> <span class="token string">'the result'</span><span class="token keyword">def</span> <span class="token function">task_canceller</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in task_canceller'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'canceled the task'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'creating task'</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>task_canceller<span class="token punctuation">,</span> task<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> task    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>CancelledError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main() also sees task as canceled'</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如有必要，捕获异常可提供清理已完成工作的机会。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_cancel_task2.pycreating task<span class="token keyword">in</span> task_func, sleeping<span class="token keyword">in</span> task_cancellercanceled the tasktask_func was canceledmain<span class="token punctuation">(</span><span class="token punctuation">)</span> also sees task as canceled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从协程中创建任务"><a href="#从协程中创建任务" class="headerlink" title="从协程中创建任务"></a>从协程中创建任务</h2><p><code>ensure_future()</code> 函数返回与协程的执行相关的 <code>Task</code>。然后可以将该 <code>Task</code> 实例传递给其他代码，后者可以在不知道原始协程如何构造或调用的情况下等待它。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_ensure_future.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">wrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wrapped'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'result'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'inner: starting'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'inner: waiting for </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> task    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'inner: task returned </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">starter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starter: creating task'</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>wrapped<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starter: waiting for inner'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> inner<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starter: inner returned'</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>starter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，直到有某种使用 <code>await</code> 执行的协程才启动给 <code>ensure_future()</code> 的协程。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_ensure_future.pyentering event loopstarter: creating taskstarter: waiting <span class="token keyword">for</span> innerinner: startinginner: waiting <span class="token keyword">for</span> <span class="token operator">&lt;</span>Task pending <span class="token assign-left variable">coro</span><span class="token operator">=</span><span class="token operator">&lt;</span>wrapped<span class="token punctuation">(</span><span class="token punctuation">)</span> running atasyncio_ensure_future.py:1<span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span>wrappedinner: task returned <span class="token string">'result'</span>starter: inner returned<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Future 以异步方式生成数据</title>
      <link href="/dao/post/zh-CN/3cef5935d457.html"/>
      <url>/dao/post/zh-CN/3cef5935d457.html</url>
      
        <content type="html"><![CDATA[<p><code>Future</code> 对象用来链接 <strong>底层回调式代码</strong> 和高层异步/等待式代码。</p><h2 id="Future-对象"><a href="#Future-对象" class="headerlink" title="Future 对象"></a>Future 对象</h2><p>class <code>asyncio.Future(*, loop=None)</code>：一个 <code>Future</code> 代表一个异步运算的最终结果。线程不安全。</p><p><code>Future</code> 是一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-awaitable">awaitable</a>&nbsp;对象。协程可以等待 <code>Future</code> 对象直到它们有结果或异常集合或被取消。</p><p>通常 <code>Future</code> 用于支持底层回调式代码(例如在协议实现中使用 <code>asyncio</code>&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-protocol.html#asyncio-transports-protocols">transports</a>) 与高层异步/等待式代码交互。</p><p>经验告诉我们永远不要面向用户的接口暴露 <code>Future</code> 对象，同时建议使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.create_future" title="asyncio.loop.create_future"><code>loop.create_future()</code></a>&nbsp;来创建 <code>Future</code> 对象。这种方法可以让 <code>Future</code> 对象使用其它的事件循环实现，它可以注入自己的优化实现。</p><h3 id="set-result-result"><a href="#set-result-result" class="headerlink" title="set_result(result)"></a><code>set_result(result)</code></h3><p>将 <code>Future</code> 标记为&nbsp;<em>完成</em>&nbsp;并设置结果。</p><p>如果 <code>Future</code> 已经&nbsp;<em>完成</em>&nbsp;则抛出一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;错误。</p><h3 id="result"><a href="#result" class="headerlink" title="result()"></a><code>result()</code></h3><p>返回 <code>Future</code> 的结果。</p><p>如果 <code>Future</code> 状态为&nbsp;<em>完成</em>&nbsp;，并由&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.set_result" title="asyncio.Future.set_result"><code>set_result()</code></a>&nbsp;方法设置一个结果，则返回这个结果。</p><p>如果 <code>Future</code> 状态为&nbsp;<em>完成</em>&nbsp;，并由&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.set_exception" title="asyncio.Future.set_exception"><code>set_exception()</code></a>&nbsp;方法设置一个异常，那么这个方法会引发异常。</p><p>如果 <code>Future</code> 已&nbsp;<em>取消</em>，方法会引发一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.CancelledError" title="asyncio.CancelledError"><code>CancelledError</code></a>&nbsp;异常。</p><p>如果 <code>Future</code> 的结果还不可用，此方法会引发一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;异常。</p><h3 id="set-exception-exception"><a href="#set-exception-exception" class="headerlink" title="set_exception(exception)"></a><code>set_exception(exception)</code></h3><p>将 F<code>uture</code> 标记为&nbsp;<em>完成</em>&nbsp;并设置一个异常。</p><p>如果 <code>Future</code> 已经&nbsp;<em>完成</em>&nbsp;则抛出一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;错误。</p><h3 id="done"><a href="#done" class="headerlink" title="done()"></a><code>done()</code></h3><p>如果 <code>Future</code> 为已&nbsp;<em>完成</em>&nbsp;则返回&nbsp;<code>True</code>。</p><p>如果 <code>Future</code> 为&nbsp;<em>取消</em>&nbsp;或调用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.set_result" title="asyncio.Future.set_result"><code>set_result()</code></a>&nbsp;设置了结果或调用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.set_exception" title="asyncio.Future.set_exception"><code>set_exception()</code></a>&nbsp;设置了异常，那么它就是&nbsp;<em>完成</em>。</p><h3 id="cancelled"><a href="#cancelled" class="headerlink" title="cancelled()"></a><code>cancelled()</code></h3><p>如果 <code>Future</code> 已 取消 则返回 <code>True</code>。</p><p>这个方法通常在设置结果或异常前用来检查 <code>Future</code> 是否已 <em>取消</em>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token keyword">not</span> fut<span class="token punctuation">.</span>cancelled<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="add-done-callback-callback-context-None"><a href="#add-done-callback-callback-context-None" class="headerlink" title="add_done_callback(callback, *, context=None)"></a><code>add_done_callback(callback, *, context=None)</code></h3><p>添加一个在 <code>Future</code>&nbsp;<em>完成</em>&nbsp;时运行的回调函数。</p><p>调用&nbsp;<em><code>callback</code></em>&nbsp;时，<code>Future</code> 对象是它的唯一参数。</p><p>调用这个方法时 <code>Future</code> 已经&nbsp;<em>完成</em>&nbsp;, 回调函数已被&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.call_soon" title="asyncio.loop.call_soon"><code>loop.call_soon()</code></a>&nbsp;调度。</p><p>可选键值类的参数&nbsp;<em><code>context</code></em>&nbsp;允许&nbsp;<em><code>callback</code></em>&nbsp;运行在一个指定的自定义&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/contextvars.html#contextvars.Context" title="contextvars.Context"><code>contextvars.Context</code></a>&nbsp;对象中。如果没有提供&nbsp;<em><code>context</code></em>&nbsp;，则使用当前上下文。</p><p>可以用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/functools.html#functools.partial" title="functools.partial"><code>functools.partial()</code></a>&nbsp;给回调函数传递参数，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Call 'print("Future:", fut)' when "fut" is done.</span>fut<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>    functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">,</span> <span class="token string">"Future:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="remove-done-callback-callback"><a href="#remove-done-callback-callback" class="headerlink" title="remove_done_callback(callback)"></a><code>remove_done_callback(callback)</code></h3><p>从回调列表中移除 <code>callback</code>。</p><p>返回被移除的回调函数的数量，通常为 1，除非一个回调函数被添加多次。</p><h3 id="cancel-msg-None"><a href="#cancel-msg-None" class="headerlink" title="cancel(msg=None)"></a><code>cancel(msg=None)</code></h3><p>取消 <code>Future</code> 并调度回调函数。</p><p>如果 <code>Future</code> 已经 <em>完成</em> 或 <em>取消</em>，返回 <code>False</code>。否则将 <code>Future</code> 状态改为 <em>取消</em> 并在调度回调函数后返回 <code>True</code>。</p><h3 id="exception"><a href="#exception" class="headerlink" title="exception()"></a><code>exception()</code></h3><p>返回 <code>Future</code> 已设置的异常。</p><p>只有 <code>Future</code> 在&nbsp;<em>完成</em>&nbsp;时才返回异常（或者&nbsp;<code>None</code>&nbsp;，如果没有设置异常）。</p><p>如果 <code>Future</code> 已&nbsp;<em>取消</em>，方法会引发一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.CancelledError" title="asyncio.CancelledError"><code>CancelledError</code></a>&nbsp;异常。</p><p>如果 <code>Future</code> 还没&nbsp;<em>完成</em>&nbsp;，这个方法会引发一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;异常。</p><h3 id="get-loop"><a href="#get-loop" class="headerlink" title="get_loop()"></a><code>get_loop()</code></h3><p>返回 <code>Future</code> 对象已绑定的事件循环。</p><h2 id="Future-函数"><a href="#Future-函数" class="headerlink" title="Future 函数"></a>Future 函数</h2><h3 id="asyncio-isfuture-obj"><a href="#asyncio-isfuture-obj" class="headerlink" title="asyncio.isfuture(obj)"></a><code>asyncio.isfuture(obj)</code></h3><p>如果 <code>obj</code> 为下面任意对象，返回 <code>True</code>：</p><ul><li>一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future" title="asyncio.Future"><code>asyncio.Future</code></a>&nbsp;类的实例，</li><li>一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task" title="asyncio.Task"><code>asyncio.Task</code></a>&nbsp;类的实例，</li><li>带有&nbsp;<code>_asyncio_future_blocking</code>&nbsp;属性的类似 <code>Future</code> 的对象。</li></ul><h3 id="asyncio-ensure-future-obj-loop-None"><a href="#asyncio-ensure-future-obj-loop-None" class="headerlink" title="asyncio.ensure_future(obj, *, loop=None)"></a><code>asyncio.ensure_future(obj, *, loop=None)</code></h3><p>返回：</p><ul><li><p><em><code>obj</code></em>&nbsp;参数会是保持原样，如果&nbsp;<em><code>obj</code></em>&nbsp;是&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future" title="asyncio.Future"><code>Future</code></a>、&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task" title="asyncio.Task"><code>Task</code></a>&nbsp;或 类似 Future 的对象(&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.isfuture" title="asyncio.isfuture"><code>isfuture()</code></a>&nbsp;用于测试。)</p></li><li><p>封装了&nbsp;<em><code>obj</code></em>&nbsp;的&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task" title="asyncio.Task"><code>Task</code></a>&nbsp;对象，如果&nbsp;<em><code>obj</code></em>&nbsp;是一个协程 (使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.iscoroutine" title="asyncio.iscoroutine"><code>iscoroutine()</code></a>&nbsp;进行检测)；在此情况下该协程将通过&nbsp;<code>ensure_future()</code>&nbsp;加入执行计划。</p></li><li><p>等待&nbsp;<em><code>obj</code></em>&nbsp;的&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task" title="asyncio.Task"><code>Task</code></a>&nbsp;对象，如果&nbsp;<em><code>obj</code></em>&nbsp;是一个可等待对象(&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/inspect.html#inspect.isawaitable" title="inspect.isawaitable"><code>inspect.isawaitable()</code></a>&nbsp;用于测试)</p></li></ul><p>如果 <code>obj</code> 不是上述对象会引发一个 <code>TypeError</code> 异常。</p><h3 id="asyncio-wrap-future-future-loop-None"><a href="#asyncio-wrap-future-future-loop-None" class="headerlink" title="asyncio.wrap_future(future, *, loop=None)"></a><code>asyncio.wrap_future(future, *, loop=None)</code></h3><p>将一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.Future" title="concurrent.futures.Future"><code>concurrent.futures.Future</code></a>&nbsp;对象封装到&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future" title="asyncio.Future"><code>asyncio.Future</code></a>&nbsp;对象中。</p><h2 id="Waiting-for-a-Future"><a href="#Waiting-for-a-Future" class="headerlink" title="Waiting for a Future"></a>Waiting for a Future</h2><p><code>Future</code> 的行为就像协程，因此，任何用于等待协程的有用技术也可以用来等待 <code>future</code> 被标记为完成。本示例将 <code>future</code> 传递给事件循环的 <code>run_until_complete()</code> 方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_future_event_loop.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">def</span> <span class="token function">mark_done</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'setting future result to </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    future<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span>result<span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    all_done <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scheduling mark_done'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>mark_done<span class="token punctuation">,</span> all_done<span class="token punctuation">,</span> <span class="token string">'the result'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>all_done<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'returned result: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'future result: </span><span class="token interpolation"><span class="token punctuation">{</span>all_done<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用 <code>set_result()</code> 时，<code>Future</code> 的状态更改为完成，并且 <code>Future</code> 实例保留提供给该方法的结果供以后检索。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_future_event_loop.pyscheduling mark_doneentering event loopsetting future result to <span class="token string">'the result'</span>returned result: <span class="token string">'the result'</span>closing event loopfuture result: <span class="token string">'the result'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Future</code> 也可以与 <code>await</code> 关键字一起使用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_future_await.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">def</span> <span class="token function">mark_done</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'setting future result to </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    future<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    all_done <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scheduling mark_done'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>mark_done<span class="token punctuation">,</span> all_done<span class="token punctuation">,</span> <span class="token string">'the result'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> all_done    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'returned result: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Future</code> 的结果是由 <code>await</code> 返回的，因此通常可以在常规协程和 <code>Future</code> 实例中使用相同的代码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_future_await.pyscheduling mark_donesetting future result to <span class="token string">'the result'</span>returned result: <span class="token string">'the result'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Future-Callbacks"><a href="#Future-Callbacks" class="headerlink" title="Future Callbacks"></a>Future Callbacks</h2><p>除了像协程一样工作，<code>Future</code> 还可以在完成时调用回调。回调按注册顺序调用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_future_callback.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string">: future done: </span><span class="token interpolation"><span class="token punctuation">{</span>future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">register_callbacks</span><span class="token punctuation">(</span>all_done<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks on future'</span><span class="token punctuation">)</span>    all_done<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    all_done<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>all_done<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> register_callbacks<span class="token punctuation">(</span>all_done<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'setting result of future'</span><span class="token punctuation">)</span>    all_done<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">'the result'</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    all_done <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>all_done<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调应包含一个参数，即 <code>Future</code> 实例。要将其他参数传递给回调，请使用 <code>functools.partial()</code> 创建包装器。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_future_callback.pyregistering callbacks on futuresetting result of future<span class="token number">1</span>: future done: <span class="token string">'the result'</span><span class="token number">2</span>: future done: <span class="token string">'the result'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用事件循环创建-Future"><a href="#使用事件循环创建-Future" class="headerlink" title="使用事件循环创建 Future"></a>使用事件循环创建 Future</h2><p>这个例子创建一个 <code>Future</code> 对象，创建和调度一个异步任务去设置 <code>Future</code> 结果，然后等待其结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">set_after</span><span class="token punctuation">(</span>fut<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Sleep for *delay* seconds.</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>    <span class="token comment"># Set *value* as a result of *fut* Future.</span>    fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Get the current event loop.</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Create a new Future object.</span>    fut <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Run "set_after()" coroutine in a parallel Task.</span>    <span class="token comment"># We are using the low-level "loop.create_task()" API here because</span>    <span class="token comment"># we already have a reference to the event loop at hand.</span>    <span class="token comment"># Otherwise we could have just used "asyncio.create_task()".</span>    loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>        set_after<span class="token punctuation">(</span>fut<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'... world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello ...'</span><span class="token punctuation">)</span>    <span class="token comment"># Wait until *fut* has a result (1 second) and print it.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> fut<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重要</strong>：该 <code>Future</code> 对象是为了模仿 <code>concurrent.futures.Future</code> 类。主要差异包含：</p><ul><li><p>与 asyncio 的 Future 不同，<a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.Future" title="concurrent.futures.Future"><code>concurrent.futures.Future</code></a>&nbsp;实例不是可等待对象。</p></li><li><p><a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.result" title="asyncio.Future.result"><code>asyncio.Future.result()</code></a>&nbsp;和&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.exception" title="asyncio.Future.exception"><code>asyncio.Future.exception()</code></a>&nbsp;不接受&nbsp;<em>timeout</em>&nbsp;参数。</p></li><li><p>Future 没有&nbsp;<em>完成</em>&nbsp;时&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.result" title="asyncio.Future.result"><code>asyncio.Future.result()</code></a>&nbsp;和&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.exception" title="asyncio.Future.exception"><code>asyncio.Future.exception()</code></a>&nbsp;抛出一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;异常。</p></li><li><p>使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.add_done_callback" title="asyncio.Future.add_done_callback"><code>asyncio.Future.add_done_callback()</code></a>&nbsp;注册的回调函数不会立即调用，而是被&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.call_soon" title="asyncio.loop.call_soon"><code>loop.call_soon()</code></a>&nbsp;调度。</p></li><li><p><code>asyncio.Future</code> 不能兼容&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.wait" title="concurrent.futures.wait"><code>concurrent.futures.wait()</code></a>&nbsp;和&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.as_completed" title="concurrent.futures.as_completed"><code>concurrent.futures.as_completed()</code></a>&nbsp;函数。</p></li><li><p><a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.cancel" title="asyncio.Future.cancel"><code>asyncio.Future.cancel()</code></a>&nbsp;接受一个可选的&nbsp;<code>msg</code>&nbsp;参数，但&nbsp;<code>concurrent.futures.cancel()</code>&nbsp;无此参数。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio.Future </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scheduling Calls 设定定时器</title>
      <link href="/dao/post/zh-CN/c30844b50b8e.html"/>
      <url>/dao/post/zh-CN/c30844b50b8e.html</url>
      
        <content type="html"><![CDATA[<p>除了管理协程和 I/O 回调外，<code>asyncio</code> 事件循环还可以根据循环中保留的计时器值来调度对常规函数的调用。</p><h2 id="Scheduling-a-Callback-“Soon”"><a href="#Scheduling-a-Callback-“Soon”" class="headerlink" title="Scheduling a Callback “Soon”"></a>Scheduling a Callback “Soon”</h2><p>如果回调的时间无关紧要，则可以使用 <code>call_soon()</code> 为循环的下一次迭代安排调用。调用该函数后，该函数之后的所有其他位置参数都将传递给该回调。要将关键字参数传递给回调，请使用 <a href="https://pymotw.com/3/functools/index.html#module-functools">functools</a> 模块中的 <code>partial()</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_call_soon.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> kwarg<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'callback invoked with </span><span class="token interpolation"><span class="token punctuation">{</span>arg<span class="token punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token punctuation">{</span>kwarg<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    wrapped <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> kwarg<span class="token operator">=</span><span class="token string">'not default'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>wrapped<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调按调度的顺序被调用。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_call_soon.pyentering event loopregistering callbackscallback invoked with <span class="token number">1</span> and defaultcallback invoked with <span class="token number">2</span> and not defaultclosing event loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解：大多数&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio.html#module-asyncio" title="asyncio: Asynchronous I/O."><code>asyncio</code></a>&nbsp;的调度函数不让传递关键字参数。为此，请使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/functools.html#functools.partial" title="functools.partial"><code>functools.partial()</code></a>&nbsp;：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># will schedule "print("Hello", flush=True)"</span>loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>    functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 <code>partial</code> 对象通常比使用 <code>lambda</code> 更方便，<code>asyncio</code> 在调试和错误消息中能更好的呈现 <code>partial</code> 对象。</p><p>更加友好的写法是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_call_soon.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> kwarg<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'callback invoked with </span><span class="token interpolation"><span class="token punctuation">{</span>arg<span class="token punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token punctuation">{</span>kwarg<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">call_soon</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    wrapped <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> kwarg<span class="token operator">=</span><span class="token string">'not default'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>wrapped<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> call_soon<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安排回调"><a href="#安排回调" class="headerlink" title="安排回调"></a>安排回调</h3><ol><li><code>loop.call_soon(callback, *args, context=None)</code> 安排 <code>callback</code> 在事件循环的下一次迭代时附带 <code>args</code> 参数被调用。回调按其注册顺序被调用。每个回调仅被调用一次。可选的仅关键字型参数 <code>context</code> 允许为要运行的 <code>callback</code> 指定一个自定义 <code>contextvars.Context</code>。如果没有提供 <code>context</code>，则使用当前上下文。返回一个能用来取消回调的 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.Handle">asyncio.Handle</a> 实例。这个方法不是线程安全的。</li><li><code>loop.call_soon_threadsafe(callback, *args, context=None)</code> 是 <code>call_soon()</code> 的线程安全变体。必须被用于安排 来自其他线程 的回调。查看 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-dev.html#asyncio-multithreading">并发和多线程</a> 章节的文档。</li></ol><h2 id="调度延迟回调"><a href="#调度延迟回调" class="headerlink" title="调度延迟回调"></a>调度延迟回调</h2><p>事件循环提供安排调度函数在将来某个时刻调用的机制。事件循环使用单调时钟来跟踪时间。<code>loop.call_later(delay, callback, *args, context=None)</code> 安排 <code>callback</code> 在给定的 <code>delay</code> 秒（可以是 int 或者 float）后被调用。返回一个 asyncio.<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.TimerHandle">TimerHandle</a> 实例，该实例能用于取消回调。</p><p><code>callback</code> 只被调用一次。如果两个回调被安排在同样的时间点，执行顺序未限定。可选的位置参数&nbsp;<em><code>args</code></em>&nbsp;在被调用的时候传递给&nbsp;<em><code>callback</code></em>&nbsp;。如果你想把关键字参数传递给&nbsp;<em><code>callback</code></em>&nbsp;，请使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/functools.html#functools.partial" title="functools.partial"><code>functools.partial()</code></a>&nbsp;。</p><p>可选的仅关键字型参数&nbsp;<em>context</em>&nbsp;允许为要运行的&nbsp;<em>callback</em>&nbsp;指定一个自定义&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/contextvars.html#contextvars.Context" title="contextvars.Context"><code>contextvars.Context</code></a>。如果没有提供&nbsp;<em><code>context</code></em>&nbsp;，则使用当前上下文。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_call_later.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'callback </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> invoked'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_later<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_later<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.4</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此示例中，使用不同的参数将相同的回调函数调度了几次不同的时间。使用 <code>call_soon()</code> 的最终实例导致在任何定时实例之前使用参数 3 调用回调，这表明“soon”通常意味着最小的延迟。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$ python3 asyncio_call_later<span class="token punctuation">.</span>pyentering event loopregistering callbackscallback <span class="token number">3</span> invokedcallback <span class="token number">2</span> invokedcallback <span class="token number">1</span> invokedclosing event loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安排特定时间的回调"><a href="#安排特定时间的回调" class="headerlink" title="安排特定时间的回调"></a>安排特定时间的回调</h2><p>也可以安排在特定时间进行回调。该 <code>loop</code> 使用单调时钟（monotonic clock）而不是挂钟时间（wall-clock tim），以确保“now”的值永不回归。要为计划的回调选择时间，必须使用 <code>loop</code> 的 <code>time()</code> 方法从该时钟的内部状态开始。</p><p><code>loop.call_at(when, callback, *args, context=None)</code> 安排 <code>callback</code> 在给定的绝对时间戳 <code>when</code> (<code>int</code> 或 <code>float</code>) 被调用，使用与 <code>loop.time()</code> 同样的时间参考。这个函数的行为与&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.call_later" title="asyncio.loop.call_later"><code>call_later()</code></a>&nbsp;相同。返回一个 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.TimerHandle" title="asyncio.TimerHandle"><code>asyncio.TimerHandle</code></a>&nbsp;实例，该实例能用于取消回调。</p><p><code>loop.time()</code> 根据时间循环内部的单调时钟，返回当前时间为一个 <code>float</code> 值。参见 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.sleep">asyncio.sleep()</a> 函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_call_at.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'callback </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> invoked at </span><span class="token interpolation"><span class="token punctuation">{</span>loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'clock time: </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'loop  time: </span><span class="token interpolation"><span class="token punctuation">{</span>now<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_at<span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_at<span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，对应的 <code>loop</code> 的时间与 <code>time.time()</code> 返回的值不匹配。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_call_at.pyentering event loopclock time: <span class="token number">1618973483.6534503</span>loop  time: <span class="token number">3016024.109</span>registering callbackscallback <span class="token number">3</span> invoked at <span class="token number">3016024.109</span>callback <span class="token number">2</span> invoked at <span class="token number">3016024.218</span>callback <span class="token number">1</span> invoked at <span class="token number">3016024.312</span>closing event loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用协程书写多任务合作代码</title>
      <link href="/dao/post/zh-CN/779e0dcc29b0.html"/>
      <url>/dao/post/zh-CN/779e0dcc29b0.html</url>
      
        <content type="html"><![CDATA[<p>协程（Coroutine）是为并发操作而设计的语言构造。协程函数在被调用时会创建一个协程对象，然后调用者可以使用协程的 <code>send()</code> 方法运行该函数的代码。一个协程可以将 <code>await</code> 关键字与另一个协程一起暂停执行。暂停时，协程的状态得以维持，使其在下次唤醒时可以从中断的位置恢复。</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>事件循环是每个 <code>asyncio</code> 应用的核心。事件循环会运行异步任务和回调，执行网络 IO 操作，以及运行子进程。</p><p>应用开发者通常应当使用高层级的 <code>asyncio</code> 函数，例如 <code>asyncio.run()</code>，应当很少有必要引用<code>loop</code>对象或调用其方法。</p><p>以下低层级函数可被用于获取、设置或创建事件循环：</p><ol><li><code>asyncio.get_running_loop()</code> 返回当前 OS 线程中正在运行的事件循环。如果没有正在运行的事件循环则会引发 <code>RuntimeError</code>。此函数只能由协程或回调来调用。</li><li><code>asyncio.get_event_loop()</code> 获取当前事件循环。如果当前 OS 线程没有设置当前事件循环，该 OS 线程为主线程，并且 <code>set_event_loop()</code> 还没有被调用，则 <code>asyncio</code> 将创建一个新的事件循环并将其设为当前事件循环。由于此函数具有相当复杂的行为（特别是在使用了自定义事件循环策略的时候），更推荐在协程和回调中使用 <code>get_running_loop()</code> 函数而非 <code>get_event_loop()</code>。<span class="w3-pale-green">应该考虑使用 <code>asyncio.run()</code> 函数而非使用低层级函数来手动创建和关闭事件循环。</span></li><li><code>asyncio.set_event_loop(loop)</code> 将 <code>loop</code> 设置为当前 OS 线程的当前事件循环。</li><li><code>asyncio.new_event_loop()</code> 创建一个新的事件循环。</li></ol><p>请注意&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.get_event_loop" title="asyncio.get_event_loop"><code>get_event_loop()</code></a>，<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.set_event_loop" title="asyncio.set_event_loop"><code>set_event_loop()</code></a>&nbsp;以及&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.new_event_loop" title="asyncio.new_event_loop"><code>new_event_loop()</code></a>&nbsp;函数的行为可以通过&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-policy.html#asyncio-policies">设置自定义事件循环策略</a>&nbsp;来改变。</p><h2 id="启动协程"><a href="#启动协程" class="headerlink" title="启动协程"></a>启动协程</h2><p>有几种不同的方法可以使 <code>asyncio</code> 事件循环启动协程。最简单的方法是使用 <code>run_until_complete()</code>，将协程直接传递给它。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_coroutine.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">coroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in coroutine'</span><span class="token punctuation">)</span><span class="token comment"># 获取对事件循环的引用</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starting coroutine'</span><span class="token punctuation">)</span>    coro <span class="token operator">=</span> coroutine<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>coro<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一步是获取对事件循环的引用。可以使用默认的循环类型，或者可以实例化特定的循环类。在此示例中，使用默认循环。<code>run_until_complete()</code> 方法使用协程对象启动循环，并在协程退出返回时停止循环。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python asyncio_coroutine.pystarting coroutineentering event loop<span class="token keyword">in</span> coroutineclosing event loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行和停止循环"><a href="#运行和停止循环" class="headerlink" title="运行和停止循环"></a>运行和停止循环</h3><ol><li><code>loop.run_until_complete(future)</code> 运行直到 future(<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future">Future</a> 的实例) 被完成。如果参数是 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#coroutine">coroutine object</a>，将被隐式调度为 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task">asyncio.Task</a> 来运行。</li><li><code>loop.run_forever()</code> 运行事件循环直到 <code>stop()</code> 被调用。如果&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.stop" title="asyncio.loop.stop"><code>stop()</code></a>&nbsp;在调用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.run_forever" title="asyncio.loop.run_forever"><code>run_forever()</code></a>&nbsp;之前被调用，循环将轮询一次 I/O 选择器并设置超时为零，再运行所有已加入计划任务的回调来响应 I/O 事件（以及已加入计划任务的事件），然后退出。如果&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.stop" title="asyncio.loop.stop"><code>stop()</code></a>&nbsp;在&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.run_forever" title="asyncio.loop.run_forever"><code>run_forever()</code></a>&nbsp;运行期间被调用，循环将运行当前批次的回调然后退出。请注意在此情况下由回调加入计划任务的新回调将不会运行；它们将会在下次&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.run_forever" title="asyncio.loop.run_forever"><code>run_forever()</code></a>&nbsp;或&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.run_until_complete" title="asyncio.loop.run_until_complete"><code>run_until_complete()</code></a>&nbsp;被调用时运行。</li><li><code>loop.stop()</code> 停止事件循环。</li><li><code>loop.is_running()</code> 返回 <code>True</code> 如果事件循环当前正在运行。</li><li><code>loop.is_closed()</code>如果事件循环已经被关闭，返回 <code>True</code>。</li><li><code>loop.close()</code> 关闭事件循环。当这个函数被调用的时候，循环必须处于非运行状态。<code>pending</code> 状态的回调将被丢弃。此方法清除所有的队列并立即关闭执行器，不会等待执行器完成。这个方法是幂等的和不可逆的（idempotent and irreversible）。事件循环关闭后，不应调用其他方法。</li><li>coroutine <code>loop.shutdown_asyncgens()</code> 安排所有当前打开的&nbsp;<a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-asynchronous-generator">asynchronous generator</a>&nbsp;对象通过&nbsp;<a href="https://docs.python.org/zh-cn/3.10/reference/expressions.html#agen.aclose" title="agen.aclose"><code>aclose()</code></a>&nbsp;调用来关闭。在调用此方法后，如果有新的异步生成器被迭代事件循环将会发出警告。这应当被用来可靠地完成所有已加入计划任务的异步生成器。请注意当使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.run" title="asyncio.run"><code>asyncio.run()</code></a>&nbsp;时不必调用此函数。</li></ol><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>loop<span class="token punctuation">.</span>shutdown_asyncgens<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li><code>coroutine loop.shutdown_default_executor()</code> 安排默认执行器的关闭并等待它合并 <code>ThreadPoolExecutor</code> 中的所有线程。在调用此方法后，如果在使用默认执行器期间调用了 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.run_in_executor">loop.run_in_executor()</a> 则将会引发 <code>RuntimeError</code>。请注意当使用 <code>asyncio.run()</code> 时不必调用此函数。</li></ol><h2 id="从协程返回值"><a href="#从协程返回值" class="headerlink" title="从协程返回值"></a>从协程返回值</h2><p>协程的返回值被传递回启动并等待它的代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_coroutine_return.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">coroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in coroutine'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'result'</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    return_value <span class="token operator">=</span> event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>        coroutine<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'it returned: </span><span class="token interpolation"><span class="token punctuation">{</span>return_value<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种情况下，<code>run_until_complete()</code> 还返回它正在等待的协程的结果。</p><p>更加简便的写法是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_coroutine_return.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">coroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in coroutine'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'result'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    return_value <span class="token operator">=</span> <span class="token keyword">await</span> coroutine<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'it returned: </span><span class="token interpolation"><span class="token punctuation">{</span>return_value<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python asyncio_coroutine_return.py<span class="token keyword">in</span> coroutineit returned: 'result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="协程链"><a href="#协程链" class="headerlink" title="协程链"></a>协程链</h2><p>一个协程可以启动另一个协程并等待结果。这使得将任务分解为可重用的部分变得更加容易。以下示例具有必须按顺序执行的两个阶段，但是可以与其他操作同时运行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_coroutine_chain.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in outer'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'waiting for result1'</span><span class="token punctuation">)</span>    result1 <span class="token operator">=</span> <span class="token keyword">await</span> phase1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'waiting for result2'</span><span class="token punctuation">)</span>    result2 <span class="token operator">=</span> <span class="token keyword">await</span> phase2<span class="token punctuation">(</span>result1<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">phase1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in phase1'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'result1'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">phase2</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in phase2'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'result2 derived from </span><span class="token interpolation"><span class="token punctuation">{</span>arg<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    return_value <span class="token operator">=</span> <span class="token keyword">await</span> outer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'return value: </span><span class="token interpolation"><span class="token punctuation">{</span>return_value<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>await</code> 关键字而不是将新的协程添加到循环中，因为控制流已经在由循环管理的协程内部，因此不必告诉循环来管理新的协程。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_coroutine_chain.py<span class="token keyword">in</span> outerwaiting <span class="token keyword">for</span> <span class="token for-or-select variable">result1</span><span class="token keyword">in</span> phase1waiting <span class="token keyword">for</span> <span class="token for-or-select variable">result2</span><span class="token keyword">in</span> phase2<span class="token builtin class-name">return</span> value: <span class="token punctuation">(</span><span class="token string">'result1'</span>, <span class="token string">'result2 derived from result1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>contextvars 上下文变量</title>
      <link href="/dao/post/zh-CN/c4a5cb4d78b1.html"/>
      <url>/dao/post/zh-CN/c4a5cb4d78b1.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.python.org/zh-cn/3.10/library/contextvars.html"><code>contextvars</code></a> 提供了用于管理、存储和访问上下文相关状态的相关 API。<code>ContextVar</code> 类用于声明 <strong>上下文变量</strong>（Context Variables） 并与其一起使用。函数 <code>copy_context()</code> 和类 <code>Context</code> 用于管理当前上下文和异步框架中。</p><p>在多并发环境中，有状态的上下文管理器应该使用 Context Variables，而不是 <a href="https://docs.python.org/3.10/library/threading.html#threading.local">threading.local()</a> 来防止他们的状态意外泄露到其他代码。更多信息参见 <a href="https://www.python.org/dev/peps/pep-0567">PEP 567</a>。</p><h2 id="上下文变量"><a href="#上下文变量" class="headerlink" title="上下文变量"></a>上下文变量</h2><h3 id="class-contextvars-ContextVar-name-default"><a href="#class-contextvars-ContextVar-name-default" class="headerlink" title="class contextvars.ContextVar(name[, *, default])"></a>class <code>contextvars.ContextVar(name[, *, default])</code></h3><p>此类用于声明一个新的上下文变量，如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> contextvars <span class="token keyword">import</span> ContextVarvar<span class="token punctuation">:</span> ContextVar<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> ContextVar<span class="token punctuation">(</span><span class="token string">'var'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>name</code> 参数用于内省和调试，必需。调用 <code>ContextVar.get()</code> 时，如果上下文中没有找到此变量的值，则返回可选的仅命名参数 <code>default</code>。</p><p><strong>重要</strong>：上下文变量应该在顶级模块中创建，且永远不要在闭包中创建。<code>Context</code> 对象拥有对上下文变量的强引用，这可以让上下文变量被垃圾收集器正确回收。</p><p>下面介绍 <code>ContextVar</code> 对象的属性和方法：</p><ol><li><code>name</code>：上下文变量的名称，只读属性。</li><li><code>get([default])</code>：返回当前上下文中此上下文变量的值。如果当前上下文中此变量没有值，则此方法会：<ul><li>如果提供 <code>default</code> 值，则返回其值</li><li>返回上下文变量本身的默认值，如果创建此上下文变量时提供了默认值；或者</li><li>抛出 <a href="https://docs.python.org/zh-cn/3.10/library/exceptions.html#LookupError">LookupError</a> 异常</li></ul></li><li><code>set(value)</code>：调用此方法设置上下文变量在当前上下文中的值。必选参数 <code>value</code> 是上下文变量的新值。返回一个 <a href="https://docs.python.org/zh-cn/3.10/library/contextvars.html#contextvars.contextvars.Token">Token</a> 对象，可通过 <code>ContextVar.reset()</code> 方法将上下文变量还原为之前某个状态。</li><li><code>reset(token)</code>：将上下文变量重置为调用 <code>ContextVar.set()</code> 之前、创建 <code>token</code> 时候的状态。例如：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> ContextVar<span class="token punctuation">(</span><span class="token string">'var'</span><span class="token punctuation">)</span>token <span class="token operator">=</span> var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'new value'</span><span class="token punctuation">)</span><span class="token comment"># code that uses 'var'; var.get() returns 'new value'.</span>var<span class="token punctuation">.</span>reset<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token comment"># After the reset call the var has no value again, so</span><span class="token comment"># var.get() would raise a LookupError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class-contextvars-Token"><a href="#class-contextvars-Token" class="headerlink" title="class contextvars.Token"></a>class <code>contextvars.Token</code></h3><p><code>ContextVar.set()</code> 方法返回 <code>Token</code> 对象。此对象可以传递给 <code>ContextVar.reset()</code> 方法用于将上下文变量还原为调用 <code>set</code> 前的状态。</p><ul><li><code>Token.var</code>：只读属性。指向创建此 <code>token</code> 的 <code>ContextVar</code> 对象。</li><li><code>Token.old_value</code>：一个只读属性。会被设为在创建此令牌的 <code>ContextVar.set()</code> 方法调用之前该变量所具有的值。如果调用之前变量没有设置值，则它指向 <code>Token.MISSING</code></li><li><code>Token.MISSING</code>：<code>Token.old_value</code> 会用到的一个标记（marker）对象。</li></ul><h2 id="手动上下文管理"><a href="#手动上下文管理" class="headerlink" title="手动上下文管理"></a>手动上下文管理</h2><h3 id="contextvars-copy-context"><a href="#contextvars-copy-context" class="headerlink" title="contextvars.copy_context()"></a><code>contextvars.copy_context()</code></h3><p>返回当前上下文中 <code>Context</code> 对象的拷贝。</p><p>以下代码片段会获取当前上下文的拷贝并打印设置到其中的所有变量及其值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ctx<span class="token punctuation">:</span> Context <span class="token operator">=</span> copy_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此函数复杂度为 $O(1)$，也就是说对于只包含几个上下文变量和很多上下文变量的情况，他们是一样快的。</p><h3 id="class-contextvars-Context"><a href="#class-contextvars-Context" class="headerlink" title="class contextvars.Context"></a>class <code>contextvars.Context</code></h3><p><code>ContextVar</code> 中所有值的映射。<code>Context()</code> 创建一个不包含任何值的空上下文。如果要获取当前上下文的拷贝，使用 <code>copy_context()</code> 函数。</p><p><code>Context</code> 实现了 <a href="https://docs.python.org/zh-cn/3.10/library/collections.abc.html#collections.abc.Mapping">collections.abc.Mapping</a> 接口。</p><h4 id="run-callable-args-kwargs"><a href="#run-callable-args-kwargs" class="headerlink" title="run(callable, *args, **kwargs)"></a><code>run(callable, *args, **kwargs)</code></h4><p>按照 <code>run</code> 方法中的参数在上下文对象中执行 <code>callable(*args, **kwargs)</code> 代码。返回执行结果，如果发生异常，则将异常 propagate 出来。</p><p><code>callable</code> 中对上下文变量做出的任何修改会保留在上下文对象中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> ContextVar<span class="token punctuation">(</span><span class="token string">'var'</span><span class="token punctuation">)</span>var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 'var' was set to 'spam' before</span>    <span class="token comment"># calling 'copy_context()' and 'ctx.run(main)', so:</span>    <span class="token comment"># var.get() == ctx[var] == 'spam'</span>    var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'ham'</span><span class="token punctuation">)</span>    <span class="token comment"># Now, after setting 'var' to 'ham':</span>    <span class="token comment"># var.get() == ctx[var] == 'ham'</span>ctx <span class="token operator">=</span> copy_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Any changes that the 'main' function makes to 'var'</span><span class="token comment"># will be contained in 'ctx'.</span>ctx<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token comment"># The 'main()' function was run in the 'ctx' context,</span><span class="token comment"># so changes to 'var' are contained in it:</span><span class="token comment"># ctx[var] == 'ham'</span><span class="token comment"># However, outside of 'ctx', 'var' is still set to 'spam':</span><span class="token comment"># var.get() == 'spam'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当在多个系统线程或者递归调用同一个上下文对象的此方法，抛出 <a href="https://docs.python.org/zh-cn/3.10/library/exceptions.html#RuntimeError">RuntimeError</a> 异常。</p><h4 id="copy"><a href="#copy" class="headerlink" title="copy()"></a><code>copy()</code></h4><p>返回此上下文对象的浅拷贝。</p><h4 id="var-in-context"><a href="#var-in-context" class="headerlink" title="var in context"></a><code>var in context</code></h4><p>如果 <em>context</em> 中含有名称为 <code>var</code> 的变量，返回 <code>True</code>， 否则返回 <code>False</code>。</p><h4 id="context-var"><a href="#context-var" class="headerlink" title="context[var]"></a><code>context[var]</code></h4><p>返回名称为 <code>var</code> 的 <code>ContextVar</code> 变量。如果上下文对象中不包含这个变量，则抛出 <a href="https://docs.python.org/zh-cn/3.10/library/exceptions.html#KeyError"><code>KeyError</code></a> 异常。</p><h4 id="get-var-default"><a href="#get-var-default" class="headerlink" title="get(var[, default])"></a><code>get(var[, default])</code></h4><p>如果 <code>var</code> 在上下文对象中具有值则返回 <code>var</code> 的值。在其他情况下返回 <code>default</code>。如果未给出 <code>default</code> 则返回 <code>None</code>。</p><h4 id="iter-context"><a href="#iter-context" class="headerlink" title="iter(context)"></a><code>iter(context)</code></h4><p>返回一个存储在上下文对象中的变量的迭代器。</p><h4 id="len-proxy"><a href="#len-proxy" class="headerlink" title="len(proxy)"></a><code>len(proxy)</code></h4><p>返回上下文对象中所设的变量的数量。</p><h4 id="keys"><a href="#keys" class="headerlink" title="keys()"></a><code>keys()</code></h4><p>返回上下文对象中的所有变量的列表。</p><h4 id="values"><a href="#values" class="headerlink" title="values()"></a><code>values()</code></h4><p>返回上下文对象中所有变量值的列表。</p><h4 id="items"><a href="#items" class="headerlink" title="items()"></a><code>items()</code></h4><p>返回包含上下文对象中所有变量及其值的 2 元组的列表。</p><h2 id="asyncio-支持"><a href="#asyncio-支持" class="headerlink" title="asyncio 支持"></a>asyncio 支持</h2><p>上下文变量在 <code>asyncio</code> 中有原生的支持并且无需任何额外配置即可被使用。例如，以下是一个简单的回显服务器，它使用上下文变量来让远程客户端的地址在处理该客户端的 <code>Task</code> 中可用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> contextvarsclient_addr_var <span class="token operator">=</span> contextvars<span class="token punctuation">.</span>ContextVar<span class="token punctuation">(</span><span class="token string">'client_addr'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">render_goodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># The address of the currently handled client can be accessed</span>    <span class="token comment"># without passing it explicitly to this function.</span>    client_addr <span class="token operator">=</span> client_addr_var<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Good bye, client @ </span><span class="token interpolation"><span class="token punctuation">{</span>client_addr<span class="token punctuation">}</span></span><span class="token string">\n'</span></span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handle_request</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">:</span>    addr <span class="token operator">=</span> writer<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>get_extra_info<span class="token punctuation">(</span><span class="token string">'socket'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getpeername<span class="token punctuation">(</span><span class="token punctuation">)</span>    client_addr_var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    <span class="token comment"># In any code that we call is now possible to get</span>    <span class="token comment"># client's address by calling 'client_addr_var.get()'.</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>render_goodbye<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    srv <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>start_server<span class="token punctuation">(</span>        handle_request<span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8081</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> srv<span class="token punctuation">:</span>        <span class="token keyword">await</span> srv<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># To test it you can use telnet:</span><span class="token comment">#     telnet 127.0.0.1 8081</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> contextvars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>signal --- 设置异步事件处理程序</title>
      <link href="/dao/post/zh-CN/a66b3bffc2fa.html"/>
      <url>/dao/post/zh-CN/a66b3bffc2fa.html</url>
      
        <content type="html"><![CDATA[<p>该模块提供了在 Python 中使用信号处理程序的机制。</p><h2 id="一般规则"><a href="#一般规则" class="headerlink" title="一般规则"></a>一般规则</h2><p><code>signal.signal()</code> 函数允许定义在接收到信号时执行的自定义处理程序。少量的默认处理程序已经设置：<code>SIGPIPE</code> 被忽略（因此管道和套接字上的写入错误可以报告为普通的 Python 异常）以及如果父进程没有更改 <code>SIGINT</code>，则其会被翻译成 <code>KeyboardInterrupt</code> 异常。一旦设置，特定信号的处理程序将保持安装，直到它被显式重置（Python 模拟 BSD 样式接口而不管底层实现），但 <code>SIGCHLD</code> 的处理程序除外，它遵循底层实现。</p><h3 id="执行-Python-信号处理程序"><a href="#执行-Python-信号处理程序" class="headerlink" title="执行 Python 信号处理程序"></a>执行 Python 信号处理程序</h3><p>Python 信号处理程序不会在低级（ C ）信号处理程序中执行。相反，低级信号处理程序设置一个标志，告诉 <a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-virtual-machine">virtual machine</a> 稍后执行相应的 Python 信号处理程序（例如在下一个 bytecode 指令）。这会导致：</p><ul><li>捕获同步错误是没有意义的，例如 <code>SIGFPE</code> 或 <code>SIGSEGV</code>，它们是由 C 代码中的无效操作引起的。Python 将从信号处理程序返回到 C 代码，这可能会再次引发相同的信号，导致 Python 显然的挂起。从Python 3.3 开始，你可以使用 <a href="https://docs.python.org/zh-cn/3.10/library/faulthandler.html#module-faulthandler"><code>faulthandler</code></a> 模块来报告同步错误。</li><li>纯 C 中实现的长时间运行的计算（例如在大量文本上的正则表达式匹配）可以在任意时间内不间断地运行，而不管接收到任何信号。计算完成后将调用 Python 信号处理程序。</li></ul><h3 id="信号与线程"><a href="#信号与线程" class="headerlink" title="信号与线程"></a>信号与线程</h3><p>Python 信号处理程序总是会在主 Python 主解释器的主线程中执行，即使信号是在另一个线程中接收的。这意味着信号不能被用作线程间通信的手段。你可以改用 <a href="https://docs.python.org/zh-cn/3.10/library/threading.html#module-threading">threading</a> 模块中的同步原语。</p><p>此外，只有主解释器的主线程才被允许设置新的信号处理程序。</p><p>更多内容见：<a href="https://learnku.com/docs/pymotw/signal-asynchronous-system-events/3420">11.3. signal — 同步系统事件</a></p>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件调度器</title>
      <link href="/dao/post/zh-CN/3e418adf5ef5.html"/>
      <url>/dao/post/zh-CN/3e418adf5ef5.html</url>
      
        <content type="html"><![CDATA[<p><code>sched</code> 模块定义了一个实现通用事件调度程序的类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">sched</span><span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>timefunc<span class="token operator">=</span>time<span class="token punctuation">.</span>monotonic<span class="token punctuation">,</span> delayfunc<span class="token operator">=</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>scheduler</code> 类定义了一个调度事件的通用接口。它需要两个函数来实际处理“外部世界”：</p><ul><li><code>timefunc</code> 应当不带参数地调用，并返回一个数字（“time”，可以为任意单位）。</li><li><code>delayfunc</code> 函数应当带一个参数调用，与 <code>timefunc</code> 的输出相兼容，并且应当延迟其所指定的时间单位。每个事件运行后还将调用 <code>delayfunc</code> 并传入参数 <code>0</code> 以允许其他线程有机会在多线程应用中运行。</li></ul><p><code>scheduler</code> 类可以安全的在多线程环境中使用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sched<span class="token punctuation">,</span> times <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_time</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"From print_time"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_some_times</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> print_time<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> print_time<span class="token punctuation">,</span> argument<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'positional'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> print_time<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token string">'keyword'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>print_some_times<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><output class="xin-term">1618896750.4832535From print_time 1618896755.4988 keywordFrom print_time 1618896755.4988 positionalFrom print_time 1618896760.4886842 default1618896760.4886842</output><h2 id="调度器对象"><a href="#调度器对象" class="headerlink" title="调度器对象"></a>调度器对象</h2><p><code>scheduler</code> 实例拥有以下方法和属性：</p><ol><li><code>scheduler.enterabs(time, priority, action, argument=(), kwargs={})</code>：安排一个新事件。<code>time</code> 参数应该有一个数字类型兼容的返回值，与传递给构造函数的 <code>timefunc</code> 函数的返回值兼容。计划在相同 <code>time</code> 的事件将按其 <code>priority</code> 的顺序执行。数字越小表示优先级越高。执行事件意为执行 <code>action(*argument, **kwargs)</code>。<code>argument</code> 是包含有 <code>action</code> 的位置参数的序列。<code>kwargs</code> 是包含 <code>action</code> 的关键字参数的字典。返回值是一个事件，可用于以后取消事件（ 参见 <code>cancel()</code> ）。</li><li><code>scheduler.enter(delay, priority, action, argument=(), kwargs={})</code>：安排延后 <code>delay</code> 时间单位的事件。除了相对时间，其他参数、效果和返回值与 <code>enterabs()</code> 的相同。</li><li><code>scheduler.cancel(event)</code>：从队列中删除事件。如果 <code>event</code> 不是当前队列中的事件，则此方法将引发 <code>ValueError</code>。</li><li><code>scheduler.empty()</code>：如果事件队列为空则返回 <code>True</code>。</li><li><code>scheduler.run(blocking=True)</code>：运行所有预定事件。此方法将等待（使用传递给构造函数的 <code>delayfunc()</code> 函数）进行下一个事件，然后执行它，依此类推，直到没有更多的计划事件。如果 <code>blocking</code> 为 false，则执行由于最快到期（如果有）的预定事件，然后在调度程序中返回下一个预定调用的截止时间（如果有）。<code>action</code> 或 <code>delayfunc</code> 都可以引发异常。在任何一种情况下，调度程序都将保持一致状态并传播异常。如果 <code>action</code> 引发异常，则在将来调用 <code>run()</code> 时不会尝试该事件。如果一系列事件的运行时间比下一个事件之前的可用时间长，那么调度程序将完全落后。不会发生任何事件；调用代码负责取消不再相关的事件。</li><li><code>scheduler.queue</code>：只读属性按照将要运行的顺序返回即将发生的事件列表。每个事件都显示为 named tuple ，包含以下字段：<code>time</code>、<code>priority</code>、<code>action</code>、<code>argument</code>、<code>kwargs</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sched </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>subprocess --- 子进程管理</title>
      <link href="/dao/post/zh-CN/b10be92a5827.html"/>
      <url>/dao/post/zh-CN/b10be92a5827.html</url>
      
        <content type="html"><![CDATA[<p><code>subprocess</code> 具有可访问的 I/O 流的子进程。该模块允许您生成进程，连接到其 <code>input/output/error</code> 管道并获取其返回码。主要 API 有：</p><ol><li><code>run(...)</code>：运行命令，等待命令完成，然后返回 <code>CompletedProcess</code> 实例。</li><li><code>Popen(...)</code>：用于在新进程中灵活执行命令的类。</li></ol><p>常量：</p><ol><li><code>DEVNULL</code>：指示应使用 <code>os.devnull</code> 的特殊值。</li><li><code>PIPE</code>：指示应创建管道的特殊值。</li><li><code>STDOUT</code>：指示 <code>stderr</code> 应该转到 <code>stdout</code> 的特殊值。</li></ol><p>过时的 API（函数 <code>run()</code> ，<code>call()</code>，<code>check_call()</code> 和 <code>check_output()</code> 是 <code>Popen</code> 类的包装。直接使用 <code>Popen</code> 能够对如何运行命令以及如何处理输入输出流提供更多的控制。例如，通过对 <code>stdin</code>，<code>stdout</code> 以及 <code>stderr</code> 传递不同的参数，可以达到模仿 <code>os.popen()</code> 的效果）：</p><ul><li><code>call(...)</code>：运行命令，等待它完成，然后获取其返回码。</li><li><code>check_call(...)</code>：与 <code>call()</code> 相同，但如果返回码不为 0，则会引发 <code>CalledProcessError()</code></li><li><code>check_output(...)</code>：与 <code>check_call()</code> 相同，但返回 <code>stdout</code> 的内容，而不是返回码。</li><li><code>getoutput(...)</code>：在 shell 中运行命令，等待它完成，然后返回输出。</li><li><code>getstatusoutput(...)</code>：在 shell 中运行命令，等待它完成，然后返回 <code>(exitcode, output)</code> 元组。</li></ul><h2 id="Popen"><a href="#Popen" class="headerlink" title="Popen"></a>Popen</h2><p>由于 <code>subprocess</code> 中的各种 API 均与 <code>Popen</code> 相关，所以，我先了解该对象。</p><p>class <code>Popen</code> 在新进程中执行子程序。有如下参数：</p><ol><li><code>args</code>：字符串或程序参数序列。<code>args</code> 被所有调用需要，应当为一个字符串，或者一个程序参数序列。提供一个参数序列通常更好，它可以更小心地使用参数中的转义字符以及引用（例如允许文件名中的空格）。如果传递一个简单的字符串，则 <code>shell</code> 参数必须为 <code>True</code> （见下文）或者该字符串中将被运行的程序名必须用简单的命名而不指定任何参数。</li><li><code>bufsize</code>：在创建 <code>stdin/stdout/stderr</code> 管道文件对象时作为 <code>open()</code> 函数的 <code>buffering</code> 参数提供。<ul><li><code>0</code> 表示不使用缓冲区 （读取与写入是一个系统调用并且可以返回短内容）</li><li><code>1</code> 表示行缓冲（只有 <code>universal_newlines=True</code> 时才有用，例如，在文本模式中）</li><li>任何其他正值表示使用一个约为对应大小的缓冲区</li><li>负的 <code>bufsize</code> （默认）表示使用系统默认的 <code>io.DEFAULT_BUFFER_SIZE</code>。</li></ul></li><li><code>executable</code>：要执行的替换程序。这很少需要。当 <code>shell=True</code>， <code>executable</code> 替换 <code>args</code> 指定运行的程序。但是，原始的 <code>args</code> 仍然被传递给程序。大多数程序将被 <code>args</code> 指定的程序作为命令名对待，这可以与实际运行的程序不同。在 POSIX， <code>args</code> 名作为实际调用程序中可执行文件的显示名称，例如 <code>ps</code>。如果 <code>shell=True</code>，在 POSIX， <code>executable</code> 参数指定用于替换默认 shell <code>/bin/sh</code> 的 shell。在 POSIX 上 <code>executable</code> 形参可以接受一个 path-like object。在Windows 上 <code>executable</code> 形参可以接受一个字节串和 path-like object。</li><li><code>stdin</code>，<code>stdout</code> 和 <code>stderr</code>：它们分别指定执行程序的标准输入，标准输出和标准错误文件句柄。合法的值有 <code>PIPE</code>， <code>DEVNULL</code>， 一个存在的文件描述符（一个正整数），一个存在的 文件对象 以及 <code>None</code>。 <code>PIPE</code> 表示应创建一个新的对子进程的管道。<code>DEVNULL</code> 表示使用特殊的 <code>os.devnull</code> 文件。使用默认的 <code>None</code>，则不进行成定向；子进程的文件流将继承自父进程。另外， <code>stderr</code> 可设为 <code>STDOUT</code>，表示应用程序的标准错误数据应和标准输出一同捕获。</li><li><code>preexec_fn</code>：（仅适用于 POSIX）在执行子进程之前要在子进程中调用的对象。（仅 POSIX）如果 <code>preexec_fn</code> 被设为一个可调用对象，此对象将在子进程刚创建时被调用。</li><li><code>close_fds</code>：控制文件描述符（file descriptors）的关闭或继承。如果 <code>close_fds</code> 为真，所有文件描述符除了 0, 1, 2 之外都会在子进程执行前关闭。而当 <code>close_fds</code> 为 false 时，文件描述符遵守它们继承的标志，如 <a href="https://docs.python.org/zh-cn/3/library/os.html#fd-inheritance">文件描述符的继承</a> 所述。</li><li><code>shell</code>：如果为 true，则将通过 shell 执行该命令。</li><li><code>cwd</code>：在执行子进程之前设置当前目录。如果 <code>cwd</code> 不为 <code>None</code>，此函数在执行子进程前会将当前工作目录改为 <code>cwd</code>。<code>cwd</code> 可以是一个字符串、字节串或 路径类对象。特别地，当可执行文件的路径为相对路径时，此函数会相对于 <em>cwd</em> 来查找 <code>executable</code> (或 <code>args</code> 中的第一项)。</li><li><code>env</code>：定义新进程的环境变量。如果 <code>env</code> 不为 <code>None</code>，则必须为一个为新进程定义了环境变量的字典；这些用于替换继承的当前进程环境的默认行为。如果指定， <code>env</code> 必须提供所有被子进程需求的变量。在 Windows，为了运行一个 <a href="https://en.wikipedia.org/wiki/Side-by-Side_Assembly">side-by-side assembly</a>，指定的 <code>env</code> <strong>必须</strong> 包含一个有效的 <code>SystemRoot</code>。</li><li><code>text</code>：如果为 true，则使用给定的 <code>encoding</code>。（如果设置）对 stdin，stdout 和 stderr 进行解码，否则使用系统默认值。</li><li><code>universal_newlines</code>：<code>text</code> 的别名，为向后兼容而提供。</li><li><code>startupinfo</code> 和 <code>creationflags</code>（仅适用于 Windows）</li><li><code>restore_signals</code> （仅适用于 POSIX）</li><li><code>start_new_session</code>（仅适用于 POSIX）</li><li><code>group</code>（仅适用于 POSIX）</li><li><code>extra_groups</code>（仅适用于 POSIX）</li><li><code>user</code>（仅适用于 POSIX）</li><li><code>umask</code>（仅适用于 POSIX）</li><li><code>pass_fds</code>（仅适用于 POSIX）</li><li><code>encoding</code> 和 <code>errors</code>：用于文件对象 <code>stdin</code>，<code>stdout</code> 和 <code>stderr</code> 的文本模式编码和错误处理。</li></ol><p>该实例有属性：<code>stdin</code>, <code>stdout</code>, <code>stderr</code>, <code>pid</code>, <code>returncode</code>。</p><p>实例创建：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Popen</span><span class="token punctuation">:</span>    _child_created <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># Set here since __del__ checks it</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">,</span> bufsize<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> executable<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 stdin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 preexec_fn<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> close_fds<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cwd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> env<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> universal_newlines<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 startupinfo<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> creationflags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                 restore_signals<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> start_new_session<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 pass_fds<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> group<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> extra_groups<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> umask<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pipesize<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>subprocess</code> 模块的底层的进程创建与管理由 <code>Popen</code> 类处理。它提供了很大的灵活性，因此开发者能够处理未被便捷函数覆盖的不常见用例。</p><p>在新进程中执行子程序。在 POSIX 上，该类使用类似于 <code>os.execvpe()</code> 的行为来执行子程序。在 Windows 上，该类使用 Windows <code>CreateProcess()</code> 函数。<code>Popen</code> 的参数如下：</p><p><code>args</code> 应当是一个程序参数的序列或者是一个单独的字符串或 <a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-path-like-object">path-like object</a>。默认情况下，如果 <code>args</code> 是序列则要运行的程序为 <code>args</code> 中的第一项。如果 <code>args</code> 是字符串，则其解读依赖于具体平台，如下所述。 请查看 <code>shell</code> 和 <code>executable</code> 参数了解其与默认行为的其他差异。除非另有说明，否则推荐以序列形式传入 <code>args</code>。</p><div class="w3-pale-red">警告：为了获得最大的可靠性，请为可执行文件使用完全限定的路径。要在 PATH 上搜索不合格的名称，请使用 shutil.which()。在所有平台上，建议再次传递 sys.executable 来启动当前的 Python 解释器，并使用 -m 命令行格式来启动已安装的模块。</div><p>向外部函数传入序列形式参数的一个例子如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/usr/bin/git"</span><span class="token punctuation">,</span> <span class="token string">"commit"</span><span class="token punctuation">,</span> <span class="token string">"-m"</span><span class="token punctuation">,</span> <span class="token string">"Fixes a bug."</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 POSIX，如果 <code>args</code> 是一个字符串，此字符串被作为将被执行的程序的命名或路径解释。但是，只有在不传递任何参数给程序的情况下才能这么做。</p><div class="w3-card-2 w3-pale-blue w3-padding"><i>注解</i>：将 shell 命令拆分为参数序列的方式可能并不很直观，特别是在复杂的情况下。<code>shlex.split()</code> 可以演示如何确定 <code>args</code> 适当的拆分形式：<pre class="line-numbers language-python" data-language="python"><code class="language-python">Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shlex<span class="token punctuation">,</span> subprocess<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> command_line <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>vikings <span class="token operator">-</span><span class="token builtin">input</span> eggs<span class="token punctuation">.</span>txt <span class="token operator">-</span>output <span class="token string">"spam spam.txt"</span> <span class="token operator">-</span>cmd <span class="token string">"echo '$MONEY'"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> args <span class="token operator">=</span> shlex<span class="token punctuation">.</span>split<span class="token punctuation">(</span>command_line<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'/bin/vikings'</span><span class="token punctuation">,</span> <span class="token string">'-input'</span><span class="token punctuation">,</span> <span class="token string">'eggs.txt'</span><span class="token punctuation">,</span> <span class="token string">'-output'</span><span class="token punctuation">,</span> <span class="token string">'spam spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'-cmd'</span><span class="token punctuation">,</span> <span class="token string">"echo '$MONEY'"</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token comment"># Success!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别注意，由 shell 中的空格分隔的选项（例如 -input）和参数（例如 eggs.txt ）位于分开的列表元素中，而在需要时使用引号或反斜杠转义的参数在 shell（例如包含空格的文件名或上面显示的 echo 命令）是单独的列表元素。</p></div><p>在 Windows，如果 <code>args</code> 是一个序列，他将通过一个在 <a href="https://docs.python.org/zh-cn/3.10/library/subprocess.html#converting-argument-sequence">Windows 上将参数列表转换为一个字符串</a> 描述的方式被转换为一个字符串。这是因为底层的 CreateProcess() 只处理字符串。</p><p><code>Popen</code> 对象支持通过 <code>with</code> 语句作为上下文管理器，在退出时关闭文件描述符并等待进程：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ifconfig"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">)</span> <span class="token keyword">as</span> proc<span class="token punctuation">:</span>    log<span class="token punctuation">.</span>write<span class="token punctuation">(</span>proc<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Popen-对象"><a href="#Popen-对象" class="headerlink" title="Popen 对象"></a>Popen 对象</h3><p>Popen 类的实例拥有以下方法：</p><ol><li><code>Popen.poll()</code>：检查子进程是否已被终止。设置并返回 <code>returncode</code> 属性。否则返回 <code>None</code>。</li><li><code>Popen.wait(timeout=None)</code>：等待子进程被终止。设置并返回 <code>returncode</code> 属性。如果进程在 <code>timeout</code> 秒后未中断，抛出一个 <code>TimeoutExpired</code> 异常，可以安全地捕获此异常并重新等待。<blockquote><p>注解：当 <code>stdout=PIPE</code> 或者 <code>stderr=PIPE</code> 并且子进程产生了足以阻塞 OS 管道缓冲区接收更多数据的输出到管道时，将会发生死锁。当使用管道时用 <code>Popen.communicate()</code> 来规避它。<br>注解：此函数使用了一个 busy loop （非阻塞调用以及短睡眠）实现。使用 <code>asyncio</code> 模块进行异步等待： 参阅 <a href="https://docs.python.org/zh-cn/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec">asyncio.create_subprocess_exec</a>。</p></blockquote></li><li><code>Popen.communicate(input=None, timeout=None)</code> 与进程交互：将数据发送到 <code>stdin</code>。从 <code>stdout</code> 和 <code>stderr</code> 读取数据，直到抵达文件结尾。等待进程终止并设置 <code>returncode</code> 属性。可选的 <code>input</code> 参数应为要发送到下级进程的数据，或者如果没有要发送到下级进程的数据则为 <code>None</code>。如果流是以文本模式打开的，则 <code>input</code> 必须为字符串。在其他情况下，它必须为字节串。</li></ol><p><code>communicate()</code> 返回一个 <code>(stdout_data, stderr_data)</code> 元组。如果文件以文本模式打开则为字符串；否则字节。注意如果你想要向进程的 <code>stdin</code> 传输数据，你需要通过 <code>stdin=PIPE</code> 创建此 <code>Popen</code> 对象。类似的，要从结果元组获取任何非 <code>None</code> 值，你同样需要设置 <code>stdout=PIPE</code> 或者 <code>stderr=PIPE</code>。</p><p>如果进程在 <code>timeout</code> 秒后未终止，一个 <code>TimeoutExpired</code> 异常将被抛出。捕获此异常并重新等待将不会丢失任何输出。如果超时到期，子进程不会被杀死，所以为了正确清理一个行为良好的应用程序应该杀死子进程并完成通讯。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    outs<span class="token punctuation">,</span> errs <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">except</span> TimeoutExpired<span class="token punctuation">:</span>    proc<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span>    outs<span class="token punctuation">,</span> errs <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注解：内存里数据读取是缓冲的，所以如果数据尺寸过大或无限，不要使用此方法。</p></blockquote><ol start="4"><li><code>Popen.send_signal(signal)</code>：将信号 <code>signal</code> 发送给子进程。如果进程已完成则不做任何操作。</li></ol><blockquote><p>注解：在 Windows， <code>SIGTERM</code> 是一个 <a href="https://docs.python.org/zh-cn/3/library/subprocess.html#subprocess.Popen.terminate"><code>terminate()</code></a> 的别名。<code>CTRL_C_EVENT</code> 和 <code>CTRL_BREAK_EVENT</code> 可以被发送给以包含 <code>CREATE_NEW_PROCESS</code> 的 <code>creationflags</code> 形参启动的进程。</p></blockquote><ol start="5"><li><code>Popen.terminate()</code>：停止子进程。在 POSIX 操作系统上，此方法会发送 <code>SIGTERM</code> 给子进程。在 Windows 上则会调用 Win32 API 函数 <code>TerminateProcess()</code> 来停止子进程。</li><li><code>Popen.kill()</code>：杀死子进程。在 POSIX 操作系统上，此函数会发送 <code>SIGKILL</code> 给子进程。在 Windows 上 <code>kill()</code> 则是 <code>terminate()</code> 的别名。</li></ol><p>以下属性也是可用的：</p><ul><li>Popen.args：传递给 <code>Popen</code> – 一个程序参数的序列或者一个简单字符串</li><li><code>Popen.stdin</code>：如果 <code>stdin</code> 参数为 PIPE，此属性是一个类似 <code>open()</code> 返回的可写的流对象。如果 <code>encoding</code> 或 <code>errors</code> 参数被指定或者 <code>universal_newlines</code> 参数为 <code>True</code>，则此流是一个文本流，否则是字节流。如果 <code>stdin</code> 参数非 <code>PIPE</code>， 此属性为 <code>None</code>。</li><li><code>Popen.stdout</code>：如果 <code>stdout</code> 参数是 <code>PIPE</code>，此属性是一个类似 o<code>pen()</code> 返回的可读流。从流中读取子进程提供的输出。如果 <code>encoding</code> 或 <code>errors</code> 参数被指定或者 <code>universal_newlines</code> 参数为 <code>True</code>，此流为文本流，否则为字节流。如果 <code>stdout</code> 参数非 ·，此属性为 <code>None</code>。</li><li><code>Popen.stderr</code>：如果 <code>stderr</code> 参数是 <code>PIPE</code>，此属性是一个类似 <code>open()</code> 返回的可读流。从流中读取子进程提供的输出。如果 <code>encoding</code> 或 <code>errors</code> 参数被指定或者 <code>universal_newlines</code> 参数为 <code>True</code>，此流为文本流，否则为字节流。如果 <code>stderr</code> 参数非 <code>PIPE</code>，此属性为 <code>None</code>。</li></ul><div class="w3-pale-red">警告：使用 <code>communicate()</code> 而非 <code>.stdin.write</code>， <code>.stdout.read</code> 或者 <code>.stderr.read</code> 来避免由于任意其他 OS 管道缓冲区被子进程填满阻塞而导致的死锁。</div><ol start="7"><li><code>Popen.pid</code>：子进程的进程号。注意如果你设置了 <code>shell</code> 参数为 <code>True</code>，则这是生成的子 <code>shell</code> 的进程号。</li><li><code>Popen.returncode</code>：此进程的退出码，由 <code>poll()</code> 和 <code>wait()</code> 设置（以及直接由 <code>communicate()</code> 设置）。一个 <code>None</code> 值 表示此进程仍未结束。一个负值 <code>-N</code> 表示子进程被信号 <code>N</code> 中断 (仅 POSIX).</li></ol><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p><code>subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs)</code> 运行被 <code>arg</code> 描述的指令。等待指令完成，然后返回一个 <a href="https://docs.python.org/zh-cn/3.10/library/subprocess.html#subprocess.CompletedProcess">CompletedProcess</a> 实例。以上显示的参数仅仅是最简单的一些，下面 <a href="https://docs.python.org/zh-cn/3.10/library/subprocess.html#frequently-used-arguments">常用参数</a> 描述（因此在缩写签名中使用仅关键字标示）。完整的函数头和 Popen 的构造函数一样，此函数接受的大多数参数都被传递给该接口。（<code>timeout</code>, <code>input</code>, <code>check</code> 和 <code>capture_output</code> 除外）。</p><p>如果 <code>capture_output</code> 设为 <code>true</code>，<code>stdout</code> 和 <code>stderr</code> 将会被捕获。在使用时，内置的 <code>Popen</code> 对象将自动用 <code>stdout=PIPE</code> 和 <code>stderr=PIPE</code> 创建。<code>stdout</code> 和 <code>stderr</code> 参数不应当与 <code>capture_output</code> 同时提供。如果你希望捕获并将两个流合并在一起，使用 <code>stdout=PIPE</code> 和 <code>stderr=STDOUT</code> 来代替 <code>capture_output</code>。</p><p><code>timeout</code> 参数将被传递给 <a href="https://docs.python.org/zh-cn/3.10/library/subprocess.html#subprocess.Popen.communicate">Popen.communicate()</a>。如果发生超时，子进程将被杀死并等待。 <code>TimeoutExpired</code> 异常将在子进程中断后被抛出。</p><p><code>input</code> 参数将被传递给 <code>Popen.communicate()</code> 以及子进程的标准输入。如果使用此参数，它必须是一个字节序列。如果指定了 <code>encoding</code> 或 <code>errors</code> 或者将 <code>text</code> 设置为 <code>True</code>，那么也可以是一个字符串。当使用此参数时，在创建内部 <code>Popen</code> 对象时将自动带上 <code>stdin=PIPE</code>，并且不能再手动指定 <code>stdin</code> 参数。</p><p>如果 <code>check</code> 设为 <code>True</code>, 并且进程以非零状态码退出, 一个 <code>CalledProcessError</code> 异常将被抛出。这个异常的属性将设置为参数, 退出码, 以及标准输出和标准错误, 如果被捕获到。</p><p>如果 <code>encoding</code> 或者 <code>error</code> 被指定, 或者 <code>text</code> 被设为 <code>True</code>, 标准输入, 标准输出和标准错误的文件对象将通过指定的 <code>encoding</code> 和 <code>errors</code> 以文本模式打开, 否则以默认的 <code>io.TextIOWrapper</code> 打开。<code>universal_newline</code> 参数等同于 <code>text</code> 并且提供了向后兼容性。默认情况下, 文件对象是以二进制模式打开的。</p><p>如果 <code>env</code> 不是 <code>None</code>, 它必须是一个字典, 为新的进程设置环境变量; 它用于替换继承的当前进程的环境的默认行为. 它将直接被传递给 <code>Popen</code>。</p><p>例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token string">"-l"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># doesn't capture output</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><output class="xin-term">CompletedProcess(args=['ls', '-l'], returncode=0)</output><pre class="line-numbers language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"exit 1"</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> check<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><output class="xin-term">Traceback (most recent call last):  ...subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1</output><pre class="line-numbers language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token string">"-l"</span><span class="token punctuation">,</span> <span class="token string">"/dev/null"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> capture_output<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><output class="xin-term">CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n', stderr=b'')</output><p>如果仅仅是为了运行一个外部命令而不用交互，类似 <code>os.system()</code>，可以使用 <code>run()</code> 方法。比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_os_system.py</span><span class="token keyword">import</span> subprocesscompleted <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token string">'-l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'returncode:'</span><span class="token punctuation">,</span> completed<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行参数被作为一个字符串列表传入，这样能够避免转义引号以及其他会被 <code>shell</code> 解析的特殊字符。<code>run()</code> 方法返回一个 <code>CompletedProcess</code> 实例，包含进程退出码以及输出等信息。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python subprocess_os_system.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><output class="xin-term">__pycache__a.pyceleba.pyloader.pytest.pyvision.pyreturncode: 0</output><p>设置 <code>shell</code> 参数为 <code>True</code> 会导致 <code>subprocess</code> 创建一个新的中间 <code>shell</code> 进程运行命令。默认的行为是直接运行命令。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_shell_variables.py</span><span class="token keyword">import</span> subprocesscompleted <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'echo $HOME'</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'returncode:'</span><span class="token punctuation">,</span> completed<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用中间 <code>shell</code> 意味着在运行该命令之前处理命令字符串的变量，<code>glob</code> 模式以及其他特殊的 <code>shell</code> 功能。</p><blockquote><p>使用 <code>run()</code> 而没有传递 <code>check=True</code> 等价于调用 <code>call()</code>，它仅仅返回进程的退出码。给 <code>run()</code> 方法传递 <code>check=True</code> 等价于调用 <code>check_all()</code>。</p></blockquote><p>由 <code>run()</code> 启动的进程的标准输入输出渠道绑定在了父进程上。那就意味着调用程序不能捕获命令的输出。给 <code>stdout</code> 和 <code>stderr</code> 参数传递 <code>PIPE</code> 可以捕获输出用于后续处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_run_output.py</span><span class="token keyword">import</span> subprocesscompleted <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token string">'-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'returncode:'</span><span class="token punctuation">,</span> completed<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Have {} bytes in stdout:\n{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    <span class="token builtin">len</span><span class="token punctuation">(</span>completed<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">,</span>    completed<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ls -1</code> 命令成功运行了，所以它打印到标准输出的文本被捕获并返回了。</p><output class="xin-term">returncode: 0Have 55 bytes in stdout:__pycache__a.pyceleba.pyloader.pytest.pyvision.py</output><blockquote><p>传入 <code>check=True</code> 以及设置 <code>stdout</code> 为 <code>PIPE</code> 等价于使用 <code>check_output()</code>。</p></blockquote><p>下个例子在子 <code>shell</code> 中运行了一些命令。在命令出错退出之前消息被发送到了标准输出和错误输出。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_run_output_error.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">try</span><span class="token punctuation">:</span>    completed <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>        <span class="token string">'echo to stdout; echo to stderr 1&gt;&amp;2; exit 1'</span><span class="token punctuation">,</span>        check<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> err<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ERROR:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'returncode:'</span><span class="token punctuation">,</span> completed<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Have {} bytes in stdout: {!r}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>completed<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">,</span>        completed<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准错误输出被打印到了控制台，但是标准错误输出被隐藏了。</p><output class="xin-term">to stdout; echo to stderr ; exit 1returncode: 0Have 0 bytes in stdout: ''</output><p>为了阻止 <code>run()</code> 运行命令产生的错误消息打印到控制台，设置 <code>stderr</code> 参数为常量 <code>PIPE</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_run_output_error_trap.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">try</span><span class="token punctuation">:</span>    completed <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>        <span class="token string">'echo to stdout; echo to stderr 1&gt;&amp;2; exit 1'</span><span class="token punctuation">,</span>        shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> err<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ERROR:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'returncode:'</span><span class="token punctuation">,</span> completed<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Have {} bytes in stdout: {!r}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>completed<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">,</span>        completed<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Have {} bytes in stderr: {!r}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>completed<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span><span class="token punctuation">,</span>        completed<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子没有设置 <code>check=True</code>，所以命令的输出被捕获并且打印。</p><output class="xin-term">returncode: 0Have 0 bytes in stdout: ''Have 36 bytes in stderr: 'to stdout; echo to stderr ; exit 1\r\n'</output><p>为了捕获当使用 <code>check_output()</code> 产生的错误消息时，设置 <code>stderr</code> 为 <code>STDOUT</code>，并且这些消息将与该命令的其余输出合并。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_check_output_error_trap_output.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">try</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>        <span class="token string">'echo to stdout; echo to stderr 1&gt;&amp;2'</span><span class="token punctuation">,</span>        shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> err<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ERROR:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Have {} bytes in output: {!r}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>        output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出顺序可能会变化，取决于对标准输出流的缓冲方式以及打印的数据量。</p><output class="xin-term">Have 28 bytes in output: 'to stdout; echo to stderr \r\n'</output><p><strong>抑制输出</strong>：某些情况下，输出不应该被展示和捕获，使用 <code>DEVNULL</code> 抑制输出流。这个例子抑制了标准输出流和错误输出流。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_run_output_error_suppress.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">try</span><span class="token punctuation">:</span>    completed <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>        <span class="token string">'echo to stdout; echo to stderr 1&gt;&amp;2; exit 1'</span><span class="token punctuation">,</span>        shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>DEVNULL<span class="token punctuation">,</span>        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>DEVNULL<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> err<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ERROR:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'returncode:'</span><span class="token punctuation">,</span> completed<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stdout is {!r}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>completed<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stderr is {!r}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>completed<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>DEVNULL</code> 的名字来自于 Unix 特殊的设备文件，<code>/dev/null</code>，当读时直接响应文件结束，写时接收但忽略任何数量的输入。</p><output class="xin-term">stdout is Nonestderr is None</output><h3 id="与进程单向通信"><a href="#与进程单向通信" class="headerlink" title="与进程单向通信"></a>与进程单向通信</h3><p>为了去运行一个进程以及读取所有它的输出，设置 <code>stdout</code> 的值为 <code>PIPE</code> 并且调用 <code>communicate()</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_popen_read.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'read:'</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'echo'</span><span class="token punctuation">,</span> <span class="token string">'"to stdout"'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>stdout_value <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stdout:'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>stdout_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类似于 <code>popen()</code> 的工作方式，除了读取由 <code>Popen</code> 实例内部管理。</p><output class="xin-term">read:stdout: '"to stdout"\n'</output><p>为了设置一个管道允许调用者向其写入数据，设置 <code>stdin</code> 为 <code>PIPE</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_popen_write.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'write:'</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token string">'stdin: to stdin\n'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><output class="xin-term">write:stdin: to stdin</output><h3 id="与进程双向通信"><a href="#与进程双向通信" class="headerlink" title="与进程双向通信"></a>与进程双向通信</h3><p>为了设置 Popen 实例同时进行读写，请结合之前使用过的技术。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_popen2.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'popen2:'</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>msg <span class="token operator">=</span> <span class="token string">'through stdin to stdout'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>stdout_value <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pass through:'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>stdout_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样设置使用就有点像 <code>popen2()</code> 了。</p><output class="xin-term">popen2:pass through: 'through stdin to stdout'</output><h3 id="捕获错误输出"><a href="#捕获错误输出" class="headerlink" title="捕获错误输出"></a>捕获错误输出</h3><p>同时查看 <code>stdout</code> 和 <code>stderr</code> 输出流也是可能的，就像 <code>popen3()</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_popen3.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'popen3:'</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token string">'cat -; echo "to stderr" 1&gt;&amp;2'</span><span class="token punctuation">,</span>    shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>msg <span class="token operator">=</span> <span class="token string">'through stdin to stdout'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>stdout_value<span class="token punctuation">,</span> stderr_value <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pass through:'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>stdout_value<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stderr      :'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>stderr_value<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从 <code>stderr</code> 中读取错误输出类似于 <code>stdout</code>。传入 <code>PIPE</code> 告诉 <code>Popen</code> 附加到通道，并且使用 <code>communicate()</code> 在返回之前读取所有数据。</p><output class="xin-term">popen3:pass through: 'through stdin to stdout'stderr      : 'to stderr\n'</output><h3 id="合并常规和错误输出"><a href="#合并常规和错误输出" class="headerlink" title="合并常规和错误输出"></a>合并常规和错误输出</h3><p>为了将进程的错误输出导向标准输出渠道，设置 <code>stderr</code> 为 <code>STDOUT</code> 而不是 <code>PIPE</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_popen4.py</span><span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'popen4:'</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token string">'cat -; echo "to stderr" 1&gt;&amp;2'</span><span class="token punctuation">,</span>    shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span><span class="token punctuation">)</span>msg <span class="token operator">=</span> <span class="token string">'through stdin to stdout\n'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>stdout_value<span class="token punctuation">,</span> stderr_value <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'combined output:'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>stdout_value<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stderr value   :'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>stderr_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种合并输出的方式类似于 <code>popen4()</code> 的工作方式。</p><output class="xin-term">popen4:combined output: 'through stdin to stdout\nto stderr\n'stderr value   : None</output><p><code>subprocess</code> 模块允许你生成新的进程，连接它们的输入、输出、错误管道，并且获取它们的返回码。推荐的调用子进程的方式是在任何它支持的用例中使用 <code>run()</code> 函数。对于更进阶的用例，也可以使用底层的 <code>Popen</code> 接口。</p><h2 id="连接管道的段"><a href="#连接管道的段" class="headerlink" title="连接管道的段"></a>连接管道的段</h2><p>多个命令可以被连接到一个 管道 中，类似于 Unix shell 的工作方式，实现这种操作，可以通过创建分隔的 <code>Popen</code> 实例并将他们的输入输出链在一起。一个 <code>Popen</code> 实例的 <code>stdout</code> 属性被用作下一个的 <code>stdin</code> 参数，而不是之前的常量 <code>PIPE</code>。要获取整个执行的输出，可以从最后一个 <code>Popen</code> 实例的 <code>stdout</code> 流读取。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_pipes.py</span><span class="token keyword">import</span> subprocesscat <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'index.rst'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>grep <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'grep'</span><span class="token punctuation">,</span> <span class="token string">'.. literalinclude::'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    stdin<span class="token operator">=</span>cat<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>cut <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'cut'</span><span class="token punctuation">,</span> <span class="token string">'-f'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'-d:'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    stdin<span class="token operator">=</span>grep<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>end_of_pipe <span class="token operator">=</span> cut<span class="token punctuation">.</span>stdout<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Included files:'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> end_of_pipe<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子同下面的命令行操作：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> index.rst <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">".. literalinclude"</span> <span class="token operator">|</span> <span class="token function">cut</span> -f <span class="token number">3</span> -d:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个部分首先管道读取 <code>reStructuredText</code> 源文件，然后找到所有包含其他文件的行，最后打印被包含的文件名称。</p><h2 id="同另一个命令交互"><a href="#同另一个命令交互" class="headerlink" title="同另一个命令交互"></a>同另一个命令交互</h2><p>所有前面的例子都假定了一个有限的交互，<code>communicate()</code> 方法读取所有输出并等待子进程在返回之前退出。在程序运行时也可以逐步写入和读取 <code>Popen</code> 实例使用的单个管道句柄。从标准输入中读取并希望如标准输出的简单回声程序说明了这种技术。</p><p>脚本 <code>repeater.py</code> 被用作下一个例子的子进程。它从 <code>stdin</code> 读取并且写入到 <code>stdout</code> ，一次一行，直到再没有输入。当开始和停止的时候，它也往 <code>stderr</code> 写入了一条消息，展示子进程的声明周期。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># repeater.py</span><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'repeater.py: starting\n'</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    next_line <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> next_line<span class="token punctuation">:</span>        <span class="token keyword">break</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>next_line<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'repeater.py: exiting\n'</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一个例子中以不同的方式使用 <code>Popen</code> 实例的 <code>stdin</code> 和 <code>stdout</code> 文件句柄。在第一个例子中，五个数字被依次写入到进程的 <code>stdin</code>，每次写入后，紧接着会读出输入并打印出来了。第二个例子中相同的五个数字被写入，但是输出通过 <code>communicate()</code> 依次行读取了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># interaction.py</span><span class="token keyword">import</span> io<span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'One line at a time:'</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token string">'python3 repeater.py'</span><span class="token punctuation">,</span>    shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>stdin <span class="token operator">=</span> io<span class="token punctuation">.</span>TextIOWrapper<span class="token punctuation">(</span>    proc<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>    encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span>    line_buffering<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># send data on newline</span><span class="token punctuation">)</span>stdout <span class="token operator">=</span> io<span class="token punctuation">.</span>TextIOWrapper<span class="token punctuation">(</span>    proc<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>    encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token string">'{}\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    stdin<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    output <span class="token operator">=</span> stdout<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>remainder <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'All output at once:'</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token string">'python3 repeater.py'</span><span class="token punctuation">,</span>    shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span><span class="token punctuation">)</span>stdin <span class="token operator">=</span> io<span class="token punctuation">.</span>TextIOWrapper<span class="token punctuation">(</span>    proc<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>    encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token string">'{}\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    stdin<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>stdin<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>output <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个循环中， <code>"repeater.py: exiting"</code> 行在输出的不同点出现。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 -u interaction.pyOne line at a time:repeater.py: starting<span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span>repeater.py: exitingAll output at once:repeater.py: startingrepeater.py: exiting<span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进程间的信号"><a href="#进程间的信号" class="headerlink" title="进程间的信号"></a>进程间的信号</h2><p><code>os</code> 模块的进程管理示例包括使了用 <code>os.fork()</code> 和 <code>os.kill()</code> 进程之间的信号演示。由于每个 <code>Popen</code> 实例都提供了一个 <code>pid</code> 属性和子进程 <code>id</code>，所以可以对子进程执行类似的操作。下一个例子合并了两个脚本，子进程设置了一个 <code>USR</code> 信号处理器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># signal_child.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> signal<span class="token keyword">import</span> time<span class="token keyword">import</span> syspid <span class="token operator">=</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>received <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">signal_usr1</span><span class="token punctuation">(</span>signum<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Callback invoked when a signal is received"</span>    <span class="token keyword">global</span> received    received <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'CHILD {:&gt;6}: Received USR1'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'CHILD {:&gt;6}: Setting up signal handler'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">,</span> signal_usr1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'CHILD {:&gt;6}: Pausing to wait for signal'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> received<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'CHILD {:&gt;6}: Never received signal'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个脚本被当做父进程运行，它启动了 <code>signal_child.py</code>，然后发送了 <code>USR1</code> 信号。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># signal_parent.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> signal<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> time<span class="token keyword">import</span> sysproc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'python3'</span><span class="token punctuation">,</span> <span class="token string">'signal_child.py'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'PARENT      : Pausing before sending signal...'</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'PARENT      : Signaling child'</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>kill<span class="token punctuation">(</span>proc<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> signal<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出是：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 signal_parent.pyPARENT      <span class="token builtin class-name">:</span> Pausing before sending signal<span class="token punctuation">..</span>.CHILD  <span class="token number">26976</span>: Setting up signal handlerCHILD  <span class="token number">26976</span>: Pausing to <span class="token function">wait</span> <span class="token keyword">for</span> signalPARENT      <span class="token builtin class-name">:</span> Signaling childCHILD  <span class="token number">26976</span>: Received USR1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进程-组-会话"><a href="#进程-组-会话" class="headerlink" title="进程 组 / 会话"></a>进程 组 / 会话</h2><p>如果由 <code>Popen</code> 创建的进程产生子进程，那么子进程将不会收到任何发送给父进程的任何信号。这意味着当对 <code>Popen</code> 使用 <code>shell</code> 参数时，很难通过发送 <code>SIGINT</code> 和 <code>SIGTERM</code> 来使 <code>shell</code> 中启动的命令终止。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_signal_parent_shell.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> signal<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> tempfile<span class="token keyword">import</span> time<span class="token keyword">import</span> sysscript <span class="token operator">=</span> <span class="token triple-quoted-string string">'''#!/bin/shecho "Shell script in process $$"set -xpython3 signal_child.py'''</span>script_file <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span><span class="token string">'wt'</span><span class="token punctuation">)</span>script_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>script<span class="token punctuation">)</span>script_file<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> script_file<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'PARENT      : Pausing before signaling {}...'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    proc<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'PARENT      : Signaling child {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>proc<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>kill<span class="token punctuation">(</span>proc<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> signal<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用于发送信号的 <code>pid</code> 与等待信号的运行 <code>shell</code> 脚本的子进程 <code>id</code> 不同，因为这个例子中有三个独立的进程在交互：</p><ol><li>主程序&nbsp;<code>subprocess_signal_parent_shell.py</code></li><li>主程序创建的运行脚本的 <code>shell</code> 进程。</li><li>程序 <code>signal_child.py</code></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">$ python3 subprocess_signal_parent_shell<span class="token punctuation">.</span>pyPARENT      <span class="token punctuation">:</span> Pausing before signaling <span class="token number">26984</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Shell script <span class="token keyword">in</span> process <span class="token number">26984</span><span class="token operator">+</span> python3 signal_child<span class="token punctuation">.</span>pyCHILD  <span class="token number">26985</span><span class="token punctuation">:</span> Setting up signal handlerCHILD  <span class="token number">26985</span><span class="token punctuation">:</span> Pausing to wait <span class="token keyword">for</span> signalPARENT      <span class="token punctuation">:</span> Signaling child <span class="token number">26984</span>CHILD  <span class="token number">26985</span><span class="token punctuation">:</span> Never received signal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要在不知道进程 <code>id</code> 的情况下向后代进程发送信号，请使用进程组关联这些子进程，以便可以一起发送信号。进程组使用 <code>os.setpgrp()</code> 创建，它将进程组 <code>id</code> 设置为当前进程 <code>id</code>。所有子进程都从父进程继承他们的进程组，因为它只应在由 <code>Popen</code> 及其后代创建的 <code>shell</code> 中设置，所以不应在创建 <code>Popen</code> 的相同进程中调用 <code>os.setpgrp()</code>。而是，应在作为 <code>Popen</code> 的 <code>preexec_fn</code> 参数设置的函数中调用，它会在新进程的 <code>fork</code> 之后运行，在用 <code>exec</code> 运行 <code>shell</code> 之前。为了给进程组发送信号，应该使用 <code>os.killpg()</code> 并使用 <code>Popen</code> 实例的进程 <code>id</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># subprocess_signal_setpgrp.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> signal<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> tempfile<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">show_setting_prgrp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Calling os.setpgrp() from {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>setpgrp<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Process group is now {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpgrp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>script <span class="token operator">=</span> <span class="token triple-quoted-string string">'''#!/bin/shecho "Shell script in process $$"set -xpython3 signal_child.py'''</span>script_file <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span><span class="token string">'wt'</span><span class="token punctuation">)</span>script_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>script<span class="token punctuation">)</span>script_file<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> script_file<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>    preexec_fn<span class="token operator">=</span>show_setting_prgrp<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'PARENT      : Pausing before signaling {}...'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    proc<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'PARENT      : Signaling process group {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    proc<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>killpg<span class="token punctuation">(</span>proc<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> signal<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个运行流程如下：</p><ol><li>父进程实例化&nbsp;<code>Popen</code>；</li><li><code>Popen</code>&nbsp;实例 <code>fork</code> 新进程；</li><li>新进程运行&nbsp;<code>os.setpgrp()</code>；</li><li>新进程运行 <code>exec()</code>&nbsp;启动 shell；</li><li>shell 运行脚本；</li><li>shell 脚本再次 <code>fork</code>，然后启动 Python 解释器；<br>7。 Python 运行&nbsp;<code>signal_child.py</code>.</li><li>父进程发送信号非进程组，使用 <code>Popen</code> 实例的进程 <code>id</code>；</li><li>shell and Python 程序收到信号；</li><li>shell 忽略掉了信号。</li><li>运行&nbsp;<code>signal_child.py</code> 的 Python 程序&nbsp;调用了信号处理器。</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 subprocess_signal_setpgrp.pyCalling os.setpgrp<span class="token punctuation">(</span><span class="token punctuation">)</span> from <span class="token number">75636</span>Process group is now <span class="token number">75636</span>PARENT      <span class="token builtin class-name">:</span> Pausing before signaling <span class="token number">75636</span><span class="token punctuation">..</span>.Shell script <span class="token keyword">in</span> process <span class="token number">75636</span>+ python3 signal_child.pyCHILD  <span class="token number">75637</span>: Setting up signal handlerCHILD  <span class="token number">75637</span>: Pausing to <span class="token function">wait</span> <span class="token keyword">for</span> signalPARENT      <span class="token builtin class-name">:</span> Signaling process group <span class="token number">75636</span>CHILD  <span class="token number">75637</span>: Received USR1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> subprocess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行 网络 IO 和 IPC</title>
      <link href="/dao/post/zh-CN/a8441a397d6a.html"/>
      <url>/dao/post/zh-CN/a8441a397d6a.html</url>
      
        <content type="html"><![CDATA[<p>流是用于处理网络连接的支持 <code>async/await</code> 的高层级原语（primitives）。流允许发送和接收数据，而不需要使用回调或低级协议和传输。</p><p>下面是一个使用 asyncio streams 编写的 TCP echo 客户端示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">tcp_echo_client</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    reader<span class="token punctuation">,</span> writer <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>open_connection<span class="token punctuation">(</span>        <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Send: </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> writer<span class="token punctuation">.</span>drain<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Received: </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Close the connection'</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> writer<span class="token punctuation">.</span>wait_closed<span class="token punctuation">(</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tcp_echo_client<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Stream-函数"><a href="#Stream-函数" class="headerlink" title="Stream 函数"></a>Stream 函数</h2><p>下面的高级 <code>asyncio</code> 函数可以用来创建和处理流：</p><ol><li>coroutine <code>asyncio.open_connection(host=None, port=None, *, loop=None, limit=None, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None, ssl_handshake_timeout=None)</code> 建立网络连接并返回一对 <code>(reader, writer)</code> 对象。</li></ol><p>返回的 <code>reader</code> 和 <code>writer</code> 对象是 <a href="https://docs.python.org/zh-cn/3/library/asyncio-stream.html#asyncio.StreamReader">StreamReader</a> 和 <a href="https://docs.python.org/zh-cn/3/library/asyncio-stream.html#asyncio.StreamWriter">StreamWriter</a> 类的实例。</p><p><code>loop</code> 参数是可选的，当从协程中等待该函数时，总是可以自动确定。<code>limit</code> 确定返回的 <code>StreamReader</code> 实例使用的缓冲区大小限制。默认情况下，<code>limit</code> 设置为 64 KiB 。其余的参数直接传递到 <code>loop.create_connection()</code>。</p><ol start="2"><li>coroutine <code>asyncio.start_server(client_connected_cb, host=None, port=None, *, loop=None, limit=None, family=socket.AF_UNSPEC, flags=socket.AI_PASSIVE, sock=None, backlog=100, ssl=None, reuse_address=None, reuse_port=None, ssl_handshake_timeout=None, start_serving=True)</code> 启动套接字服务。</li></ol><p>当一个新的客户端连接被建立时，回调函数 <code>client_connected_cb</code> 会被调用。该函数会接收到一对参数 <code>(reader, writer)</code> ，<code>reader</code> 是类 <code>StreamReader</code> 的实例，而 <code>writer</code> 是类 <code>StreamWriter</code> 的实例。</p><p><code>client_connected_cb</code> 可以是普通的可调用对象也可以是一个 协程函数; 如果它是一个协程函数，它将自动作为 Task 被调度。<code>loop</code> 参数是可选的。当在一个协程中 <code>await</code> 该方法时，该参数始终可以自动确定。<code>loop</code> 参数是可选的，当从协程中等待该函数时，总是可以自动确定。<code>limit</code> 确定返回的 <code>StreamReader</code> 实例使用的缓冲区大小限制。默认情况下，<code>limit</code> 设置为 64 KiB 。其余的参数直接传递到 <code>loop.create_connection()</code>。</p><ol start="3"><li><p>coroutine <code>asyncio.open_unix_connection(path=None, *, loop=None, limit=None, ssl=None, sock=None, server_hostname=None, ssl_handshake_timeout=None)</code> 建立一个 <strong>Unix 套接字</strong>连接并返回 <code>(reader, writer)</code> 这对返回值。与 <code>open_connection()</code> 相似，但是是在 Unix 套接字上的操作。请看文档 <a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.create_unix_connection">loop.create_unix_connection()</a>.</p></li><li><p>coroutine <code>asyncio.start_unix_server(client_connected_cb, path=None, *, loop=None, limit=None, sock=None, backlog=100, ssl=None, ssl_handshake_timeout=None, start_serving=True)</code><br>启动一个 Unix 套接字服务。与 <code>start_server()</code> 相似，但是是在 Unix 套接字上的操作。请看文档 <a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.create_unix_server">loop.create_unix_server()</a>.</p></li></ol><h2 id="StreamReader"><a href="#StreamReader" class="headerlink" title="StreamReader"></a>StreamReader</h2><p>class <code>asyncio.StreamReader</code> 表示一个读取器对象，该对象提供 <code>api</code> 以便于从 IO 流中读取数据。</p><p>不推荐直接实例化 <code>StreamReader</code> 对象，建议使用 <code>open_connection()</code> 和 <code>start_server()</code> 来获取 <code>StreamReader</code> 实例。</p><ol><li>coroutine <code>read(n=-1)</code> 至多读取 n 个 byte。如果没有设置 <code>n</code> , 则自动置为 <code>-1</code> ， <code>-1</code> 时表示读至 EOF 并返回所有读取的 byte。如果读到 EOF，且内部缓冲区为空，则返回一个空的 <code>bytes</code> 对象。</li><li>coroutine <code>readline()</code> 读取一行，其中“行”指的是以 <code>\n</code> 结尾的字节序列。如果读到 EOF 而没有找到 <code>\n</code>，该方法返回部分读取的数据。如果读到 EOF，且内部缓冲区为空，则返回一个空的 <code>bytes</code> 对象。</li><li>coroutine <code>readexactly(n)</code> 精确读取 <code>n</code> 个 <code>bytes</code>，不会超过也不能少于。如果在读取完 <code>n</code> 个 byte 之前读取到 EOF，则会引发 <code>IncompleteReadError</code> 异常。使用 <code>IncompleteReadError.partial</code> 属性来获取到达流结束之前读取的 <code>bytes</code> 字符串。</li><li>coroutine <code>readuntil(separator=b'\n')</code> 从流中读取数据直至遇到 <code>separator</code>。成功后，数据和指定的 <code>separator</code> 将从内部缓冲区中删除(或者说被消费掉)。返回的数据将包括在末尾的指定 <code>separator</code>。</li></ol><p>如果读取的数据量超过了配置的流限制，将引发 <code>LimitOverrunError</code> 异常，数据将留在内部缓冲区中并可以再次读取。如果在找到完整的 <code>separator</code> 之前到达 EOF，则会引发 <code>IncompleteReadError</code> 异常，并重置内部缓冲区。<code>IncompleteReadError.partial</code> 属性可能包含指定 <code>separator</code> 的一部分。</p><ol start="5"><li><code>at_eof()</code>：如果缓冲区为空并且 <code>feed_eof()</code> 被调用，则返回 <code>True</code>。</li></ol><h2 id="StreamWriter"><a href="#StreamWriter" class="headerlink" title="StreamWriter"></a>StreamWriter</h2><p>class <code>asyncio.StreamWriter</code> 表示一个写入器对象，该对象提供 <code>api</code> 以便于写数据至 IO 流中。不建议直接实例化 StreamWriter；而应改用 <code>open_connection()</code> 和 <code>start_server()</code>。</p><ol><li><code>write(data)</code> 方法会尝试立即将 <code>data</code> 写入到下层的套接字。如果写入失败，数据会被排入内部写缓冲队列直到可以被发送。此方法应当与 <code>drain()</code> 方法一起使用：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">stream<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">await</span> stream<span class="token punctuation">.</span>drain<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><code>writelines(data)</code> 方法会立即尝试将一个字节串列表（或任何可迭代对象）写入到下层的套接字。如果写入失败，数据会被排入内部写缓冲队列直到可以被发送。此方法应当与 <code>drain()</code> 方法一起使用：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">stream<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token keyword">await</span> stream<span class="token punctuation">.</span>drain<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><code>close()</code> 方法会关闭流以及下层的套接字。此方法应与 <code>wait_closed()</code> 方法一起使用：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">stream<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">await</span> stream<span class="token punctuation">.</span>wait_closed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><code>can_write_eof()</code>：如果下层的传输支持 · 方法则返回 <code>True</code>，否则返回 <code>False</code>。</li><li><code>write_eof()</code> 在已缓冲的写入数据被刷新后关闭流的写入端。</li><li><code>transport</code> 返回下层的 <code>asyncio</code> 传输。</li><li><code>get_extra_info(name, default=None)</code> 访问可选的传输信息；详情参见 <a href="https://docs.python.org/zh-cn/3/library/asyncio-protocol.html#asyncio.BaseTransport.get_extra_info">BaseTransport.get_extra_info()</a>。</li><li><code>coroutine drain()</code> 等待直到可以适当地恢复写入到流。示例:</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">await</span> writer<span class="token punctuation">.</span>drain<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是一个与下层的 IO 写缓冲区进行交互的流程控制方法。当缓冲区大小达到最高水位（最大上限）时，<code>drain()</code> 会阻塞直到缓冲区大小减少至最低水位以便恢复写入。当没有要等待的数据时，<code>drain()</code> 会立即返回。</p><ol start="9"><li><code>is_closing()</code> 如果流已被关闭或正在被关闭则返回 <code>True</code>。</li><li>coroutine <code>wait_closed()</code> 等待直到流被关闭。应当在 <code>close()</code> 之后被调用以便等待直到下层的连接被关闭。</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="使用流的-TCP-回显客户端"><a href="#使用流的-TCP-回显客户端" class="headerlink" title="使用流的 TCP 回显客户端"></a>使用流的 TCP 回显客户端</h3><p>使用 <code>asyncio.open_connection()</code> 函数的 TCP 回显客户端：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">tcp_echo_client</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    reader<span class="token punctuation">,</span> writer <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>open_connection<span class="token punctuation">(</span>        <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Send: </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Received: </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Close the connection'</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tcp_echo_client<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参见：使用低层级 <a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.create_connection">loop.create_connection()</a> 方法的 <a href="https://docs.python.org/zh-cn/3/library/asyncio-protocol.html#asyncio-example-tcp-echo-client-protocol">TCP 回显客户端协议</a> 示例。</p><h4 id="使用流的-TCP-回显服务器"><a href="#使用流的-TCP-回显服务器" class="headerlink" title="使用流的 TCP 回显服务器"></a>使用流的 TCP 回显服务器</h4><p>TCP 回显服务器使用 <code>asyncio.start_server()</code> 函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handle_echo</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    message <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    addr <span class="token operator">=</span> writer<span class="token punctuation">.</span>get_extra_info<span class="token punctuation">(</span><span class="token string">'peername'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Received </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">{</span>addr<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Send: </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">await</span> writer<span class="token punctuation">.</span>drain<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Close the connection"</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>start_server<span class="token punctuation">(</span>        handle_echo<span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span>    addr <span class="token operator">=</span> server<span class="token punctuation">.</span>sockets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Serving on </span><span class="token interpolation"><span class="token punctuation">{</span>addr<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> server<span class="token punctuation">:</span>        <span class="token keyword">await</span> server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参见 使用 <a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.create_server">loop.create_server()</a> 方法的 TCP <a href="https://docs.python.org/zh-cn/3/library/asyncio-protocol.html#asyncio-example-tcp-echo-server-protocol">回显服务器协议</a> 示例。</p><h3 id="获取-HTTP-标头"><a href="#获取-HTTP-标头" class="headerlink" title="获取 HTTP 标头"></a>获取 HTTP 标头</h3><p>查询命令行传入 URL 的 HTTP 标头的简单示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> sys<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">print_http_headers</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> url<span class="token punctuation">.</span>scheme <span class="token operator">==</span> <span class="token string">'https'</span><span class="token punctuation">:</span>        reader<span class="token punctuation">,</span> writer <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>open_connection<span class="token punctuation">(</span>            url<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        reader<span class="token punctuation">,</span> writer <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>open_connection<span class="token punctuation">(</span>            url<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>    query <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token string-interpolation"><span class="token string">f"HEAD </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">.</span>path <span class="token keyword">or</span> <span class="token string">'/'</span><span class="token punctuation">}</span></span><span class="token string"> HTTP/1.0\r\n"</span></span>        <span class="token string-interpolation"><span class="token string">f"Host: </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">.</span>hostname<span class="token punctuation">}</span></span><span class="token string">\r\n"</span></span>        <span class="token string-interpolation"><span class="token string">f"\r\n"</span></span>    <span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>query<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> line<span class="token punctuation">:</span>            <span class="token keyword">break</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> line<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'HTTP header&gt; </span><span class="token interpolation"><span class="token punctuation">{</span>line<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token comment"># Ignore the body, close the socket</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>print_http_headers<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python example.py http://example.com/path/page.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或使用 HTTPS：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python example.py https://example.com/path/page.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注册一个打开的套接字以等待使用流的数据"><a href="#注册一个打开的套接字以等待使用流的数据" class="headerlink" title="注册一个打开的套接字以等待使用流的数据"></a>注册一个打开的套接字以等待使用流的数据</h3><p>使用 <code>open_connection()</code> 函数实现等待直到套接字接收到数据的协程：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> socket<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">wait_for_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Get a reference to the current event loop because</span>    <span class="token comment"># we want to access low-level APIs.</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Create a pair of connected sockets.</span>    rsock<span class="token punctuation">,</span> wsock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socketpair<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Register the open socket to wait for data.</span>    reader<span class="token punctuation">,</span> writer <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>open_connection<span class="token punctuation">(</span>sock<span class="token operator">=</span>rsock<span class="token punctuation">)</span>    <span class="token comment"># Simulate the reception of data from the network</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>wsock<span class="token punctuation">.</span>send<span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Wait for data</span>    data <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment"># Got data, we are done: close the socket</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Received:"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Close the second socket</span>    wsock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>wait_for_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参见：使用低层级协议以及 <a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.create_connection">loop.create_connection()</a> 方法的 <a href="https://docs.python.org/zh-cn/3/library/asyncio-protocol.html#asyncio-example-create-connection">注册一个打开的套接字以等待使用协议的数据</a> 示例。<br>使用低层级的 <a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.add_reader">loop.add_reader()</a> 方法来监视文件描述符的 <a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio-example-watch-fd">监视文件描述符以读取事件</a> 示例。</p>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 异步编程</title>
      <link href="/dao/post/zh-CN/bc778a9a2e3c.html"/>
      <url>/dao/post/zh-CN/bc778a9a2e3c.html</url>
      
        <content type="html"><![CDATA[<p><code>future</code> 是代表尚未完成的工作结果的数据结构。事件循环可以监视将 <code>Future</code> 对象设置为完成的状态，从而允许应用程序的一部分等待另一部分完成某些工作。除 <code>future</code> 外，<code>asyncio</code> 还包括其他并发原语，例如锁和信号量（semaphores）。</p><p><code>Task</code> 是 <code>Future</code> 的子类，它知道如何包装和管理协程的执行。可以使用事件循环调度任务，以在所需资源可用时运行它们，并产生可以被其他协程消耗的结果。</p><h2 id="Awaitables"><a href="#Awaitables" class="headerlink" title="Awaitables"></a>Awaitables</h2><p>若一个对象可以被用于 <code>await</code> 表达式，则可被称为<dfn class="xin-term">可等待</dfn>（awaitable）对象。<dfn class="xin-term">可等待</dfn> 对象有三种主要类型: <dfn class="xin-term">协程</dfn>（coroutines）, <dfn class="xin-term">任务</dfn>（Tasks） 和 <dfn class="xin-term">Futures</dfn>。</p><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p><dfn class="xin-term">协程</dfn> 通过 <code>async/await</code> 语法进行声明，是编写 asyncio 应用的推荐方式。例如，以下代码段（需要 Python 3.7+）会打印 “hello”，等待 1 秒，再打印 “world”：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> asyncio<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：简单地调用一个协程并不会使其被调度（schedule）执行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>coroutine <span class="token builtin">object</span> main at <span class="token number">0x1053bb7c8</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要真正运行一个协程，asyncio 提供了三种主要机制:</p><ul><li><code>asyncio.run()</code> 函数用来运行最高层级的入口点 “main()” 函数 (参见上面的示例。)</li><li>等待一个协程。以下代码段会在等待 1 秒后打印 “hello”，然后 再次 等待 2 秒后打印 “world”：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">say_after</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> what<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"started at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%X'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">await</span> say_after<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> say_after<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"finished at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%X'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预期的输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">started at <span class="token number">17</span>:13:52helloworldfinished at <span class="token number">17</span>:13:55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>asyncio.create_task()</code> 函数用来并发运行作为 asyncio <strong>任务</strong> 的多个协程。</li></ul><p>修改以上示例，<strong>并发</strong>（concurrently）运行两个 <code>say_after</code> 协程:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    task1 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>        say_after<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    task2 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>        say_after<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"started at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%X'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># Wait until both tasks are completed (should take</span>    <span class="token comment"># around 2 seconds.)</span>    <span class="token keyword">await</span> task1    <span class="token keyword">await</span> task2    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"finished at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%X'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，预期的输出显示代码段的运行时间比之前快了 1 秒：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">started at <span class="token number">17</span>:14:32helloworldfinished at <span class="token number">17</span>:14:34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Python <i>协程</i> 属于 可等待 对象，因此可以在其他协程中被等待：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">42</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Nothing happens if we just call "nested()".</span>    <span class="token comment"># A coroutine object is created but not awaited,</span>    <span class="token comment"># so it *won't run at all*.</span>    nested<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Let's do it differently now and await it:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> nested<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># will print "42".</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="w3-yellow">重要</span> ：<dfn class="xin-term">协程</dfn> 一般有两个紧密关联的概念:</p><ul><li><dfn class="xin-term">协程函数</dfn>: 定义形式为 <code>async def</code> 的函数;</li><li><dfn class="xin-term">协程对象</dfn>: 调用 协程函数 所返回的对象。</li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p><dfn class="xin-term">任务</dfn> 被用来“并发的”（concurrently）调度协程。当一个协程通过 <code>asyncio.create_task()</code> 等函数被封装为一个 <strong>任务</strong>，该协程会被自动调度执行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">42</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Schedule nested() to run soon concurrently</span>    <span class="token comment"># with "main()".</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>nested<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># "task" can now be used to cancel "nested()", or</span>    <span class="token comment"># can simply be awaited to wait until it is complete:</span>    <span class="token keyword">await</span> taskasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Future-对象"><a href="#Future-对象" class="headerlink" title="Future 对象"></a>Future 对象</h3><p><dfn class="xin-term">Future</dfn> 是一种特殊的 <strong>低层级</strong> 可等待对象，表示一个异步操作的 <strong>最终结果</strong>。</p><p>当一个 Future 对象 被等待，这意味着协程将保持等待直到该 Future 对象在其他地方操作完毕。</p><p>在 asyncio 中需要 <dfn class="xin-term">Future</dfn> 对象以便允许通过 async/await 使用基于回调的代码。</p><p>通常情况下 <strong>没有必要</strong> 在应用层级的代码中创建 <dfn class="xin-term">Future</dfn> 对象。</p><p><dfn class="xin-term">Future</dfn> 对象有时会由库和某些 asyncio API 暴露给用户，用作可等待对象：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> function_that_returns_a_future_object<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># this is also valid:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>        function_that_returns_a_future_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        some_python_coroutine<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个很好的返回对象的低层级函数的示例是 <a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor"><code>loop.run_in_executor()</code></a>。</p><h2 id="在-Jupyter-Notebook-中使用异步编程"><a href="#在-Jupyter-Notebook-中使用异步编程" class="headerlink" title="在 Jupyter Notebook 中使用异步编程"></a>在 Jupyter Notebook 中使用异步编程</h2><p>在 Jupyter Notebook 中使用 <code>asyncio.run()</code> 时会触发异常：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">---------------------------------------------------------------------------RuntimeError                              Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython-input-5-eaadc83a82ea<span class="token operator">&gt;</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>----<span class="token operator">&gt;</span> <span class="token number">1</span> asyncio.run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">))</span>~<span class="token punctuation">\</span>anaconda3<span class="token punctuation">\</span>envs<span class="token punctuation">\</span>ui<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>asyncio<span class="token punctuation">\</span>runners.py <span class="token keyword">in</span> run<span class="token punctuation">(</span>main, debug<span class="token punctuation">)</span>     <span class="token number">31</span>     <span class="token string">""</span>"     <span class="token number">32</span>     <span class="token keyword">if</span> events._get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> is not None:---<span class="token operator">&gt;</span> <span class="token number">33</span>         raise RuntimeError<span class="token punctuation">(</span>     <span class="token number">34</span>             <span class="token string">"asyncio.run() cannot be called from a running event loop"</span><span class="token punctuation">)</span>     <span class="token number">35</span> RuntimeError: asyncio.run<span class="token punctuation">(</span><span class="token punctuation">)</span> cannot be called from a running event loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为 Jupyter 已经运行了 事件循环，无需自己激活，采用上文中的 <code>await()</code> 调用即可。</p><p>比如，如下程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Jupyter Notebook 和 Python Shell 中分别为：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">Jupyter Notebook</label>        <div class="tab-content w3-padding"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">await</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">Python Shell</label>        <div class="tab-content w3-padding"><pre class="line-numbers language-python" data-language="python"><code class="language-python">asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        </div>    </div></article><h2 id="运行-asyncio-程序"><a href="#运行-asyncio-程序" class="headerlink" title="运行 asyncio 程序"></a>运行 asyncio 程序</h2><p><code>asyncio.run(coro, *, debug=False)</code> 执行 <a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-coroutine">coroutine</a> coro 并返回结果。此函数会运行传入的协程，负责管理 <code>asyncio</code> 事件循环，终结异步生成器，并关闭线程池。</p><p>当有其他 <code>asyncio</code> 事件循环在同一线程中运行时，此函数不能被调用。</p><p>如果 <code>debug</code> 为 <code>True</code>，事件循环将以调试模式运行。此函数总是会创建一个新的事件循环并在结束时关闭之。它应当被用作 <code>asyncio</code> 程序的主入口点，理想情况下应当只被调用一次。</p><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p><code>asyncio.create_task(coro, *, name=None)</code> 将 <code>coro</code> 协程 封装为一个 <code>Task</code> 并调度其执行。返回 <code>Task</code> 对象。<code>name</code> 不为 <code>None</code>，它将使用 <code>Task.set_name()</code> 来设为任务的名称。</p><p>该任务会在 <code>get_running_loop()</code> 返回的循环中执行，如果当前线程没有在运行的循环则会引发 <code>RuntimeError</code>。此函数 在 Python 3.7 中被加入。在 Python 3.7 之前，可以改用低层级的 <code>asyncio.ensure_future()</code> 函数。</p><h2 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h2><p>coroutine <code>asyncio.sleep(delay, result=None)</code> 阻塞 <code>delay</code> 指定的秒数。如果指定了 <code>result</code>，则当协程完成时将其返回给调用者。<code>sleep()</code> 总是会挂起当前任务，以允许其他任务运行。</p><p>将 <code>delay</code> 设置为 <code>0</code> 提供了优化的路径，以允许其他任务运行。长时间运行的函数可以使用它来避免在函数调用的整个过程中阻塞事件循环。</p><p>以下协程示例运行 5 秒，每秒显示一次当前日期：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> datetime<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">display_date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    end_time <span class="token operator">=</span> loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5.0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> end_time<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>display_date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="并发运行任务"><a href="#并发运行任务" class="headerlink" title="并发运行任务"></a>并发运行任务</h2><p>awaitable <code>asyncio.gather(*aws, return_exceptions=False)</code> 并发 运行 <code>aws</code> 序列中的 <dfn class="xin-term">可等待对象</dfn>。如果 <code>aws</code> 中的某个可等待对象为<dfn class="xin-term">协程</dfn>，它将自动被作为一个任务调度。如果所有<dfn class="xin-term">可等待对象</dfn>都成功完成，结果将是一个由所有返回值聚合而成的列表。结果值的顺序与 <code>aws</code> 中可等待对象的顺序一致。</p><p>如果 <code>return_exceptions</code> 为 <code>False</code> (默认)，所引发的首个异常会立即传播给等待 <code>gather()</code> 的任务。<code>aws</code> 序列中的其他可等待对象 <strong>不会被取消</strong> 并将继续运行。如果 <code>return_exceptions</code> 为 <code>True</code>，异常会和成功的结果一样处理，并聚合至结果列表。</p><p>如果 <code>gather()</code> 被取消，所有被提交 (尚未完成) 的可等待对象也会 被取消。如果 <code>aws</code> 序列中的任一 Task 或 Future 对象 被取消，它将被当作引发了 CancelledError 一样处理 – 在此情况下 <code>gather()</code> 调用 不会 被取消。这是为了防止一个已提交的 Task/Future 被取消导致其他 Tasks/Future 也被取消。</p><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Task </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: Compute factorial(</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">)..."</span></span><span class="token punctuation">)</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        f <span class="token operator">*=</span> i    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Task </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: factorial(</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span><span class="token string">) = </span><span class="token interpolation"><span class="token punctuation">{</span>f<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Schedule three calls *concurrently*:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>        factorial<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        factorial<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        factorial<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><output>Task A: Compute factorial(2)...Task B: Compute factorial(2)...Task C: Compute factorial(2)...Task A: factorial(2) = 2Task B: Compute factorial(3)...Task C: Compute factorial(3)...Task B: factorial(3) = 6Task C: Compute factorial(4)...Task C: factorial(4) = 24</output><h2 id="屏蔽取消操作"><a href="#屏蔽取消操作" class="headerlink" title="屏蔽取消操作"></a>屏蔽取消操作</h2><p>awaitable <code>asyncio.shield(aw)</code> 保护一个 <dfn class="xin-term">可等待对象</dfn> 防止其被 取消。如果 <code>aw</code> 是一个协程，它将自动被作为任务调度。以下语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> <span class="token keyword">await</span> shield<span class="token punctuation">(</span>something<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> <span class="token keyword">await</span> something<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不同之处：如果包含它的协程被取消，在 <code>something()</code> 中运行的任务不会被取消。从 <code>something()</code> 的角度看来，取消操作并没有发生。然而其调用者已被取消，因此 <code>"await"</code> 表达式仍然会引发 <code>CancelledError</code>。如果通过其他方式取消 <code>something()</code> (例如在其内部操作) 则 <code>shield()</code> 也会取消。如果希望完全忽略取消操作 (不推荐) 则 <code>shield()</code> 函数需要配合一个 <code>try/except</code> 代码段，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token keyword">await</span> shield<span class="token punctuation">(</span>something<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> CancelledError<span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>coroutine <code>asyncio.wait_for(aw, timeout)</code> 等待 <code>aw</code> 可等待对象 完成，指定 <code>timeout</code> 秒数后超时。如果 <code>aw</code> 是一个协程，它将自动被作为任务调度。<code>timeout</code> 可以为 <code>None</code>，也可以为 <code>float</code> 或 <code>int</code> 型数值表示的等待秒数。如果 <code>timeout</code> 为 <code>None</code>，则等待直到完成。</p><p>如果发生超时，任务将取消并引发 <code>asyncio.TimeoutError</code>。要避免任务 被取消，可以加上 <code>shield()</code>。此函数将等待直到 <code>Future</code> 确实被取消，所以总等待时间可能超过 <code>timeout</code>。如果在取消期间发生了异常，异常将会被传播。如果等待被取消，则 <code>aw</code> 指定的对象也会被取消。</p><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">eternity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Sleep for one hour</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'yay!'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Wait for at most 1 second</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait_for<span class="token punctuation">(</span>eternity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>TimeoutError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'timeout!'</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><output>timeout!</output><p>Python 3.8 版后已移除: <code>asyncio.wait</code>，所以尽量使用 <code>asyncio.wait_for</code>。</p><h2 id="as-completed"><a href="#as-completed" class="headerlink" title="as_completed"></a>as_completed</h2><p><code>asyncio.as_completed(aws, *, timeout=None)</code> 并发地运行 <code>aws</code> 可迭代对象中的 可等待对象。返回一个协程的迭代器。所返回的每个协程可被等待以从剩余的可等待对象的可迭代对象中获得最早的下一个结果。</p><p>如果在所有 <code>Future</code> 对象完成前发生超时则将引发 <code>asyncio.TimeoutError</code>。示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> coro <span class="token keyword">in</span> as_completed<span class="token punctuation">(</span>aws<span class="token punctuation">)</span><span class="token punctuation">:</span>    earliest_result <span class="token operator">=</span> <span class="token keyword">await</span> coro    <span class="token comment"># ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="在线程中运行"><a href="#在线程中运行" class="headerlink" title="在线程中运行"></a>在线程中运行</h2><p><code>coroutine asyncio.to_thread(func, /, *args, **kwargs)</code> 在不同的线程中异步地运行函数 <code>func</code>。</p><p>向此函数提供的任何 <code>*args</code> 和 <code>**kwargs</code> 会被直接传给 <code>func</code>。并且，当前 <code>contextvars.Context</code> 会被传播，允许在不同的线程中访问来自事件循环的上下文变量。返回一个可被等待以获取 <code>func</code> 的最终结果的协程。</p><p>这个协程函数主要是用于执行在其他情况下会阻塞事件循环的 IO 密集型函数/方法。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">blocking_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"start blocking_io at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%X'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># Note that time.sleep() can be replaced with any blocking</span>    <span class="token comment"># IO-bound operation, such as file operations.</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"blocking_io complete at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%X'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"started main at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%X'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>        asyncio<span class="token punctuation">.</span>to_thread<span class="token punctuation">(</span>blocking_io<span class="token punctuation">)</span><span class="token punctuation">,</span>        asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"finished main at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%X'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><output>started main at 14:55:04start blocking_io at 14:55:04blocking_io complete at 14:55:05finished main at 14:55:05</output><p>在任何协程中直接调用 <code>blocking_io()</code> 将会在调用期间阻塞事件循环，导致额外的 1 秒运行时间。而通过改用 <code>asyncio.to_thread()</code>，我们可以在不同的线程中运行它从而不会阻塞事件循环。</p><h2 id="跨线程调度"><a href="#跨线程调度" class="headerlink" title="跨线程调度"></a>跨线程调度</h2><p><code>asyncio.run_coroutine_threadsafe(coro, loop)</code> 向指定事件循环提交一个协程。（线程安全）</p><p>返回一个 <code>concurrent.futures.Future</code> 以等待来自其他 OS 线程的结果。</p><p>此函数应该从另一个 OS 线程中调用，而非事件循环运行所在线程。示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Create a coroutine</span>coro <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># Submit the coroutine to a given loop</span>future <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>run_coroutine_threadsafe<span class="token punctuation">(</span>coro<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token comment"># Wait for the result with an optional timeout argument</span><span class="token keyword">assert</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在协程内产生了异常，将会通知返回的 Future 对象。它也可被用来取消事件循环中的任务：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>TimeoutError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The coroutine took too long, cancelling the task...'</span><span class="token punctuation">)</span>    future<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> exc<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The coroutine raised an exception: </span><span class="token interpolation"><span class="token punctuation">{</span>exc<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The coroutine returned: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同与其他 <code>asyncio</code> 函数，此函数要求显式地传入 <code>loop</code> 参数。</p><h2 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h2><p><code>asyncio.current_task(loop=None)</code> 返回当前运行的 <code>Task</code> 实例，如果没有正在运行的任务则返回 <code>None</code>。如果 <code>loop</code> 为 <code>None</code> 则会使用 <code>asyncio.get_running_loop()</code> 获取当前事件循环。</p><p><code>asyncio.all_tasks(loop=None)</code> 返回事件循环所运行的未完成的 <code>Task</code> 对象的集合。如果 <code>loop</code> 为 <code>None</code>，则会使用 <code>asyncio.get_running_loop()</code> 获取当前事件循环。</p><h2 id="Task-对象"><a href="#Task-对象" class="headerlink" title="Task 对象"></a>Task 对象</h2><p><code>class asyncio.Task(coro, *, name=None)</code> 与 <a href="https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future">Future 类似</a>，可运行 Python 协程。非线程安全。</p><p>Task 对象被用来在事件循环中运行协程。如果一个协程在等待一个 <code>Future</code> 对象，<code>Task</code> 对象会挂起该协程的执行并等待该 <code>Future</code> 对象完成。当该 <code>Future</code> 对象 完成，被打包的协程将恢复执行。事件循环使用协同日程调度: 一个事件循环每次运行一个 Task 对象。而一个 Task 对象会等待一个 Future 对象完成，该事件循环会运行其他 Task、回调或执行 IO 操作。</p><p>使用高层级的 <code>asyncio.create_task()</code> 函数来创建 <code>Task</code> 对象，也可用低层级的 <code>asyncio.loop.create_task()</code> 或 <code>asyncio.ensure_future()</code> 函数。不建议手动实例化 <code>Task</code> 对象。</p><p>要取消一个正在运行的 <code>Task</code> 对象可使用 <code>asyncio.Task.cancel()</code> 方法。调用此方法将使该 <code>Task</code> 对象抛出一个 <code>CancelledError</code> 异常给打包的协程。如果取消期间一个协程正在等待一个 <code>Future</code> 对象，该 <code>Future</code> 对象也将被取消。</p><p><code>asyncio.Task.cancelled()</code> 可被用来检测 <code>Task</code> 对象是否被取消。如果打包的协程没有抑制 <code>CancelledError</code> 异常并且确实被取消，该方法将返回 <code>True</code>。</p><p><code>asyncio.Task</code> 从 <code>Future</code> 继承了其除 <code>Future.set_result()</code> 和 <code>Future.set_exception()</code> 以外的所有 API。</p><p><code>Task</code> 对象支持 <a href="https://docs.python.org/zh-cn/3/library/contextvars.html#module-contextvars">contextvars</a> 模块。当一个 <code>Task</code> 对象被创建，它将复制当前上下文，然后在复制的上下文中运行其协程。</p><h3 id="cancel-msg-None"><a href="#cancel-msg-None" class="headerlink" title="cancel(msg=None)"></a><code>cancel(msg=None)</code></h3><p>请求取消 <code>Task</code> 对象。这将安排在下一轮事件循环中抛出一个 <code>CancelledError</code> 异常给被封包的协程。协程在之后有机会进行清理甚至使用 <code>try ... ... except CancelledError ... finally</code> 代码块抑制异常来拒绝请求。不同于 <code>Future.cancel()</code>，<code>Task.cancel()</code> 不保证 <code>Task</code> 会被取消，虽然抑制完全取消并不常见，也很不鼓励这样做。</p><p>以下示例演示了协程是如何侦听取消请求的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">cancel_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cancel_me(): before sleep'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># Wait for 1 hour</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>CancelledError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cancel_me(): cancel sleep'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cancel_me(): after sleep'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Create a "cancel_me" Task</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>cancel_me<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Wait for 1 second</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    task<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> task    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>CancelledError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main(): cancel_me is cancelled now"</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><output>cancel_me(): before sleepcancel_me(): cancel sleepcancel_me(): after sleepmain(): cancel_me is cancelled now</output><h3 id="cancelled"><a href="#cancelled" class="headerlink" title="cancelled()"></a><code>cancelled()</code></h3><p>如果 <code>Task</code> 对象 被取消 则返回 <code>True</code>。当使用 <code>cancel()</code> 发出取消请求时 <code>Task</code> 会被 取消，其封包的协程将传播被抛入的 <code>CancelledError</code> 异常。</p><h3 id="done"><a href="#done" class="headerlink" title="done()"></a><code>done()</code></h3><p>如果 <code>Task</code> 对象 已完成 则返回 <code>True</code>。当 <code>Task</code> 所封包的协程返回一个值、引发一个异常或 <code>Task</code> 本身被取消时，则会被认为 已完成。</p><h3 id="result"><a href="#result" class="headerlink" title="result()"></a><code>result()</code></h3><p>返回 <code>Task</code> 的结果。如果 <code>Task</code> 对象 已完成，其封包的协程的结果会被返回 (或者当协程引发异常时，该异常会被重新引发)。如果 <code>Task</code> 对象 被取消，此方法会引发一个 <code>CancelledError</code> 异常。如果 <code>Task</code> 对象的结果还不可用，此方法会引发一个 <code>InvalidStateError</code> 异常。</p><h3 id="exception"><a href="#exception" class="headerlink" title="exception()"></a><code>exception()</code></h3><p>返回 <code>Task</code> 对象的异常。如果所封包的协程引发了一个异常，该异常将被返回。如果所封包的协程正常返回则该方法将返回 <code>None</code>。如果 <code>Task</code> 对象 被取消，此方法会引发一个 <code>CancelledError</code> 异常。如果 <code>Task</code> 对象尚未 完成，此方法将引发一个 <code>InvalidStateError</code> 异常。</p><h3 id="add-done-callback-callback-context-None"><a href="#add-done-callback-callback-context-None" class="headerlink" title="add_done_callback(callback, *, context=None)"></a><code>add_done_callback(callback, *, context=None)</code></h3><p>添加一个回调，将在 <code>Task</code> 对象 完成 时被运行。此方法应该仅在低层级的基于回调的代码中使用。要了解更多细节请查看 <a href="https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future.add_done_callback">Future.add_done_callback()</a> 的文档。</p><h3 id="remove-done-callback-callback"><a href="#remove-done-callback-callback" class="headerlink" title="remove_done_callback(callback)"></a><code>remove_done_callback(callback)</code></h3><p>从回调列表中移除 <code>callback</code> 指定的回调。此方法应该仅在低层级的基于回调的代码中使用。</p><p>要了解更多细节请查看 <a href="https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future.remove_done_callback">Future.remove_done_callback()</a> 的文档。</p><h3 id="get-stack-limit-None"><a href="#get-stack-limit-None" class="headerlink" title="get_stack(*, limit=None)"></a><code>get_stack(*, limit=None)</code></h3><p>返回此 <code>Task</code> 对象的栈 frame 列表。如果所封包的协程未完成，这将返回其挂起所在的栈。如果协程已成功完成或被取消，这将返回一个空列表。如果协程被一个异常终止，这将返回回溯 frame 列表。</p><p>frame 总是从按从旧到新排序。</p><p>每个被挂起的协程只返回一个栈 frame。</p><p>可选的 <code>limit</code> 参数指定返回 frame 的数量上限；默认返回所有 frame。返回列表的顺序要看是返回一个栈还是一个回溯：栈返回最新的 frame，回溯返回最旧的frame。(这与 traceback 模块的行为保持一致。)</p><h3 id="print-stack-limit-None-file-None"><a href="#print-stack-limit-None-file-None" class="headerlink" title="print_stack(*, limit=None, file=None)"></a><code>print_stack(*, limit=None, file=None)</code></h3><p>打印此 <code>Task</code> 对象的栈或回溯。</p><p>此方法产生的输出类似于 traceback 模块通过 get_stack() 所获取的框架。</p><p><code>limit</code> 参数会直接传递给 <code>get_stack()</code>。</p><p><code>file</code> 参数是输出所写入的 I/O 流；默认情况下输出会写入 <code>sys.stderr</code>。</p><h3 id="get-coro"><a href="#get-coro" class="headerlink" title="get_coro()"></a><code>get_coro()</code></h3><p>返回由 Task 包装的协程对象。</p><h3 id="get-name"><a href="#get-name" class="headerlink" title="get_name()"></a>get_name()</h3><p>返回 Task 的名称。</p><p>如果没有一个 Task 名称被显式地赋值，默认的 asyncio Task 实现会在实例化期间生成一个默认名称。</p><h4 id="set-name-value"><a href="#set-name-value" class="headerlink" title="set_name(value)"></a><code>set_name(value)</code></h4><p>设置 Task 的名称。</p><p><code>value</code> 参数可以为任意对象，它随后会被转换为字符串。</p><p>在默认的 Task 实现中，名称将在任务对象的 <code>repr()</code> 输出中可见</p>]]></content>
      
      
      <categories>
          
          <category> Python 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始制作 Hexo 博客</title>
      <link href="/dao/post/zh-CN/d125b0b0c8ae.html"/>
      <url>/dao/post/zh-CN/d125b0b0c8ae.html</url>
      
        <content type="html"><![CDATA[<p>本教程介绍如何动手从零开始制作 Hexo 主题的博客网站。</p><h2 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h2><ol><li>参考 <a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a> 安装 Hexo。</li><li>在 GitHub 创建一个空白仓库，比如：<a href="https://github.com/xinetzone/xin">xinetzone/xin</a>（本教程，就以此为例介绍）。接着，将其克隆到本地。</li><li>在 <a href="https://github.com/xinetzone/xin">xinetzone/xin</a> 下初始化 Hexo 环境：</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo init book<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>接着便可以预览网站（虽然会因为缺少主题而报一些警告，但不影响预览）：</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>在 <code>themes</code> 下创建自己的主题文件夹，比如：<code>themes/xin</code>，最后，还要修改网址配置文件 <code>_config.yml</code> 内的 <code>theme</code> 设定为 <code>xin</code>。</li></ol><h3 id="主题创建"><a href="#主题创建" class="headerlink" title="主题创建"></a>主题创建</h3><p>创建 Hexo 主题非常容易，您只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹（比如 <code>xin</code>），并修改网站配置文件 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">.</span>├── _config.yml├── languages├── layout├── scripts└── <span class="token builtin class-name">source</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>_config.yml</code>：主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启 Hexo Server。</li><li><code>languages</code>：语言文件夹。请参见 <a href="https://hexo.io/zh-cn/docs/internationalization">国际化 (i18n)</a>。</li><li><code>layout</code>：布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建&nbsp;<a href="https://github.com/node-swig/swig-templates">Swig</a>&nbsp;模板引擎，您可以另外安装插件来获得&nbsp;<a href="https://github.com/hexojs/hexo-renderer-ejs">EJS</a>、<a href="https://github.com/hexojs/hexo-renderer-haml">Haml</a>、<a href="https://github.com/hexojs/hexo-renderer-jade">Jade</a>&nbsp;或&nbsp;<a href="https://github.com/maxknee/hexo-render-pug">Pug</a>&nbsp;支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">layout.ejs   - 使用 EJSlayout.swig  - 使用 Swig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可参考&nbsp;<a href="https://hexo.io/zh-cn/docs/templates">模板</a>&nbsp;以获得更多信息。</p><ol start="4"><li><code>scripts</code>：脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 <a href="https://hexo.io/docs/plugins">插件</a> 以获得更多信息。</li><li><code>source</code>：资源文件夹，除了模板以外的 assets，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 <code>_</code>（下划线线）或隐藏的文件会被忽略。如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code> 文件夹，否则会直接拷贝到 <code>public</code> 文件夹。</li><li>可以直接参考一些优秀的主题进行一些主题配置，比如，复制主题 <a href="https://hexojs.github.io/hexo-theme-landscape/"><code>landscape</code></a> 的 <code>languages</code> 文件。</li></ol><h3 id="构建-xin-主题模板"><a href="#构建-xin-主题模板" class="headerlink" title="构建 xin 主题模板"></a>构建 xin 主题模板</h3><p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 <code>index</code> 模板，以下是各页面相对应的模板名称：</p><table><thead><tr><th align="left">模板</th><th align="left">用途</th><th align="left">回退</th></tr></thead><tbody><tr><td align="left">index</td><td align="left">首页</td><td align="left"></td></tr><tr><td align="left">post</td><td align="left">文章</td><td align="left">index</td></tr><tr><td align="left">page</td><td align="left">分页</td><td align="left">index</td></tr><tr><td align="left">archive</td><td align="left">归档</td><td align="left">index</td></tr><tr><td align="left">category</td><td align="left">分类归档</td><td align="left">archive</td></tr><tr><td align="left">tag</td><td align="left">标签归档</td><td align="left">archive</td></tr></tbody></table><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过 <code>layout</code> 文件让两个模板共享相同的结构。每个布局文件都应包含一个 <code>body</code> 变量，以显示相关模板的内容，否则不能正常显示模板。例如：</p><p><output>index.ejs</output></p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><output>layout.ejs</output></p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> body </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，所有其他模板都使用<code>layout</code>模板。您可以在最前面指定其他布局，或将其设置为<code>false</code>以禁用它。通过在顶部布局中包含更多布局模板，甚至可以构建复杂的嵌套结构。</p><h4 id="局部模版"><a href="#局部模版" class="headerlink" title="局部模版"></a>局部模版</h4><p>局部模板对于在模板之间共享组件很有用。典型示例包括页眉，页脚或侧边栏。您可能需要将局部文件放在单独的文件中，以使网站维护更加方便。例如：</p><p><output>partial/header.ejs</output></p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> config<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><output>index.ejs</output></p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'partial/header'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Home page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>My Site<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Home page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>您可以在局部模板中指定局部变量并使用。</p><p><output>partial/header.ejs</output></p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> title </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><output>index.ejs</output></p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'partial/header'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Home page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Home page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。本功能借鉴于 <a href="http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching">Ruby on Rails</a>，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。</p><p>它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">&lt;%- fragment_cache('header', function(){  return '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>';});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果您使用局部模板的话，可以更简单：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">&lt;%- partial('header', {}, {cache: true});<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>fragment_cache()</code> 将会缓存第一次的渲染结果，并在之后直接输出缓存的结果。因此只有在不同页面的渲染结果都相同时才应使用局部缓存。比如，在配置中启用了 <code>relative_link</code> 后不应该使用局部缓存，因为相对链接在每个页面可能不同。</p></blockquote><h3 id="Hexo-网站初步介绍"><a href="#Hexo-网站初步介绍" class="headerlink" title="Hexo 网站初步介绍"></a>Hexo 网站初步介绍</h3><p>我们先了解 Hexo 网站的架构：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">.</span>├── _config.yml├── package.json├── scaffolds├── <span class="token builtin class-name">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>_config.yml</code>：网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，可以在此配置大部分的参数。</li><li><code>package.json</code>：应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown renderer</a> 已默认安装，可以自由移除。</li><li><code>scaffolds</code>：<a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当新建文章时，Hexo 会根据 <code>scaffold</code> 来建立文件。Hexo 的模板是指在新建的文章文件中默认填充的内容。例如，如果修改 <code>scaffold/post.md</code> 中的 Front-matter 内容，那么每次新建一篇文章时都会包含这个修改。</li><li><code>source</code>：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：<a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</li></ol><p>可以在 <code>_config.yml</code> 或<a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config">备用配置文件</a> 中修改站点设置。</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="left">网站标题</td></tr><tr><td align="center">subtitle</td><td align="left">网站副标题</td></tr><tr><td align="center">description</td><td align="left">网站描述</td></tr><tr><td align="center">author</td><td align="left">您的名字</td></tr><tr><td align="center">language</td><td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans 和 zh-CN。</td></tr><tr><td align="center">timezone</td><td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td></tr></tbody></table><p>其中，<code>description</code> 主要用于 SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code> 参数用于主题显示文章的作者。</p><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><table><thead><tr><th align="center">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="center">url</td><td align="left">网址, must starts with http:// or https://</td><td align="left"></td></tr><tr><td align="center">root</td><td align="left">网站根目录</td><td align="left">url’s pathname</td></tr><tr><td align="center">permalink</td><td align="left">文章的 永久链接 格式</td><td align="left">:year/:month/:day/:title/</td></tr><tr><td align="center">permalink_defaults</td><td align="left">永久链接中各部分的默认值</td><td align="left"></td></tr><tr><td align="center">pretty_urls</td><td align="left">改写 permalink 的值来美化 URL</td><td align="left"></td></tr><tr><td align="center">pretty_urls.trailing_index</td><td align="left">是否在永久链接中保留尾部的 index.html，设置为 false 时去除</td><td align="left">true</td></tr><tr><td align="center">pretty_urls.trailing_html</td><td align="left">是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</td><td align="left"></td></tr></tbody></table><div class="w3-pale-green"><b>网站存放在子目录</b>：如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code>。</div><p>例如：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.htmlpretty_urls:  trailing_index: false# 此时页面的永久链接会变为 http://example.com/foo/bar/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更多的配置信息请移步 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a>。</p><h2 id="重构-landscape-主题"><a href="#重构-landscape-主题" class="headerlink" title="重构 landscape 主题"></a>重构 landscape 主题</h2><p>为了探讨如何从零开始构建 Hexo 博客，对 landscape 主题进行重构，具体见 <a href="https://github.com/xinetzone/xin/tags">xin/tags</a> v0.1 。接下来便以 v0.1 为基础重写 Hexo 主题。</p><p>为了 Hexo 可以正常使用，需要添加 Hexo 部署功能：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着修改网站的配置文件 <code>_config.yml</code>：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 道法自然subtitle: 主宰自我description: "利用 AI 开发一切有意思的东西"author: xinetzonelanguage: zh-CNtimezone: "Asia/Shanghai"# URL## Set your site url here. For example, if you use GitHub Page, ## set url as 'https://username.github.io/project'url: https://xinetzone.github.io/xinpermalink: /:year/:month/:day/:title/permalink_defaults:pretty_urls:  trailing_index: false # Set to false to remove trailing 'index.html' from permalinks  trailing_html: true # Set to false to remove trailing '.html' from permalinks# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link:  enable: true # Open external links in new tab  field: site # Apply to the whole site  exclude: ""filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight:  enable: false  line_number: true  auto_detect: false  tab_replace: ""  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: ""# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: ""  per_page: 12  order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports 'mtime', 'date', 'empty'updated_option: "mtime"# Pagination## Set per_page to 0 to disable paginationper_page: 12pagination_dir: page# Include / Exclude file(s)## include:/exclude: options only apply to the 'source/' folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: xin# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: 'git'  repo: git@github.com:xinetzone/xin.git  branch: gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了支持 rss/rss2 需要安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并在网站配置文件 <code>_config.yml</code> 下添加如下内容：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 添加 RSS 订阅支持## https://github.com/hexojs/hexo-generator-feed## npm install hexo-generator-feedfeed:  # Generate both atom and rss2 feeds  type:    - rss2    - atom  path:    - rss2.xml    - atom.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重构-partial-head-ejs"><a href="#重构-partial-head-ejs" class="headerlink" title="重构 _partial/head.ejs"></a>重构 <code>_partial/head.ejs</code></h3><p>对于一个网站，<code>&lt;head&gt;</code> 很重要，为此，我们首要重构 <code>_partial/head.ejs</code>。首先编写一些处理标题相关的代码：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">// _partial/head.ejs<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">    <span class="token keyword">let</span> title <span class="token operator">=</span> page<span class="token punctuation">.</span>title    <span class="token comment">// archives, category, tag pages title</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_archive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'archive_a'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            title <span class="token operator">+=</span> <span class="token string">': '</span> <span class="token operator">+</span> page<span class="token punctuation">.</span>year <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> page<span class="token punctuation">.</span>month        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            title <span class="token operator">+=</span> <span class="token string">': '</span> <span class="token operator">+</span> page<span class="token punctuation">.</span>year        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> page<span class="token punctuation">.</span>category    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'tag'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> page<span class="token punctuation">.</span>tag    <span class="token punctuation">}</span>    <span class="token comment">// final page title.</span>    <span class="token keyword">let</span> pageTitle <span class="token operator">=</span> title <span class="token operator">?</span> title <span class="token operator">+</span> <span class="token string">' | '</span> <span class="token operator">+</span> config<span class="token punctuation">.</span>title <span class="token operator">:</span> config<span class="token punctuation">.</span>title</span><span class="token delimiter punctuation">%&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里将网页 <code>page.title</code> 进行一些预处理，可以令其自适应 <code>_config.yml</code> 与 <code>themes/xin/_config.yml</code> 的 <code>title</code>。</p><p>最后，便可以定制一个 <code>&lt;head&gt;</code> 元素模板：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">// _partial/head.ejs...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'google-analytics'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, shrink-to-fit=no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> pageTitle </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">open_graph</span><span class="token punctuation">(</span><span class="token punctuation">{</span>twitter_id<span class="token operator">:</span> theme<span class="token punctuation">.</span>twitter<span class="token punctuation">,</span> fb_admins<span class="token operator">:</span> theme<span class="token punctuation">.</span>fb_admins<span class="token punctuation">,</span> fb_app_id<span class="token operator">:</span> theme<span class="token punctuation">.</span>fb_app_id<span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>feed<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">feed_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>rss<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">feed_tag</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>rss<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> </span><span class="token delimiter punctuation">%&gt;</span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'css/style'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面一一介绍 <code>&lt;head&gt;</code> 元素模板：</p><ol><li>第 5 行定义了 谷歌分析的模板（暂不展开）。</li><li>第 6 行设置视口自适应不同平台和屏幕。</li><li>第 7 行定义了页面标题，即 <code>&lt;title&gt;</code> 元素。</li><li>第 8 行插入 Open Graph 资源。</li><li>第 9~13 行，使用 <code>feed_tag</code> 辅助函数插入 RSS 链接。</li><li>第 14 行定义了 CSS 链接。</li></ol><p>可以参考如下示例理解 <code>feed_tag</code> 辅助函数：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">feed_tag</span><span class="token punctuation">(</span><span class="token string">'atom.xml'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alternate<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/atom.xml<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hexo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/atom+xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">feed_tag</span><span class="token punctuation">(</span><span class="token string">'rss.xml'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'RSS Feed'</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">'rss'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alternate<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/atom.xml<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RSS Feed<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/rss+xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>/* Defaults to hexo-generator-feed's config if no argument */<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">feed_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alternate<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/atom.xml<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hexo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/atom+xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hexo 提供辅助函数 <code>css</code> 用于载入 CSS 资源。语法：<code>&lt;%- css(path, ...) %&gt;</code>。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.css</code> 扩展名的话，也会自动加上。使用对象类型可以自定义 CSS 属性。示例如下：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'style.css'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/style.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'style.css'</span><span class="token punctuation">,</span> <span class="token string">'screen.css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/style.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/screen.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span> href<span class="token operator">:</span> <span class="token string">'style.css'</span><span class="token punctuation">,</span> integrity<span class="token operator">:</span> <span class="token string">'foo'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> href<span class="token operator">:</span> <span class="token string">'style.css'</span><span class="token punctuation">,</span> integrity<span class="token operator">:</span> <span class="token string">'foo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> href<span class="token operator">:</span> <span class="token string">'screen.css'</span><span class="token punctuation">,</span> integrity<span class="token operator">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/screen.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再回头看看那个有点奇怪的元数据 Open Graph。Open Graph Protocol(开放内容协议) 是一种新的 HTTP 头部标记，即这种协议可以让网页成为一个“富媒体对象”。用了 <code>meta property=og</code> 标签，就是你同意了网页内容可以被其他社会化网站引用等。</p><p>Hexo 提供了 Open Graph 的辅助函数用于插入 open graph 资源。语法：<code>&lt;%- open_graph([options]) %&gt;</code>。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">页面标题 (og:title)</td><td align="left">page.title</td></tr><tr><td align="left">type</td><td align="left">页面类型 (og:type)</td><td align="left">blog</td></tr><tr><td align="left">url</td><td align="left">页面网址 (og:url)</td><td align="left">url</td></tr><tr><td align="left">image</td><td align="left">页面图片 (og:image)</td><td align="left">内容中的图片</td></tr><tr><td align="left">site_name</td><td align="left">网站名称 (og:site_name)</td><td align="left">config.title</td></tr><tr><td align="left">description</td><td align="left">页面描述 (og:description)</td><td align="left">内容摘要或前 200 字</td></tr><tr><td align="left">twitter_card</td><td align="left">Twitter 卡片类型 (twitter:card)</td><td align="left">summary</td></tr><tr><td align="left">twitter_id</td><td align="left">Twitter ID (twitter:creator)</td><td align="left"></td></tr><tr><td align="left">twitter_site</td><td align="left">Twitter 网站 (twitter:site)</td><td align="left"></td></tr><tr><td align="left">google_plus</td><td align="left">Google+ 个人资料链接</td><td align="left"></td></tr><tr><td align="left">fb_admins</td><td align="left">Facebook 管理者 ID</td><td align="left"></td></tr><tr><td align="left">fb_app_id</td><td align="left">Facebook 应用程序 ID</td><td align="left"></td></tr></tbody></table><h3 id="关于资源文件夹"><a href="#关于资源文件夹" class="headerlink" title="关于资源文件夹"></a>关于资源文件夹</h3><p>如果我们的文章里面有图片，我们可以在 source 文件夹下建立一个统一的 images 文件夹来存放图片，但是如果有的文章有很多的资源文件如图片，我们可以通过设置该配置为 <code>true</code>，这样在<code>source</code>文件夹下创建文件的同时也会创建一个同名文件夹来存放相应的资源。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">post_asset_folder: true # 是否启动资源文件夹marked: # 保证资源的链接正确  prependRoot: true  postAsset: true  gfm: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设定多语言支持"><a href="#设定多语言支持" class="headerlink" title="设定多语言支持"></a>设定多语言支持</h3><p>为了添加多语言支持，需要修改网站配置文件 <code>_config.yml</code>：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># URL## Set your site url here. For example, if you use GitHub Page,## set url as 'https://username.github.io/project'url: https://xinetzone.github.io/xinpermalink: :lang/:year/:month/:day/:title/permalink_defaults:  lang: en-US # 设定默认<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了令网址具有唯一性，可以在配置文件 <code>_config.yml</code> 中加入如下内容并配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">## npm install hexo-abbrlink### https://github.com/rozbo/hexo-abbrlink# abbrlink configabbrlink:  alg: crc32      #support crc16(default) and crc32  rep: hex        #support dec(default) and hex  drafts: false   #(true)Process draft,(false)Do not process draft. false(default)   # Generate categories from directory-tree  # depth: the max_depth of directory-tree you want to generate, should &gt; 0  auto_category:     enable: true  #true(default)     depth:        #3(default)     over_write: false   auto_title: false #enable auto title, it can auto fill the title by path  auto_date: false #enable auto date, it can auto fill the date by time today  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.permalink: :layout/:lang/:abbrlink.html # :year/:month/:day/:title/permalink_defaults:  lang: en-US # 设定默认<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>Hexo 使用 <code>hexo-generator-search</code> 添加 <code>local-search</code>，需要在网站配置文件 <code>_config.yml</code> 新增如下内容：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">## Hexo使用hexo-generator-search添加local-searchsearch:  path: search.xml  field: post  content: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="支持代码行显示数字"><a href="#支持代码行显示数字" class="headerlink" title="支持代码行显示数字"></a>支持代码行显示数字</h3><p>为了支持代码行支持显示数字序号，可以添加文件 <code>themes/xin/source/css/xin-prism.css/</code>，并在 <code>themes/xin/layout/_partial/head.ejs</code> 中新增 CSS 引用。</p><h3 id="添加-W3-CSS-与-tab-切换-支持"><a href="#添加-W3-CSS-与-tab-切换-支持" class="headerlink" title="添加 W3.CSS 与 tab 切换 支持"></a>添加 W3.CSS 与 tab 切换 支持</h3><p>在 <code>themes/xin/layout/_partial/head.ejs</code> 中新增：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'https://xinetzone.github.io/w3css/4/w3.css'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'https://xinetzone.github.io/xinet-css/tabs.css'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> How To </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shlex --- 简单的词法分析</title>
      <link href="/dao/post/zh-CN/e45b79088298.html"/>
      <url>/dao/post/zh-CN/e45b79088298.html</url>
      
        <content type="html"><![CDATA[<p>参考自：<a href="https://docs.python.org/zh-cn/3.10/library/shlex.html#shlex.shlex.commenters">shlex — 简单的词法分析</a></p><p><code>shlex</code> 类使您可以轻松地为类似于 Unix Shell 的简单语法编写词法分析器。这对于编写迷你语言（例如，在 Python 应用程序的运行控制文件中）或解析带引号的字符串通常很有用。</p><h2 id="shlex-split-s-comments-False-posix-True"><a href="#shlex-split-s-comments-False-posix-True" class="headerlink" title="shlex.split(s, comments=False, posix=True)"></a><code>shlex.split(s, comments=False, posix=True)</code></h2><p>使用类似于 shell 的语法拆分字符串。如果<code>comments</code>为 <code>False</code>（默认值），则将禁用对给定字符串中的注释的解析（将 shlex 实例的 <code>commenters</code> 属性设置为空字符串）。默认情况下，此函数在 POSIX 模式下运行，但如果 <code>posix</code> 参数为 <code>False</code>，则使用非 POSIX 模式。</p><h2 id="shlex-join-split-command"><a href="#shlex-join-split-command" class="headerlink" title="shlex.join(split_command)"></a><code>shlex.join(split_command)</code></h2><p>连接列表 <code>split_command</code> 的标记并返回一个字符串。此函数是 <code>split</code> 的逆函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> shlex <span class="token keyword">import</span> join<span class="token keyword">print</span><span class="token punctuation">(</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'echo'</span><span class="token punctuation">,</span> <span class="token string">'-n'</span><span class="token punctuation">,</span> <span class="token string">'Multiple words'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><output>echo -n 'Multiple words'</output><p>返回的值将转义为 shell，以防止注入漏洞（请参阅 <code>quote</code>）。</p><h2 id="shlex-quote-s"><a href="#shlex-quote-s" class="headerlink" title="shlex.quote(s)"></a><code>shlex.quote(s)</code></h2><p>返回字符串的 shell 换码版本。返回的值是一个字符串，在无法使用列表的情况下，可以安全地用作 shell 命令行中的一个标记。</p><p>比如，下面的常用写法是不安全的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'somefile; rm -rf ~'</span>command <span class="token operator">=</span> <span class="token string">'ls -l {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>  <span class="token comment"># executed by a shell: boom!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><output>ls -l somefile; rm -rf ~</output><p><code>quote</code> 使您可以填补安全漏洞：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> shlex <span class="token keyword">import</span> quotecommand <span class="token operator">=</span> <span class="token string">'ls -l {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>quote<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>remote_command <span class="token operator">=</span> <span class="token string">'ssh home {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>quote<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>remote_command<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><output><div>ls -l 'somefile; rm -rf ~'</div><div>ssh home 'ls -l '"'"'somefile; rm -rf ~'"'"''</div></output><p>可以看出，那些可能造成漏洞的字符被转义了。</p><p>该引用与 UNIX shell 和 <code>split()</code> 兼容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> shlex <span class="token keyword">import</span> splitremote_command <span class="token operator">=</span> split<span class="token punctuation">(</span>remote_command<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>remote_command<span class="token punctuation">)</span>command <span class="token operator">=</span> split<span class="token punctuation">(</span>remote_command<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>remote_command<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><output><div>['ssh', 'home', "ls -l 'somefile; rm -rf ~'"]</div><div>['ls', '-l', 'somefile; rm -rf ~']</div></output><h2 id="class-shlex-shlex-instream-None-infile-None-posix-False-punctuation-chars-False"><a href="#class-shlex-shlex-instream-None-infile-None-posix-False-punctuation-chars-False" class="headerlink" title="class shlex.shlex(instream=None, infile=None, posix=False, punctuation_chars=False)"></a><code>class shlex.shlex(instream=None, infile=None, posix=False, punctuation_chars=False)</code></h2><p><code>shlex</code> 实例或子类实例是词法分析器对象。初始化参数（如果存在）指定从何处读取字符。它必须是具有<code>read</code>和<code>readline</code>方法的类似于文件/流的对象，或者是字符串。如果未提供任何参数，则输入将从<code>sys.stdin</code>中获取。第二个可选参数是文件名字符串，用于设置<code>infile</code>属性的初始值。如果省略了<code>instream</code>参数或等于<code>sys.stdin</code>，则第二个参数默认为<code>"stdin"</code>。<code>posix</code>参数定义操作模式：如果<code>posix</code>不为 true（默认值），则 <code>shlex</code> 实例将在兼容模式下运行。在 POSIX 模式下运行时，<code>shlex</code> 将尝试尽可能接近 POSIX shell 解析规则。<code>punctuation_chars</code> 参数提供了一种使行为更接近于实际 shell 解析方式的方法。这可以采用许多值：默认值<code>False</code>保留了在 Python 3.5 及更早版本中看到的行为。如果设置为<code>True</code>，则将解析字符<code>();&lt;&gt;|&amp;</code>：将这些字符的任何运行（考虑为标点符号）作为单个标记返回。如果设置为非空字符串，则这些字符将用作标点字符。出现在<code>punctuation_chars</code>中的<code>wordchars</code>属性中的任何字符都将从<code>wordchars</code>中删除。<code>punctuation_chars</code>只能在创建 <code>shlex</code> 实例时设置，以后不能修改。</p><h2 id="shlex-对象"><a href="#shlex-对象" class="headerlink" title="shlex 对象"></a>shlex 对象</h2><p><code>shlex</code> 实例具有以下方法：</p><p>暂更</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shlex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pySerial</title>
      <link href="/dao/post/zh-CN/d08d90d1f510.html"/>
      <url>/dao/post/zh-CN/d08d90d1f510.html</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://pyserial.readthedocs.io/en/latest/index.html">pySerial’s documentation</a></p><p>该模块封装了对串行端口（serial port）的访问。它提供了在 Windows，OSX，Linux，BSD（可能是任何POSIX兼容系统）和 IronPython 上运行的 Python 的后端。名为 <code>serial</code> 的模块会自动选择适当的后端。</p><h2 id="serial-tools-list-ports-comports-include-links-False"><a href="#serial-tools-list-ports-comports-include-links-False" class="headerlink" title="serial.tools.list_ports.comports(include_links=False)"></a><code>serial.tools.list_ports.comports(include_links=False)</code></h2><ul><li><code>include_links</code>（bool）–在指向串行端口的 <code>/dev</code> 下包含符号链接。</li><li>返回包含 <code>ListPortInfo</code> 对象的列表。此列表的顺序没有特殊含义。另请注意，即使对于同一设备，报告的字符串在平台和操作系统之间也不同。</li></ul><p>在 Linux，OSX 和 Windows 下，扩展信息将可用于 USB 设备（例如 <code>ListPortInfo.hwid</code> 字符串包含 <code>VID:PID</code>，<code>SER</code>（序列号），<code>LOCATION</code>（层次结构），这使它们可以通过 <code>grep()</code> 进行搜索。USB 的信息也可使用 <code>ListPortInfo</code> 的属性获取。比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> serial<span class="token punctuation">.</span>tools <span class="token keyword">import</span> list_portsdevices <span class="token operator">=</span> list_ports<span class="token punctuation">.</span>comports<span class="token punctuation">(</span><span class="token punctuation">)</span>devices<span class="token punctuation">,</span> devices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hwid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><output>([&lt;serial.tools.list_ports_common.ListPortInfo at 0x2a0ca0280a0&gt;,  &lt;serial.tools.list_ports_common.ListPortInfo at 0x2a0c8100940&gt;],'USB VID:PID=0403:6001 SER=A107QDSTA')</output><p>如果<code>include_links</code>为<code>True</code>，则检查 <code>/dev</code> 下的所有设备是否是到已知串行端口设备的链接。这些项将在其 <code>hwid</code> 字符串中包含 LINK。这意味着同一设备列出了两次，一次以其原始名称，一次以链接名称。</p><h2 id="serial-tools-list-ports-grep-regexp-include-links-False"><a href="#serial-tools-list-ports-grep-regexp-include-links-False" class="headerlink" title="serial.tools.list_ports.grep(regexp, include_links=False)"></a><code>serial.tools.list_ports.grep(regexp, include_links=False)</code></h2><ul><li><code>regexp</code> –正则表达式（请参阅标准库 <a href="https://docs.python.org/3/library/re.html#module-re">re</a>）</li><li>返回 <code>ListPortInfo</code> 对象的生成器，另请参见 <code>list_ports.comports()</code>。</li></ul><p>使用正则表达式搜索端口。搜索端口<code>name</code>，<code>description</code>和<code>hwid</code>（不区分大小写）。比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> port <span class="token keyword">in</span> list_ports<span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token string">'USB'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><output>COM6 - USB Serial Port (COM6)</output><h2 id="classserial-tools-list-ports-ListPortInfo"><a href="#classserial-tools-list-ports-ListPortInfo" class="headerlink" title="classserial.tools.list_ports.ListPortInfo"></a><code>classserial.tools.list_ports.ListPortInfo</code></h2><p>该对象保存有关串行端口的信息。它支持索引访问以实现向后兼容性，例如在<code>port, desc, hwid = info</code>中。</p><dl class="w3-pale-yellow w3-card-4 w3-padding"> <dt class="w3-pale-green w3-card-4">device</dt> <dd>完整的设备名称/路径，例如 <code>/dev/ttyUSB0</code>。这也是当被索引访问时作为第一个元素返回的信息。</dd> <dt class="w3-pale-green w3-card-4">name</dt> <dd>设备名称</dd> <dt class="w3-pale-green w3-card-4">description</dt> <dd>人类可读的描述或 n/a。这也是当通过索引访问时作为第二个元素返回的信息。</dd> <dt class="w3-pale-green w3-card-4">hwid</dt> <dd>技术说明或 n/a。这也是当通过索引访问时作为第三个元素返回的信息。</dd> <dt class="w3-pale-green w3-card-4">vid</dt> <dd>USB 供应商（Vendor）ID（整数，0~65535）。</dd> <dt class="w3-pale-green w3-card-4">pid</dt> <dd>USB 产品 ID（整数，0~65535）。</dd> <dt class="w3-pale-green w3-card-4">serial_number</dt> <dd>USB 的字符串序列号。</dd> <dt class="w3-pale-green w3-card-4">location</dt> <dd>USB设备位置字符串（“<code>&lt;bus&gt;-&lt;port&gt;[-&lt;port&gt;]…</code>”）</dd> <dt class="w3-pale-green w3-card-4">manufacturer</dt> <dd>USB 制造商字符串，由设备报告。</dd> <dt class="w3-pale-green w3-card-4">product</dt> <dd>USB 产品字符串，由设备报告。</dd> <dt class="w3-pale-green w3-card-4">interface</dt> <dd>界面特定的描述，例如 用于复合 USB 设备。</dd></dl><p>实现比较运算符，以便可以按<code>device</code>对 <code>ListPortInfo</code> 对象进行排序。字符串分为数字和文本组，因此顺序是“自然的”（即 <code>com1</code> &lt; <code>com2</code> &lt; <code>com10</code>）。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PySerial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Japronto</title>
      <link href="/dao/post/zh-CN/02c21906d831.html"/>
      <url>/dao/post/zh-CN/02c21906d831.html</url>
      
        <content type="html"><![CDATA[<p>Japronto 是一个全新的，为微服务量身打造的微框架。实现它的主要目标包含够快、可扩展和轻量化。的确它快的吓人，甚至远比 NodeJS 和 Go 还要快的多的多。要感谢 asyncio，让我可以同时编写同步和异步代码。</p>]]></content>
      
      
      <categories>
          
          <category> Web 微服务框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japronto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷茫的幼师与敏感的羚羊</title>
      <link href="/dao/post/zh-CN/4da3cf0b760f.html"/>
      <url>/dao/post/zh-CN/4da3cf0b760f.html</url>
      
        <content type="html"><![CDATA[<p>Lion：</p>]]></content>
      
      
      <categories>
          
          <category> 心之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design 项目说明</title>
      <link href="/dao/chaos/zh-CN/d2030769b2b9.html"/>
      <url>/dao/chaos/zh-CN/d2030769b2b9.html</url>
      
        <content type="html"><![CDATA[<p>本项目支持：</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://prismjs.com/">PrismJS</a> 高亮</li><li><input checked="" disabled="" type="checkbox"> ToDo List（待办事项），格式：</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [ ] 喝水 8 杯<span class="token list punctuation">-</span> [x] 跑步<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><input checked="" disabled="" type="checkbox"> 支持 Katex</li></ul><p>比如：</p><pre class="line-numbers language-latx" data-language="latx"><code class="language-latx">$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$&lt;section&gt;$$x^4 = 3$$&lt;/section&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试上传图片"><a href="#测试上传图片" class="headerlink" title="测试上传图片"></a>测试上传图片</h2><p>上传图片使用如下格式：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">测试图片</span>](<span class="token url">雷姆.png</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>雷姆.png</code> 的位置在该篇文章同名目录之下，即：</p><p><img src="/dao/chaos/zh-CN/d2030769b2b9/test.png" alt="文章同名目录之下存放图片"></p><p><span class="github-emoji"><span>📖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>显示效果：</p><p><img src="/dao/chaos/zh-CN/d2030769b2b9/%E9%9B%B7%E5%A7%86.png" alt="测试图片"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Coherent Semantic Attention for Image Inpainting</title>
      <link href="/dao/post/zh-CN/6ddedf0384e5.html"/>
      <url>/dao/post/zh-CN/6ddedf0384e5.html</url>
      
        <content type="html"><![CDATA[<p>论文翻译：<a href="https://arxiv.org/abs/1905.12384">Arxiv</a> |<a href="http://openaccess.thecvf.com/content_ICCV_2019/papers/Liu_Coherent_Semantic_Attention_for_Image_Inpainting_ICCV_2019_paper.pdf">ICCV 2019 paper</a>| <a href="#jump1">BibTex</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>最新的基于深度学习的方法已为修补图像的缺失区域这一艰巨的任务显示出令人振奋的结果。然而，由于局部像素的不连续性（discontinuity），现有方法经常产生具有模糊纹理（blurry textures）和扭曲结构（distorted<br>structures）的内容。从语义级别的角度来看，局部像素不连续性主要是因为这些方法忽略了语义相关性（semantic relevance）和孔区域（hole regions）的特征连续性（feature continuity）。为了解决这个问题，我们研究了人类在图片修复中的行为，并提出了一种基于深度生成模型的精细方法，该方法具有新颖的<strong>连贯语义注意</strong>（coherent semantic attention，CSA）层，它<span class="w3-green w3-card">不仅可以保留上下文结构，而且还能通过对孔特征之间的语义相关性进行建模，可以对缺失部分进行更有效的预测</span>。<span class="w3-pale-yellow w3-card">该任务分为粗（rough）修，精（refinement）修两个步骤，我们在 U-Net 架构下使用神经网络对每个步骤进行建模，其中 CSA 层被嵌入到精修步骤的编码器（encoder）中</span>。同时，我们进一步提出一致性损失（consistency loss）和特征补丁鉴别器（feature patch discriminator），以稳定网络训练过程并提升细节。在CelebA，Places2 和 Paris StreetView 数据集上进行的实验已验证了我们提出的方法在图像修复任务中的有效性，并且与现有的最新（state-of-the-art）方法相比，可以获得更高质量的图像（译者注：本论文源代码为：<a href="https://github.com/KumapowerLIU/CSA-inpainting">KumapowerLIU/CSA-inpainting</a>，代码重构于 <a href="https://github.com/xinetzone/CSA-inpainting" title="对源代码进行代码重构，且添加一些新的方法">xinetzone/CSA-inpainting</a>）。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>图像修补是合成合理假设的缺失或损坏部分的任务，可用于许多应用程序中，例如删除不需要的物体，完成被遮挡的区域，恢复损坏或损坏的部分。图像修复的核心挑战是保持全局语义结构并为缺失的区域生成逼真的纹理细节。</p><p>传统工作 [11, 1, 4, 5, 33] 大多研究纹理合成技术来解决孔填充问题。在 [4] 中，Barnes 等人提出了 Patch-Match 算法，该算法从孔边界迭代搜索最合适的补丁，以合成缺失的内容。Wilczkowiak等 [33] 采取进一步措施并检测所需的搜索区域以找到更好的匹配补丁。但是，这些方法缺乏对高级语义的理解，并且在重建这些局部独特的模式方面遇到了困难。相反，基于早期深度卷积神经网络的方法 [16, 22, 27, 26] 学习数据分布以捕获图像的语义信息。尽管这些方法可以实现合理的修复效果，但它们无法有效地利用上下文信息来生成孔的内容，从而导致结果中包含噪声模式。</p><p>最近的一些研究有效地利用了上下文的的信息，并获得了更好的修复效果。这些方法可以分为两种类型。第一种类型 [40, 35, 30] 利用空间注意力，将周围的图像特征作为参考来恢复缺失的区域。这些方法可以确保所生成内容与上下文信息的语义一致性。但是，它们仅关注矩形孔，结果显示像素不连续且具有语义鸿沟（请参见图1(b, c)）。第二种类型 [23, 39] 是对原始图像中的有效像素进行像素丢失的条件进行预测。这些方法可以适当地处理不规则的孔，但是生成的内容仍然遇到语义错误和边界伪影（artifacts）的问题（参见图 1(g, h)）。上述方法不能很好地工作的原因是因为它们忽略了所生成内容的语义相关性和特征连续性，这对于图像级别的局部像素连续性至关重要。</p><p>为了在居中和不规则情况下获得更好的图像修复效果，我们研究了图像修复中的人的行为，发现该过程涉及概念和绘画两个步骤，以保证图像的整体结构一致性和局部像素连续性。更具体地说，一个人首先观察图像的整体结构，并在构想过程中构思出缺失部分的内容，以便可以保持图像的整体结构一致性。然后在绘画过程中将内容的想法填充到实际图像中。在绘画过程中，总是从先前绘制的线条的末端节点继续绘制新线条和着色，这实际上确保了最终结果的局部像素连续性。</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/fig1.png" alt="图1. 我们的结果与 Contextual Attention[40]，Shift-net[35]，Partial Conv[23]和 Gated Conv[39]进行了比较。第一行，从左到右分别是：带中心遮罩的图像，Shift-net[35]，Contextual Attention[40]，我们的模型，Ground Truth。第二行从左到右分别是：带有不规则蒙版的图像，Partial Conv[23]，Gated Conv[39]，我们的模型，Ground Truth。图像尺寸为 256×256。"></p><p>受此过程的启发，我们提出了一个连贯的语义关注层（CSA），它以相似的过程填充了图像特征图的未知区域。<span class="w3-yellow w3-card">最初，使用已知区域中最相似的特征补丁来初始化未知区域中的每个未知特征补丁。此后，通过考虑相邻补丁的空间一致性来迭代优化它们。因此，第一步可以保证全局语义的一致性，而优化步骤可以保持局部特征的一致性。</span></p><p>具体而言，类似于[40]，我们将图像修复分为两个步骤。第一步是通过训练一个粗糙的网络来草拟丢失的内容而构建的。在编码器中具有 CSA 层的精修网络指导第二步以精修粗略的预测。为了使网络训练过程更加稳定并激励 CSA 层更好地工作，我们提出了<strong>一致性损失</strong>，不仅可以测量 VGG 特征层与 CSA 层之间的距离，还可以测量 VGG 特征层与解码器中 CSA 的对应层。同时，除了补丁识别器[17]，我们通过引入特征补丁识别器（feature<br>patch discriminator）改善了细节，该特征补丁识别器比常规的识别器更易于编写，更快和更稳定[25]。除了一致性损失外，重建损失和相对论平均 LS 对抗损失[20]被作为约束条件来指导我们的模型学习有意义的参数。</p><p>我们对标准数据集 CelebA[24]，Places2[43] 和 Paris StreetView[8] 进行实验。定性和定量测试均表明，我们的方法可以产生比现有方法更高质量的修复结果。（见图 1(d, i)）。</p><p>我们的贡献总结如下：</p><ul><li>我们提出了一种新颖的，连贯的语义关注层，以构造孔区域的深层特征之间的相关性。无论未知区域是不规则区域还是居中区域，我们的算法都可以实现 state-of-the-art 的修复效果。</li><li>为了提高 CSA 层的性能并确保训练的稳定性，我们引入一致性损失来指导 CSA 层和相应的解码器层学习 ground truth 的 VGG 特征。同时，设计并结合了特征补丁识别器，以实现更好的预测。</li><li>与 [40, 35, 23, 39] 相比，我们的方法可获得更高质量的结果，并生成更连贯的纹理。此外，即使修复任务分两个阶段完成，我们的整个网络也可以以端到端的方式进行训练。</li></ul><h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2. 相关工作"></a>2. 相关工作</h2><h3 id="2-1-Image-inpainting"><a href="#2-1-Image-inpainting" class="headerlink" title="2.1. Image inpainting"></a>2.1. Image inpainting</h3><p>在文献中，以前的图像修复研究通常可以分为两类：非学习修复（Non-learning inpainting）方法和学习修复（Learning inpainting）方法。前者是具有低级功能的传统基于扩散（diffusion-based）的方法或基于补丁（diffusion-based）的方法。后者学习图像的语义以完成修复任务，并训练深度卷积神经网络来推断缺失区域的内容。</p><p>非学习方法，例如 [11, 1, 3, 5, 6, 9, 15, 2, 32, 18, 34, 28, 12, 29] 通过传播邻近信息或从类似的背景补丁复制信息来填充缺失的区域。黄等[14] 将已知区域混合到目标区域中，以最大程度地减少不连续性。但是，搜索最匹配的已知区域是非常昂贵的操作。为了应对这一挑战，Barnes 等人[4] 提出了一种快速最近邻域算法，该算法促进了图像修复应用的发展。尽管非学习方法对于表面纹理合成非常有效，但它们无法生成语义上有意义的内容，并且不适合处理较大的缺失区域。</p><p>学习方法 [38, 22, 31, 37, 41, 7, 42] 通常使用深度学习和 GAN 策略来生成孔的像素。Context encoders[26]首先训练用于图像修补任务的深度神经网络，将对抗性训练[13]引入一种新颖的编码器-解码器管道，并输出缺失区域的预测。但是，它在生成精细细节纹理方面表现不佳。此后不久，Iizuka 等人[16]扩展这项工作并提出<br>局部和全局区分符，以改善修复效果。然而，这需要先前的处理步骤来在孔边界附近增强颜色连贯性。杨等[36]将上下文编码器[26]的结果作为输入，并逐渐增加纹理细节以获得高分辨率的预测。但是这种方法由于其优化过程而大大增加了计算成本。刘等 [23]更新每一层中的遮罩，并使用遮罩值重新标准化卷积权重，这确保了卷积滤波器将注意力集中在来自已知区域的有效信息上，以处理不规则的孔。Yu等[39]进一步建议使用门控卷积自动学习掩码，并与 SN-PatchGAN 鉴别器结合以实现更好的预测。但是，这些方法未明确考虑有效特征之间的相关性，因此会导致完整图像出现色差或不一致。</p><h3 id="2-2-Attention-based-image-inpainting"><a href="#2-2-Attention-based-image-inpainting" class="headerlink" title="2.2. Attention based image inpainting"></a>2.2. Attention based image inpainting</h3><p>近来，基于上下文和孔区域之间的关系的空间注意力通常用于图像修复任务。上下文注意力[40]提出了一个上下文注意力层，该层搜索与粗略预测具有最高相似性的背景补丁集合。严等人[35]介绍了一种由 <strong>移位操作</strong>（shift operation）和<strong>引导损失</strong>（guidance loss）驱动的 shift-net。移位操作推测编码器层中的上下文区域与解码器层中的关联孔区域之间的关系。宋等[30]介绍了一个补丁交换（patch-swap）层，它用上下文区域中最相似的补丁替换了特征图缺失区域内的每个补丁，并通过 VGG 网络提取了特征图。尽管[40]具有通过注意分数的融合来促进空间连贯性的空间传播层，但它无法对孔区域内部面片之间的相关性进行建模，这也是其他两种方法的缺点。为此，我们提出了解决此问题并取得更好结果的方法，这在第3节中进行了详细介绍。</p><h2 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h2><p>我们的模型包括两个步骤：粗糙修补和细化修补。如[40]中所述，这种体系结构有助于稳定训练并扩大感受野（receptive fields）范围。我们的修复系统的总体框架如图2所示。令 $I_{gt}$ 表示 ground truth 图像，$I_{in}$ 作为对粗略网络的输入。我们首先在粗糙的修复过程中获得了粗糙的预测 $I_p$。然后，带有 CSA 层的细化网络将 $I_p$ 和 $I_{in}$ 作为输入对，以输出最终结果 $I_r$。最后，patch 和特征 patch 判别器共同协作，以获得更高的分辨率 $I_r$。</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/fig2.png" alt="图2. 我们模型的架构。在优化网络中，我们以 32×32 的分辨率添加了 CSA 层。"></p><h3 id="3-1-Rough-inpainting"><a href="#3-1-Rough-inpainting" class="headerlink" title="3.1 Rough inpainting"></a>3.1 Rough inpainting</h3><p>粗略网络 $I_{in}$ 的输入是具有中心或不规则孔的 $3 \times 256 \times 256$ 图像，该图像被发送到粗略网络以输出粗略预测 $I_p$。我们的粗糙网络的结构与[17]中的生成网络相同，它由 $4\times 4$ 卷积和跳跃连接组成，以将来自编码器每一层和对应解码器层的特征连接起来。粗略网络经过明确的 $L_1$ 重建损失训练。</p><h3 id="3-2-Refinement-inpainting"><a href="#3-2-Refinement-inpainting" class="headerlink" title="3.2. Refinement inpainting"></a>3.2. Refinement inpainting</h3><h4 id="3-2-1-refinement-network"><a href="#3-2-1-refinement-network" class="headerlink" title="3.2.1 refinement network"></a>3.2.1 refinement network</h4><p>我们使用以 $I_{in}$ 为条件的 $I_p$ 作为预测最终结果 $I_r$ 的细化网络的输入。这种类型的输入会堆叠已知区域的信息，以敦促网络更快地捕获有效特征，这对于重建孔区域的内容至关重要。细化网络由编码器和解码器组成，其中类似于粗糙网络，也采用跳跃连接。在编码器中，每个层都由 $3\times 3$ 卷积和 $4\times 4$ 空洞卷积组成。$3\times 3$ 卷积保持相同的空间大小，同时通道数量加倍。这种大小的层可以提高获取深度语义信息的能力。$4\times 4$ 空洞卷积将空间大小减小一半，并保持相同的通道数。空洞卷积可以扩大感受野，从而可以防止过多的信息丢失。CSA 层嵌入在编码器的第四层中。解码器的结构与没有 CSA 层的编码器对称，并且所有 $4\times 4$ 卷积都是反卷积（deconvolution）。</p><h4 id="3-2-2-Coherent-Semantic-Attention"><a href="#3-2-2-Coherent-Semantic-Attention" class="headerlink" title="3.2.2 Coherent Semantic Attention"></a>3.2.2 Coherent Semantic Attention</h4><p>我们认为，仅考虑特征图中 $M$ 与 $\overline{M}$ 的关系来重建 $M$ 类似于 [40, 35, 30] 是不够的，因为忽略了生成 patch之间的相关性，这可能导致缺乏延展性以及最终结果中像素的连续性。</p><p>为了克服此限制，我们考虑了生成补丁之间的相关性，并提出了 CSA 层。我们以居中漏洞为例：CSA 层分两个阶段实施：搜索和生成。图3 说明了 CSA 层的操作，其中 $M$ 与 $\overline{M}$ 分别表示特征图中的缺失区域和已知区域。对于 $M(i \in [1,n])$（其中 $n$ 是补丁的个数）中的每个 $(1 \times 1)$ 生成补丁（generated patch）$m_i$，CSA 层在已知区域 $M$ 搜索最匹配的上下文补丁 $\overline{m_i}$ 以在搜索过程中初始化 $m_i$。然后，我们将 $\overline{m_i}$ 设置为主要部分，并将之前生成的所有补丁 $(m_{1} \cdots m_{i-1})$ 设置为次要部分，以在生成过程中恢复 $m_i$。为了测量两个部分的权重，采用了以下互相关度量：</p><p>$$D_{max_i} = \frac{\langle m_i,\overline{m_i} \rangle}{\lVert m_i \rVert \lVert \overline{m_i} \rVert} \tag{1}$$</p><p>$$D_{ad_i} = \frac{\langle m_i, m_{i-1} \rangle}{\lVert m_i \rVert \lVert m_{i-1} \rVert} \tag{2}$$</p><p>其中 $D_{max_i}$ 代表 $m_i$ 和上下文区域中最相似的补丁 $\overline{m_i}$ 之间的相似性， $D_{ad_i}$ 表示两个相邻生成的补丁之间的相似性。将 $D_{max_i}$ 和 $D_{ad_i}$ 分别归一化为上下文补丁的一部分和所有先前生成的补丁的一部分的权重。接下来，我们将详细描述这两个步骤。</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/fig3.png" alt="图3. CSA层的示意图"></p><p>首先，我们在孔 $M$ 中搜索每个生成的补丁 $m_i$ 中最相似的上下文补丁 $\overline{m_i}$，并使用 $\overline{m_i}$ 初始化 $m_i$。然后，将先前生成的补丁和最相似的上下文补丁合并以生成当前补丁。</p><p>Searching：我首先从 $\overline{M}$ 中提取出 Patch，并且 reshape 他们为卷积核大小，然后在 $M$ 上进行卷积。通过此操作，我们可以获得一个值向量，该值表示 $M$ 中的每个补丁与 $\overline{M}$ 中的所有补丁之间的互相关。在此基础上，对于每个生成的补丁 $m_i$，我们使用最相似的上下文补丁 $\overline{m_i}$ 对其进行初始化，并为下一个操作为其分配最大互相关值 $D_{max_i}$。Generating：$M$ 的左上方补丁被用作生成过程的初始补丁（在图3中用 $m_1$ 标记）。由于 $m_1$ 没有先前的补丁，因此 $D_{ad_1}$ 为 $0$，我们直接将 $m_1$ 替换为 $\overline{m_1}$，即 $m_1 = \overline{m_1}$。虽然下一个补丁 $m_2$ 具有先前的补丁 $m-1$ 作为附加参考，但是我们因此将 $m_1$ 视为卷积滤波器，以测量 $m_1$ 与 $m_2$ 之间的互相关度量 $D_{ad_2}$。然后，将 $D_{ad_2}$ 和 $D_{max_2}$ 合并并归一化分别为 $m_1$ 和 $\overline{m_2}$ 的权重，以生成 $m_2$ 的新值，$$m_2 =\frac{D_{ad_2}}{D_{ad_2} + D_{max_2}} \times m_1 + \frac{D_{max_2}}{D_{ad_2} + D_{max_2}} \times \overline{m_2}$$。总而言之，从 $m_1$ 到 $m_n$，生成过程可以总结为：</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/eq3.png"></p><p>如等式3 所示，生成操作是一个迭代过程，每个 $m_i$ 都包含 $\overline{m_i}$ 和 $(m_1 \cdots m_{i-1})$ 的信息，当我们计算 $m_i$ 和 $m_{i-1}$之间的 $D_{adi_}$ 时，$m_i$ 和 $(m_1 \cdots m_{i-1})$ 之间的相关性被全部考虑。并且由于 $D_{adi_}$ 值的范围是 $0$ 到 $1$，因此当前生成的补丁和先前生成的补丁之间的相关性随着距离的增加而减小。基于等式3，我们得到一个注意图 $A_i$，它针对 $m_i$ 记录了 $\frac{D_{max_i}}{D_{adi_}+D_{max_i}}$ 和 $\frac{D_{ad_i}}{D_{adi_}+D_{max_i}} \times A_{i-1}$，然后从 $A_1$ 到 $A_n$ 形成注意力矩阵，最后将 $\overline{M}$ 中提取的色块重新用作反卷积滤波器以重建 $M$。算法1 中显示了 CSA 层的过程。</p><p>为了解释 CSA 层，我们在图4 中可视化了一个像素的注意力图，其中红色正方形标记了像素的位置，背景是我们修复的结果，深红色表示较大的关注值，浅蓝色表示较小的注意值。</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/al1.png"></p><h3 id="3-3-Consistency-loss"><a href="#3-3-Consistency-loss" class="headerlink" title="3.3. Consistency loss"></a>3.3. Consistency loss</h3><p>一些方法[27, 23]使用感知损失（perceptual loss）[19]来提高网络的识别能力。但是，感知损失不能直接优化指定的卷积层，这可能会误导 CSA 层的训练过程。此外，感知损失不能确保 CSA 层之后的特征图与解码器中相应层之间的一致性。</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/fig4.png" alt="图4.注意图的可视化。深红色表示注意值大，而浅蓝色表示注意值小。"></p><p>然后，我们重新设计感知损失的形式，并提出一致性损失来解决此问题。如图2所示，我们使用 ImageNet 预训练的 VGG-16 提取原始图像中的高级特征空间。接下来，对于 $M$ 中的任何位置，我们将特征空间分别设置为解码器中 CSA 层和 CSA 对应层的目标，以计算 $L_2$ 距离。为了匹配特征图的形状，我们采用 VGG-16 的 4_3 层作为一致性损失。一致性损失定义为：</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/eq4.png"></p><p>其中 $\Phi_n$ 是 VGG-16 中选定层的激活图。$CSA(.)$ 表示 CSA 层之后的特征，$CSA_d(.)$ 是解码器中的相应特征。指导损失类似于我们在[35]中提出的一致性损失。他们将缺少零件的真实编码器特征视为稳定训练的指导。然而，通过移位网提取 ground true 特征是一项昂贵的操作，并且移位网的语义理解能力不如 VGG 网络。而且，它不能同时优化编码器和解码器的特定卷积层。总而言之，我们的一致性损失更适合我们的要求。</p><h3 id="3-4-Feature-Patch-Discriminator"><a href="#3-4-Feature-Patch-Discriminator" class="headerlink" title="3.4. Feature Patch Discriminator"></a>3.4. Feature Patch Discriminator</h3><p>先前的图像修复网络始终使用其他本地鉴别器来改善结果。但是，局部鉴别器不适用于不规则的孔，该孔可以具有任何形状和任何位置。由 Gated Conv[39]，Markovian Gans[21] 和 SRFeat[25]推动，我们开发了一种特征补丁识别器，通过检查特征图来区分完整图像和原始图像。如图5所示，我们使用 VGG-16 在 pool3 层之后提取特征图，然后将该特征图作为几个下采样层的输入以捕获 Markovain 补丁的特征统计信息[21]。最终，我们直接在此特征图中计算对抗损失，因为此特征图中每个点的接受域仍可以覆盖整个输入图像。我们的特征补丁鉴别器结合了传统特征鉴别器[25]和补丁鉴别器[17]的优点，不仅在训练过程中快速稳定，而且使精炼网络合成了更有意义的高频细节。</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/fig5.png" alt="图5.我们的特征补丁识别器网络的体系结构。卷积层上方的数字表示特征图的形状。"></p><p>除了特征色块鉴别器外，我们使用 $70\times 70$ 色块鉴别器通过类似于[25]的检查其像素值来区分 $I_r$ 和 $I_{gt}$ 图像。同时，我们使用相对论平均LS对抗损失[20]作为判别器。这种损失可以帮助精炼网络从对抗训练中生成的数据和实际数据的梯度中受益，这对于训练的稳定性是有利的。细化网络的 GAN 损耗项 $D_R$ 和鉴别器的损耗函数 $D_F$ 定义为：</p><p><img src="/dao/post/zh-CN/6ddedf0384e5/eq5.png"></p><p>其中 $D$ 代表鉴别符，$\mathbb{E}[.]$ 代表对小批处理中所有 real/fake 数据取平均值的操作。</p><h3 id="3-5-Objective"><a href="#3-5-Objective" class="headerlink" title="3.5. Objective"></a>3.5. Objective</h3><p>按照[35]，我们使用 $L_1$ 距离作为重构损失，以保证约束 $I_p$ 和 $I_r$ 应该近似于真实图像：</p><p>$$L_{re} = \lVert I_p - I_{gt} \rVert_1 + \lVert I_r - I_{gt} \rVert_1 \tag{7}$$</p><p>考虑到一致性，对抗性和重建损失，我们的优化网络和粗糙网络的总体目标定义为：</p><p>$$L = \lambda_r L_{re} +\lambda_c L_c + \lambda_d D_R \tag{8}$$</p><p>其中$\lambda_r, \lambda_c, \lambda_d$ 分别是重构，一致性和对抗性损失的权衡参数。</p><h4 id="训练参数"><a href="#训练参数" class="headerlink" title="训练参数"></a>训练参数</h4><ul><li>$lr=2e-4$</li><li>$\beta_1 = 0.5$</li><li>$\lambda_r = 1$</li><li>$\lambda_c = 0.01$</li><li>$\lambda_d = 0.002$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML &lt;input type=&quot;file&quot;&gt;</title>
      <link href="/dao/post/zh-CN/1b67f6bcbbd0.html"/>
      <url>/dao/post/zh-CN/1b67f6bcbbd0.html</url>
      
        <content type="html"><![CDATA[<p><code>type="file"</code> 的<code>&lt;input&gt;</code>元素使用户可以从设备存储中选择一个或多个文件。选择后，可以使用<a href="https://developer.mozilla.org/en-US/docs/Learn/Forms">表单提交</a>将文件上载到服务器，或使用 JavaScript 代码和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications">File API</a> 进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html-input </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CherryPy 源码解析</title>
      <link href="/dao/post/zh-CN/7a7ca54db5c1.html"/>
      <url>/dao/post/zh-CN/7a7ca54db5c1.html</url>
      
        <content type="html"><![CDATA[<h2 id="cherrypy-process-wspbus-Bus"><a href="#cherrypy-process-wspbus-Bus" class="headerlink" title="cherrypy.process.wspbus.Bus"></a>cherrypy.process.wspbus.Bus</h2><p><code>cherrypy.process.wspbus.Bus</code> 处理用于 HTTP 站点部署的状态机（state-machine）和 Messenger。</p><p>即使同一频道上的其他监听器失败，也可以确保调用给定频道的所有监听器。记录每个失败，但是执行继续到下一个侦听器。停止从侦听器内部进行所有处理的唯一方法是提高 SystemExit 并停止整个服务器。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CherryPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CherryPy 部署</title>
      <link href="/dao/post/zh-CN/5c324514f254.html"/>
      <url>/dao/post/zh-CN/5c324514f254.html</url>
      
        <content type="html"><![CDATA[<p>CherryPy 独立存在，但作为应用程序服务器，它通常位于共享或复杂的环境中。因此，在反向代理后面运行 CherryPy 或使用其他服务器托管应用程序的情况并不少见。</p><p>多年来，CherryPy 的服务器已被证明可靠且速度足够快。如果您收到的访问量是平均水平，那么它就可以很好地完成自己的任务。尽管如此，通常还是将静态内容的提供委托给功能更强大的服务器，例如 <a href="http://nginx.org/">nginx</a> 或 CDN。</p><h2 id="Run-as-a-daemon"><a href="#Run-as-a-daemon" class="headerlink" title="Run as a daemon"></a>Run as a daemon</h2><p>CherryPy 使您可以使用传统的双叉（double-fork）轻松地将当前流程与父环境脱钩：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>process<span class="token punctuation">.</span>plugins <span class="token keyword">import</span> Daemonizerd <span class="token operator">=</span> Daemonizer<span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">)</span>d<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.cherrypy.org/en/latest/extend.html#busplugins">engine plugin</a> 仅在提供 <code>fork()</code> 的 Unix 和类似系统上可用。</p><p>如果在派生的子代中发生启动错误，则父进程的返回代码仍将为 <code>0</code>。初始守护进程中的错误仍将返回正确的退出代码，但派生后的错误将不会返回。因此，如果您使用此插件进行守护进程，请不要使用返回码作为该过程是否已完全启动的准确指示。实际上，该返回码仅指示该进程是否成功完成了第一个派生。</p><p>插件采用可选参数来重定向标准流：<code>stdin</code>，<code>stdout</code> 和 <code>stderr</code>。默认情况下，所有这些都重定向到 <code>/dev/null</code>，但是您可以随意将它们发送到日志文件或其他地方。</p><p class="w3-pale-red">您应该小心，不要在插件运行之前启动任何线程。如果这样做，插件将发出警告，因为“...在 fork() 调用与 exec 函数调用之间需要某些资源的调用函数的效果未定义”（<a href="http://www.opengroup.org/onlinepubs/000095399/functions/fork.html">ref</a>）。因此，服务器插件以优先级75运行（启动工作线程），该优先级高于守护程序的默认优先级 65。</p><h2 id="Run-as-a-different-user"><a href="#Run-as-a-different-user" class="headerlink" title="Run as a different user"></a>Run as a different user</h2><p>使用此 <a href="https://docs.cherrypy.org/en/latest/extend.html#busplugins">engine plugin</a> 以 root 用户身份启动 CherryPy 网站（例如，在特权端口（如 80）上侦听），然后将特权降低到更受限制的位置。</p><p>此插件的“start”侦听器的优先级略高于 <code>server.start</code> 的优先级，以便于最常见的使用：从低端口（需要 root）启动，然后移交给其他用户。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DropPrivileges<span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">,</span> uid<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> gid<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="PID-files"><a href="#PID-files" class="headerlink" title="PID files"></a>PID files</h2><p>PIDFile 引擎插件非常简单：它在启动时将进程 ID 写入文件，并在退出时将其删除。您必须提供“pidfile”参数，最好是绝对路径：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">PIDFile<span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">,</span> <span class="token string">'/var/run/myapp.pid'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Systemd-socket-activation"><a href="#Systemd-socket-activation" class="headerlink" title="Systemd socket activation"></a>Systemd socket activation</h2><p>套接字激活是一项 systemd 功能，它允许设置系统，以便 systemd 可以坐在端口上并“on demand”启动服务（有点像 inetd 和 xinetd 一样）。</p><p>CherryPy 具有内置的套接字激活支持，如果从 systemd 服务文件运行，它将检测 <strong>LISTEN_PID</strong> 环境变量，以知道应将 fd 3 视为传递的套接字。</p><p>要了解有关套接字激活的更多信息，请访问：<a href="http://0pointer.de/blog/projects/socket-activation.html">http://0pointer.de/blog/projects/socket-activation.html</a>。</p><h2 id="Control-via-Supervisord"><a href="#Control-via-Supervisord" class="headerlink" title="Control via Supervisord"></a>Control via Supervisord</h2><p><a href="http://supervisord.org/">Supervisord</a> 是一个功能强大的过程控制和管理工具，可以围绕过程监视执行许多任务。</p><p>以下是您的 CherryPy 应用程序的简单supervisor配置。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[unix_http_server]file=/tmp/supervisor.sock[supervisord]logfile=/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log)logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)logfile_backups=10           ; (num of main logfile rotation backups;default 10)loglevel=info                ; (log level;default info; others: debug,warn,trace)pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)nodaemon=false               ; (start in foreground if true;default false)minfds=1024                  ; (min. avail startup file descriptors;default 1024)minprocs=200                 ; (min. avail process descriptors;default 200)[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface[supervisorctl]serverurl=unix:///tmp/supervisor.sock[program:myapp]command=python server.pyenvironment=PYTHONPATH=.directory=.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这可以通过 <code>server.py</code> 模块作为应用程序入口点来控制您的服务器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span>cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'server.socket_port'</span><span class="token punctuation">:</span> <span class="token number">8090</span><span class="token punctuation">,</span>                        <span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                        <span class="token string">'log.access_file'</span><span class="token punctuation">:</span> <span class="token string">'./access.log'</span><span class="token punctuation">,</span>                        <span class="token string">'log.error_file'</span><span class="token punctuation">:</span> <span class="token string">'./error.log'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要考虑配置（假设配置已保存在名为 <code>supervisor.conf</code> 的文件中）：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ supervisord -c supervisord.conf$ supervisorctl update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，您可以将浏览器指向 <code>http://localhost:8090/ </code>，它将显示 Hello World!。</p><p>要停止 supervisor，请键入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ supervisorctl shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显然，这将关闭您的应用程序。</p><h3 id="SSL-support"><a href="#SSL-support" class="headerlink" title="SSL support"></a>SSL support</h3><p>您可能要使用&nbsp;<a href="https://www.ssllabs.com/ssltest/index.html">Qualys, Inc</a> 的服务来测试服务器的 SSL。</p><p>CherryPy 可以使用 SSL 加密连接以创建 https 连接。这样可以确保您的网络流量安全。这是如何做。</p><ol><li>生成私钥。我们将使用 openssl 并遵循 <a href="https://www.openssl.org/docs/HOWTO/keys.txt">OpenSSL Keys HOWTO</a>。</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ openssl genrsa -out privkey.pem 2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以创建需要使用密码的密钥，也可以创建没有密码的密钥。使用密码保护私钥更为安全，但是每次使用密钥时都需要输入密码。例如，启动或重新启动CherryPy服务器时，您可能必须输入密码。根据您的设置，这可能可行，也可能不可行。</p><p>如果要输入密码，请将-aes128，-aes192或-aes256开关之一添加到上述命令。您不应该使用任何DES，3DES或SEED算法来保护密码，因为它们不安全。</p><p>SSL实验室建议使用2048位RSA密钥以提高安全性（请参阅最后的参考部分）。</p><p>2.生成证书。我们将使用 openssl 并遵循 <a href="https://www.openssl.org/docs/HOWTO/certificates.txt">OpenSSL Certificates HOWTO</a>。让我们从一个自签名证书开始进行测试：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ openssl req -new -x509 -days 365 -key privkey.pem -out cert.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，openssl 会问您一系列问题。您可以输入任何适用的值，或将大多数字段保留为空白。您必须填写的一个字段是“Common Name”：输入用于访问您的网站的主机名。如果您只是创建要在自己的计算机上进行测试的证书，并且通过在浏览器中键入“localhost”来访问服务器，请输入通用名称“localhost”。</p><ol start="3"><li><p>确定您要使用 Python 的内置 SSL 库还是 pyOpenSSL 库。CherryPy 都支持。</p><ul><li>内置的。 要使用 Python 的内置 SSL，请将以下行添加到 CherryPy 配置中：<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cherrypy.server.ssl_module = 'builtin'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>pyOpenSSL。因为在首次创建 CherryPy 时 Python 没有内置的 SSL 库，所以默认设置是使用 pyOpenSSL。要使用它，您需要安装它（我们建议您先安装 cython）：</li></ul><p> ``sh<br> $ pip install cython, pyOpenSSL</p> <pre class="line-numbers language-none"><code class="language-none">4. 在 CherryPy 配置中添加以下行，以指向您的证书文件：```pythoncherrypy.server.ssl_certificate = "cert.pem"cherrypy.server.ssl_private_key = "privkey.pem"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果手边有证书链，也可以指定它：</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ssl_certificate_chain <span class="token operator">=</span> <span class="token string">"certchain.perm"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>正常启动 CherryPy 服务器。请注意，如果您在本地调试和/或使用自签名证书，则浏览器可能会向您显示安全警告。</li></ol><h2 id="WSGI-servers"><a href="#WSGI-servers" class="headerlink" title="WSGI servers"></a>WSGI servers</h2><h3 id="Embedding-into-another-WSGI-framework"><a href="#Embedding-into-another-WSGI-framework" class="headerlink" title="Embedding into another WSGI framework"></a>Embedding into another WSGI framework</h3><p>尽管 CherryPy 带有非常可靠且足够快的 HTTP 服务器，但是您可能希望将 CherryPy 应用程序集成到其他框架中。为此，我们将受益于 <a href="https://www.python.org/dev/peps/pep-0333"><strong>PEP 333</strong></a> 和 <a href="https://www.python.org/dev/peps/pep-3333"><strong>PEP 3333</strong></a> 中定义的 WSGI 接口。</p><p>请注意，在将 CherryPy 嵌入第三方 WSGI 服务器中时，应遵循一些基本规则：</p><ul><li>如果您依赖发布的“main”channel（就像发生在 CherryPy 的 mainloop 中一样），则应该找到一种在其他框架的 mainloop 中发布到该channel的方法。</li><li>启动 CherryPy 的引擎。这将发布到总线的“start”通道。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>停止 CherryPy 的引擎。 这将发布到总线的“stop”通道。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不要调用 <code>cherrypy.engine.block()</code>。</li><li>禁用内置的 HTTP 服务器，因为它将不被使用。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>禁用 <code>autoreload</code>。通常其他框架对此反应不佳，或者有时会提供相同的功能。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>禁用 CherryPy 信号处理。可能不需要这样做，这取决于其他框架如何处理它们。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 <code>"embedded"</code> 环境配置方案。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'environment'</span><span class="token punctuation">:</span> <span class="token string">'embedded'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本质上，这将禁用以下功能：</p><ul><li>Stdout logging</li><li>Autoreloader</li><li>Configuration checker</li><li>Headers logging on error</li><li>Tracebacks in error</li><li>Mismatched params error during dispatching</li><li>Signals (SIGHUP, SIGTERM)</li></ul><h3 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h3><p>您可以按照以下方式使用&nbsp;<a href="http://www.tornadoweb.org/">tornado</a> HTTP 服务器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> tornado    <span class="token keyword">import</span> tornado<span class="token punctuation">.</span>httpserver    <span class="token keyword">import</span> tornado<span class="token punctuation">.</span>wsgi    <span class="token comment"># our WSGI application</span>    wsgiapp <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Disable the autoreload which won't play well</span>    cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment"># let's not start the CherryPy HTTP server</span>    cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># use CherryPy's signal handling</span>    cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Prevent CherryPy logs to be propagated</span>    <span class="token comment"># to the Tornado logger</span>    cherrypy<span class="token punctuation">.</span>log<span class="token punctuation">.</span>error_log<span class="token punctuation">.</span>propagate <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token comment"># Run the engine but don't block on it</span>    cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Run thr tornado stack</span>    container <span class="token operator">=</span> tornado<span class="token punctuation">.</span>wsgi<span class="token punctuation">.</span>WSGIContainer<span class="token punctuation">(</span>wsgiapp<span class="token punctuation">)</span>    http_server <span class="token operator">=</span> tornado<span class="token punctuation">.</span>httpserver<span class="token punctuation">.</span>HTTPServer<span class="token punctuation">(</span>container<span class="token punctuation">)</span>    http_server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>    <span class="token comment"># Publish to the CherryPy engine as if</span>    <span class="token comment"># we were using its mainloop</span>    tornado<span class="token punctuation">.</span>ioloop<span class="token punctuation">.</span>PeriodicCallback<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>publish<span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    tornado<span class="token punctuation">.</span>ioloop<span class="token punctuation">.</span>IOLoop<span class="token punctuation">.</span>instance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Twisted"><a href="#Twisted" class="headerlink" title="Twisted"></a>Twisted</h3><p>您可以按照以下方式使用&nbsp;<a href="https://twistedmatrix.com/">Twisted</a> HTTP 服务器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>web<span class="token punctuation">.</span>wsgi <span class="token keyword">import</span> WSGIResource<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet <span class="token keyword">import</span> reactor<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet <span class="token keyword">import</span> task<span class="token comment"># Our CherryPy application</span><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token comment"># Create our WSGI app from the CherryPy application</span>wsgiapp <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Configure the CherryPy's app server</span><span class="token comment"># Disable the autoreload which won't play well</span>cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># We will be using Twisted HTTP server so let's</span><span class="token comment"># disable the CherryPy's HTTP server entirely</span>cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># If you'd rather use CherryPy's signal handler</span><span class="token comment"># Uncomment the next line. I don't know how well this</span><span class="token comment"># will play with Twisted however</span><span class="token comment">#cherrypy.engine.signals.subscribe()</span><span class="token comment"># Publish periodically onto the 'main' channel as the bus mainloop would do</span>task<span class="token punctuation">.</span>LoopingCall<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>publish<span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment"># Tie our app to Twisted</span>reactor<span class="token punctuation">.</span>addSystemEventTrigger<span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">,</span> <span class="token string">'startup'</span><span class="token punctuation">,</span> cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>start<span class="token punctuation">)</span>reactor<span class="token punctuation">.</span>addSystemEventTrigger<span class="token punctuation">(</span><span class="token string">'before'</span><span class="token punctuation">,</span> <span class="token string">'shutdown'</span><span class="token punctuation">,</span> cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>exit<span class="token punctuation">)</span>resource <span class="token operator">=</span> WSGIResource<span class="token punctuation">(</span>reactor<span class="token punctuation">,</span> reactor<span class="token punctuation">.</span>getThreadPool<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wsgiapp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，我们是如何将总线方法附加到 Twisted 自己的生命周期的。</p><p>将该代码保存到名为 <code>cptw.py</code> 的模块中，然后如下运行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ twistd -n web --port 8080 --wsgi cptw.wsgiapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h3><p>您可以按照以下方式使用&nbsp;<a href="http://projects.unbit.it/uwsgi/">uwsgi</a> HTTP 服务器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token comment"># Our CherryPy application</span><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span>cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>wsgiapp <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其保存到一个名为 <code>mymod.py</code> 的 Python 模块中，并如下运行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ uwsgi --socket 127.0.0.1:8080 --protocol=http --wsgi-file mymod.py --callable wsgiapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Virtual-Hosting"><a href="#Virtual-Hosting" class="headerlink" title="Virtual Hosting"></a>Virtual Hosting</h2><p>CherryPy 支持虚拟主机。它是通过一个调度程序来完成的，该调度程序根据请求的域来定位适当的资源。</p><p>下面是一个简单的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>app1 <span class="token operator">=</span> App1<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>app2 <span class="token operator">=</span> App2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App1</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hello world from app1"</span><span class="token keyword">class</span> <span class="token class-name">App2</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hello world from app2"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    hostmap <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'company.com:8080'</span><span class="token punctuation">:</span> <span class="token string">'/app1'</span><span class="token punctuation">,</span>        <span class="token string">'home.net:8080'</span><span class="token punctuation">:</span> <span class="token string">'/app2'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    config <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'request.dispatch'</span><span class="token punctuation">:</span> cherrypy<span class="token punctuation">.</span>dispatch<span class="token punctuation">.</span>VirtualHost<span class="token punctuation">(</span><span class="token operator">**</span>hostmap<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'/'</span><span class="token punctuation">:</span> config<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此示例中，我们声明两个域及其端口：</p><ul><li><code>company.com:8080</code></li><li><code>home.net:8080</code></li></ul><p>多亏了 <code>cherrypy.dispatch.VirtualHost</code> 调度程序，我们告诉 CherryPy 当请求到达时要调度到哪个应用程序。调度程序查找请求的域并调用相应的应用程序。</p><p>要测试此示例，只需将以下规则添加到您的 <code>hosts</code> 文件中：</p><pre class="line-numbers language-hosts" data-language="hosts"><code class="language-hosts">127.0.0.1       company.com127.0.0.1       home.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Reverse-proxying"><a href="#Reverse-proxying" class="headerlink" title="Reverse-proxying"></a>Reverse-proxying</h2><p>nginx 是一种快速，现代化的 HTTP 服务器，占地面积小。作为对诸如 CherryPy 之类的应用程序服务器的反向代理，它是一种流行的选择。</p><p>本节将不介绍 nginx 提供的全部功能。相反，它只会为您提供一个基本的配置，可以作为一个很好的起点。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> apps</span> <span class="token punctuation">{</span>   <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8080</span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8081</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">gzip_http_version</span> 1.0</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_proxied</span>      any</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_min_length</span>   <span class="token number">500</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_disable</span>      <span class="token string">"MSIE [1-6]\."</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_types</span>        text/plain text/xml text/css                  text/javascript                  application/javascript</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>   <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">server_name</span>  www.example.com</span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">access_log</span>  /app/logs/www.example.com.log combined</span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">error_log</span>  /app/logs/www.example.com.log</span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">location</span> ^~ /static/</span>  <span class="token punctuation">{</span>      <span class="token directive"><span class="token keyword">root</span> /app/static/</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>      <span class="token directive"><span class="token keyword">proxy_pass</span>         http://apps</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">proxy_redirect</span>     <span class="token boolean">off</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">proxy_set_header</span>   Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">proxy_set_header</span>   X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">proxy_set_header</span>   X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">proxy_set_header</span>   X-Forwarded-Host <span class="token variable">$server_name</span></span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑此配置以匹配您自己的路径。然后，将此配置保存到 <code>/etc/nginx/conf.d/</code> 下的文件中（假设Ubuntu）。文件名无关。然后运行以下命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ sudo service nginx stop$ sudo service nginx start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>希望这足以将达到 nginx 前端的请求转发到您的 CherryPy 应用程序。<code>upstream</code> 块定义了 CherryPy 实例的地址。</p><p>它表明您可以在两个应用程序服务器之间进行负载平衡。请参阅 nginx 文档以了解如何实现。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> apps</span> <span class="token punctuation">{</span>   <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8080</span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8081</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>稍后，此块用于定义反向代理部分。</p><p>现在，让我们看一下我们的应用程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'server.socket_port'</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>        <span class="token string">'tools.proxy.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'tools.proxy.base'</span><span class="token punctuation">:</span> <span class="token string">'http://www.example.com'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您运行此代码的两个实例，在 nginx 部分中定义的每个端口上运行一个实例，您将能够通过 nginx 进行的负载平衡来访问这两个实例。</p><p>注意我们如何定义代理工具。它不是强制性的，仅用于让 CherryPy 请求知道真实客户的地址。否则，它将只知道 nginx 自己的地址。这在日志中最明显。</p><p><code>base</code> 属性应与 Nginx 配置的 <code>server_name</code> 部分匹配。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CherryPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CherryPy 插件</title>
      <link href="/dao/post/zh-CN/8432efb27024.html"/>
      <url>/dao/post/zh-CN/8432efb27024.html</url>
      
        <content type="html"><![CDATA[<p>CherryPy 确实是一个开放框架，您可以在服务器端或根据每个请求随意扩展和插入新功能。无论哪种方式，CherryPy 都可以帮助您通过简单的模式来构建应用程序并支持体系结构。</p><h2 id="服务器的函数"><a href="#服务器的函数" class="headerlink" title="服务器的函数"></a>服务器的函数</h2><p>CherryPy 可以视为 HTTP 库，也可以视为 Web 应用程序框架。在后一种情况下，其体系结构提供了支持整个服务器实例上的操作的机制。这提供了一个强大的画布，可以执行持久性操作，因为服务器范围的函数可以在请求处理本身之外进行。只要总线（bus）存在，它们就可以在整个过程中使用。</p><p>典型用例：</p><ul><li>保持与外部服务器的连接池，以便您无需在每个请求（例如数据库连接）上重新打开它们。</li><li>后台处理（例如，您需要在不阻止整个请求本身的情况下完成工作）。</li></ul><h3 id="Publish-Subscribe-pattern"><a href="#Publish-Subscribe-pattern" class="headerlink" title="Publish/Subscribe pattern"></a>Publish/Subscribe pattern</h3><p>CherryPy 的骨干网由一个总线系统（bus system）组成，该总线系统实现了简单的发布/订阅消息传递模式。简而言之，在 CherryPy 中，所有内容都通过该总线进行控制。可以很容易地将 bus 描绘成寿司店的传送带，如下图所示。</p><p><img src="https://docs.cherrypy.org/en/latest/_images/sushibelt.JPG"></p><p>您可以订阅和发布到 bus 上的通道。通道有点像总线中的唯一标识符。当消息发布到某个通道时，总线会将消息分发给该通道的所有订户。</p><p>pubsub 模式的一个有趣方面是，它促进了调用者和被调用者之间的解耦。发布的消息最终将生成响应，但是发布者不知道该响应来自何处。</p><p>由于这种解耦，CherryPy 应用程序可以轻松访问功能，而不必保留对提供该功能的实体的引用。取而代之的是，该应用程序只是发布到总线上，并会收到适当的响应，这很重要。</p><h4 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h4><p>让我们来看看以下虚拟应用程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">ECommerce</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> db<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mydb <span class="token operator">=</span> db    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">save_kart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cart_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        cart <span class="token operator">=</span> Cart<span class="token punctuation">(</span>cart_data<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mydb<span class="token punctuation">.</span>save<span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>ECommerce<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该应用程序具有对数据库的引用，但这在数据库提供程序和应用程序之间建立了相当强的耦合。</p><p>解决耦合问题的另一种方法是使用 pubsub 工作流程：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">ECommerce</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">save_kart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cart_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        cart <span class="token operator">=</span> Cart<span class="token punctuation">(</span>cart_data<span class="token punctuation">)</span>        cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>publish<span class="token punctuation">(</span><span class="token string">'db-save'</span><span class="token punctuation">,</span> cart<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>ECommerce<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此示例中，我们将 <code>cart</code> 车实例发布到 <code>db-save</code> 通道。然后，一个或多个订阅者可以对该消息做出反应，而应用程序不必知道这些消息。</p><p class="w3-pale-yellow">这种方法不是强制性的，您可以自行决定如何设计实体互动。</p><h4 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h4><p>CherryPy 的总线实现非常简单，因为它向通道注册了函数。每当消息发布到通道时，每个注册函数都会应用该消息作为参数传递。</p><p>整个行为是同步发生的，从这个意义上说，如果一个订户花费太长时间来处理一条消息，则其余订户将被延迟。</p><p>CherryPy 的总线不是由 <a href="http://zeromq.org/">zeromq</a> 或 <a href="https://www.rabbitmq.com/">RabbitMQ</a> 提供的高级 pubsub 消息传递代理系统。在使用它的前提下，可能会产生成本。</p><h4 id="引擎作为-pubsub-总线"><a href="#引擎作为-pubsub-总线" class="headerlink" title="引擎作为 pubsub 总线"></a>引擎作为 pubsub 总线</h4><p>如前所述，CherryPy 是围绕 pubsub 总线构建的。框架在运行时管理的所有实体都在单个总线实例（称为引擎（<code>engine</code>））上运行。</p><p>因此，总线实现提供了一组描述应用程序生命周期的通用通道：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">                 O                 |                 VSTOPPING --&gt; STOPPED --&gt; EXITING -&gt; X   A   A         |   |    \___     |   |        \    |   |         V   V STARTED &lt;-- STARTING<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各状态的转换触发了要发布到的通道，以便订户可以对其做出反应。</p><p>一个很好的例子是 HTTP 服务器，它将在消息发布到 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpmodpy.html#cherrypy._cpmodpy.ModPythonServer.start">start</a> 通道时从“STOPPED”状态转换为“STARTED”状态。</p><h4 id="内置通道"><a href="#内置通道" class="headerlink" title="内置通道"></a>内置通道</h4><p>为了支持其生命周期，CherryPy 定义了一组公共通道（channels），这些 channels 将在各个 state 发布：</p><ul><li>“start”：当总线处于 “STARTING” 状态时</li><li>“main”：定期从 CherryPy 的主循环中获取</li><li>“stop”：当总线处于 “STOPPING” 状态时</li><li>“graceful”：当总线请求重新加载 subscribers 时</li><li>“exit”：当总线处于 “EXITING” 状态时</li></ul><p>Channel 将由 <strong>engine</strong> 自动发布。因此，注册需要对所有订阅者 <strong>engine</strong> 的 transition changes 做出反应。</p><p>此外，在请求处理期间还会发布一些其他通道。</p><ul><li>“before_request”：在 CherryPy 处理请求之前</li><li>“after_request”：在处理之后</li></ul><p>另外，从 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.process.plugins.html#cherrypy.process.plugins.ThreadManager">cherrypy.process.plugins.ThreadManager</a> 插件中：</p><ul><li>“acquire_thread”</li><li>“start_thread”</li><li>“stop_thread”</li><li>“release_thread”</li></ul><h4 id="Bus-API"><a href="#Bus-API" class="headerlink" title="Bus API"></a>Bus API</h4><p>为了使用总线(bus)，该实现提供了以下简单的 API：</p><dl>  <dt><a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.process.wspbus.html#cherrypy.process.wspbus.Bus.publish">cherrypy.engine.publish(channel,&nbsp;*args)</a></dt>  <dd><code>channel</code> 参数是一个字符串，用于标识将消息发送到的信道  </dd>  <dd><code>*args</code> 是消息，可能包含任何有效的 Python 值或对象。</dd>  <dt><a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.process.wspbus.html#cherrypy.process.wspbus.Bus.subscribe">cherrypy.engine.subscribe(channel, callable)</a></dt>  <dd><code>channel</code> 参数是一个字符串，用于标识可回调对象将被注册到的信道。  </dd>  <dd><code>callable</code> 是一个 Python 函数或方法，其签名必须与将要发布的签名匹配。</dd>  <dt><a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.process.wspbus.html#cherrypy.process.wspbus.Bus.unsubscribe">cherrypy.engine.unsubscribe(channel, callable)(channel, callable)</a></dt>  <dd><code>channel</code> 参数是一个字符串，用于标识可回调对象将被注册到的信道。  </dd>  <dd><code>callable</code> 是已注册的 Python 函数或方法。</dd></dl><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>简而言之，插件是可以通过发布或订阅通道（通常同时在同一时间）与总线进行交互的实体。</p><article class="w3-green">只要您具有以下功能，插件就非常有用：<ul><li>在整个应用程序服务器中可用</li><li>与应用程序的生命周期相关</li><li>您要避免与应用程序紧密耦合</li></ul></article><h4 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h4><p>一个典型的插件如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>process <span class="token keyword">import</span> wspbus<span class="token punctuation">,</span> plugins<span class="token keyword">class</span> <span class="token class-name">DatabasePlugin</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span>SimplePlugin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bus<span class="token punctuation">,</span> db_klass<span class="token punctuation">)</span><span class="token punctuation">:</span>        plugins<span class="token punctuation">.</span>SimplePlugin<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> bus<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> db_klass<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">'Starting up DB access'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token string">"db-save"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>save_it<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">'Stopping down DB access'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token string">"db-save"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>save_it<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save_it</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> entity<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>save<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.process.plugins.html#cherrypy.process.plugins.SimplePlugin">cherrypy.process.plugins.SimplePlugin</a> 是 CherryPy 提供的帮助程序类，该类将自动将您的<a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpmodpy.html#cherrypy._cpmodpy.ModPythonServer.start" title="cherrypy._cpmodpy.ModPythonServer.start"><code>start</code></a>和<a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpmodpy.html#cherrypy._cpmodpy.ModPythonServer.stop" title="cherrypy._cpmodpy.ModPythonServer.stop"><code>stop</code></a>方法订阅到相关通道。</p><p>发布<a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpmodpy.html#cherrypy._cpmodpy.ModPythonServer.start" title="cherrypy._cpmodpy.ModPythonServer.start"><code>start</code></a>和<a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpmodpy.html#cherrypy._cpmodpy.ModPythonServer.stop" title="cherrypy._cpmodpy.ModPythonServer.stop"><code>stop</code></a>通道时，将相应地调用这些方法。</p><p>请注意，接下来我们的插件如何订阅 <code>db-save</code> 通道，以便总线可以向插件分发消息。</p><h4 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h4><p>要启用该插件，必须将其注册到总线，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DatabasePlugin<span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">,</span> SQLiteDB<span class="token punctuation">)</span><span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 <code>SQLiteDB</code> 是用作我们的数据库提供程序的伪类。</p><h4 id="禁用插件"><a href="#禁用插件" class="headerlink" title="禁用插件"></a>禁用插件</h4><p>您还可以按以下步骤取消注册插件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">someplugin<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当您希望阻止默认的 HTTP 服务器由 CherryPy 启动时，例如，如果您在其他 HTTP 服务器（支持 WSGI）上运行，通常会使用此方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>让我们来看一个使用此默认应用程序的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是运行此应用程序时会看到的内容：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[27/Apr/2014:13:04:07] ENGINE Listening for SIGHUP.[27/Apr/2014:13:04:07] ENGINE Listening for SIGTERM.[27/Apr/2014:13:04:07] ENGINE Listening for SIGUSR1.[27/Apr/2014:13:04:07] ENGINE Bus STARTING[27/Apr/2014:13:04:07] ENGINE Started monitor thread 'Autoreloader'.[27/Apr/2014:13:04:08] ENGINE Serving on http://127.0.0.1:8080[27/Apr/2014:13:04:08] ENGINE Bus STARTED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，让我们退订 HTTP 服务器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我们得到的：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token punctuation">[</span><span class="token date number">27/Apr/2014</span><span class="token operator">:</span><span class="token time number">13:08:06</span><span class="token punctuation">]</span> ENGINE Listening for SIGHUP<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token date number">27/Apr/2014</span><span class="token operator">:</span><span class="token time number">13:08:06</span><span class="token punctuation">]</span> ENGINE Listening for SIGTERM<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token date number">27/Apr/2014</span><span class="token operator">:</span><span class="token time number">13:08:06</span><span class="token punctuation">]</span> ENGINE Listening for SIGUSR1<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token date number">27/Apr/2014</span><span class="token operator">:</span><span class="token time number">13:08:06</span><span class="token punctuation">]</span> ENGINE Bus STARTING<span class="token punctuation">[</span><span class="token date number">27/Apr/2014</span><span class="token operator">:</span><span class="token time number">13:08:06</span><span class="token punctuation">]</span> ENGINE Started monitor thread <span class="token string">'Autoreloader'</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token date number">27/Apr/2014</span><span class="token operator">:</span><span class="token time number">13:08:06</span><span class="token punctuation">]</span> ENGINE Bus STARTED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如您所见，服务器未启动。消失了：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[27/Apr/2014:13:04:08] ENGINE Serving on http://127.0.0.1:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="每个请求函数"><a href="#每个请求函数" class="headerlink" title="每个请求函数"></a>每个请求函数</h2><p>Web应用程序开发中最常见的任务之一是根据运行时上下文调整请求的处理。</p><p>在CherryPy中，这是通过所谓的<a href="https://docs.cherrypy.org/en/latest/extend.html#tools">Tools</a>执行的。如果您熟悉 Django 或 WSGI 中间件，CherryPy 工具在本质上是相似的。它们添加了在请求/响应处理期间应用的功能。</p><h3 id="Hook-point"><a href="#Hook-point" class="headerlink" title="Hook point"></a>Hook point</h3><p>挂接点（hook point）是请求/响应处理期间的一个点。</p><p>这是“挂接点”的简要概述，您可以将其挂在工具上：</p><ul><li>“on_start_resource””：最早的钩子；Request-Line 和 request 标头已处理，并且调度程序已设置 <code>request.handler</code> 和 <code>request.config</code>。</li><li>“before_request_body”：连接到此处的工具将在处理请求正文之前运行。</li><li>“before_handler”：在request.handler（调度程序发现的公开的可调用对象）被调用之前。</li><li>“before_finalize”：在处理页面处理程序之后以及CherryPy格式化最终响应对象之前，将立即调用此钩子。例如，它可以帮助您检查页面处理程序可能返回的内容，并在需要时更改某些标头。</li><li>“on_end_resource”：处理完成-可以返回响应了。这并不总是意味着request.handler（公开的页面处理程序）已执行！它可能是一个发电机。如果在页面处理程序生成响应主体之后绝对需要运行您的工具，则需要使用on_end_request代替，或者将response.body包装在生成器中，该生成器将在生成响应主体时应用您的工具。</li><li>“before_error_response”：在设置错误响应（状态代码，正文）之前调用。</li><li>“after_error_response”：在设置了错误响应（状态代码，主体）之后，并在错误响应最终确定之前立即调用。</li><li>“on_end_request”：请求/响应对话已结束，所有数据均已写入客户端，仅此而已，请继续。</li></ul><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><p>工具是连接到挂钩点（hook point）的简单可调用对象（函数，方法，实现 <code>__call__</code> 方法的对象）。</p><p>下面是一个简单的工具，该工具附加到 <code>before_finalize</code> 挂接点，因此在调用页面处理程序之后：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">'before_finalize'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以手动创建和分配工具。装饰器注册等效于：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>logit <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>Tool<span class="token punctuation">(</span><span class="token string">'before_finalize'</span><span class="token punctuation">,</span> logit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用该工具非常简单，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>logit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，可以使用 <a href="https://docs.cherrypy.org/en/latest/basics.html#perappconf">其他常用方法</a> 声明该工具。</p><p class="w3-pale-red">工具的名称（技术上设置为 cherrypy.tools 的属性）不必与可调用名称匹配。但是，在配置中将使用该名称来引用该工具。</p><h4 id="Stateful-tools"><a href="#Stateful-tools" class="headerlink" title="Stateful tools"></a>Stateful tools</h4><p>工具机制确实非常灵活，并且可以实现丰富的按请求功能。</p><p>上一节中所示的 Straight 工具通常就足够了。但是，如果您的工作流在请求处理期间需要某种状态，则可能需要基于类的方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">TimingTool</span><span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>Tool<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>Tool<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'before_handler'</span><span class="token punctuation">,</span>                               self<span class="token punctuation">.</span>start_timer<span class="token punctuation">,</span>                               priority<span class="token operator">=</span><span class="token number">95</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_setup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>Tool<span class="token punctuation">.</span>_setup<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>attach<span class="token punctuation">(</span><span class="token string">'before_finalize'</span><span class="token punctuation">,</span>                                      self<span class="token punctuation">.</span>end_timer<span class="token punctuation">,</span>                                      priority<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_timer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">end_timer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        duration <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>_time        cherrypy<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"Page handler took %.4f"</span> <span class="token operator">%</span> duration<span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>timeit <span class="token operator">=</span> TimingTool<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该工具计算页面处理程序针对给定请求所花费的时间。它存储处理程序即将被调用的时间，并在处理程序返回其结果后立即记录时间差。</p><p>导入位是 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cptools.html#cherrypy._cptools.Tool">cherrypy.Tool</a> 构造函数允许您注册到挂钩点，但是，要将同一个工具附加到另一个挂钩点，必须使用 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cprequest.html#cherrypy._cprequest.HookMap.attach">cherrypy.request.hooks.attach</a> 方法。将工具应用于请求时，CherryPy 自动调用 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cptools.html#cherrypy._cptools.Tool._setup">cherrypy.Tool._setup</a> 方法。</p><p>接下来，让我们看看如何使用我们的工具：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>timeit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Tools-ordering"><a href="#Tools-ordering" class="headerlink" title="Tools ordering"></a>Tools ordering</h4><p>由于您可以在同一个挂钩点上注册许多工具，因此您可能想知道将以什么顺序应用它们。</p><p>CherryPy 提供了确定性但又如此简单的机制。只需将优先级属性设置为1到100之间的值，较低的值将提供较高的优先级。</p><p>如果为多个工具设置了相同的优先级，则会按照在配置中声明它们的顺序来调用它们。</p><h4 id="Toolboxes"><a href="#Toolboxes" class="headerlink" title="Toolboxes"></a>Toolboxes</h4><p>所有内置的 CherryPy 工具都收集在一个名为 <code>cherrypy.tools</code> 的工具箱中。它响应 <code>"tools"</code> 名称空间中的配置条目。您可以如上所述将自己的工具添加到此工具箱。</p><p>如果需要更多的模块化，也可以制作自己的工具箱。例如，您可能创建了多个使用 JSON 的工具，或者可能发布了一套涵盖身份验证和授权的工具，每个人都可以从中受益（提示，提示）。创建一个新的工具箱很简单：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token comment"># Create a new Toolbox.</span>newauthtools <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>_cptools<span class="token punctuation">.</span>Toolbox<span class="token punctuation">(</span><span class="token string">"newauth"</span><span class="token punctuation">)</span><span class="token comment"># Add a Tool to our new Toolbox.</span><span class="token decorator annotation punctuation">@newauthtools<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">'before_request_body'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_access</span><span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"userid"</span><span class="token punctuation">,</span> default<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> cherrypy<span class="token punctuation">.</span>HTTPError<span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在您的应用程序中，就像使用 <code>cherrypy.tools</code> 一样使用它，并带有向应用程序注册工具箱的附加步骤。注意，这样做会自动注册“newauth”配置名称空间。您可以在下面查看正在使用的配置条目：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">default</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hello"</span>conf <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'/demo'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token string">'newauth.check_access.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>       <span class="token string">'newauth.check_access.default'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>app <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token operator">=</span>conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Request-parameters-manipulation"><a href="#Request-parameters-manipulation" class="headerlink" title="Request parameters manipulation"></a>Request parameters manipulation</h3><p>HTTP 使用字符串在两个端点之间传送数据。但是，您的应用程序可能会更好地利用更丰富的对象类型。让每个页面处理程序反序列化数据并不是很容易理解，也不是关于维护的好主意，因此，将这种功能委托给工具是一种常见的模式。</p><p>例如，假设您在查询字符串中有一个用户 ID，并将一些用户数据存储到数据库中。您可以检索数据，创建一个对象并将其传递给页面处理程序，而不是传递给用户 ID。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">UserManager</span><span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>Tool<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>Tool<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'before_handler'</span><span class="token punctuation">,</span>                               self<span class="token punctuation">.</span>load<span class="token punctuation">,</span> priority<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        req <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>request        <span class="token comment"># let's assume we have a db session</span>        <span class="token comment"># attached to the request somehow</span>        db <span class="token operator">=</span> req<span class="token punctuation">.</span>db        <span class="token comment"># retrieve the user id and remove it</span>        <span class="token comment"># from the request parameters</span>        user_id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'user_id'</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>user <span class="token operator">=</span> UserManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello %s"</span> <span class="token operator">%</span> user<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换句话说，CherryPy 使您能够：</p><ul><li>将不属于初始请求的数据注入到页面处理程序中</li><li>以及删除数据</li><li>将数据转换为另一个更有用的对象，以减轻页面处理程序本身的负担</li></ul><h2 id="Tailored-dispatchers"><a href="#Tailored-dispatchers" class="headerlink" title="Tailored dispatchers"></a>Tailored dispatchers</h2><p>调度是为给定请求定位适当的页面处理程序的艺术。通常，分派基于请求的 URL，查询字符串以及有时基于请求的方法（GET，POST 等）进行。</p><p>基于此，CherryPy 已经附带了各种调度程序。</p><p>但是，在某些情况下，您将需要更多。这是一个调度程序的示例，该调度程序将始终确保传入的 URL 导致一个小写的页面处理程序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>_cpdispatch <span class="token keyword">import</span> Dispatcher<span class="token keyword">class</span> <span class="token class-name">StringGenerator</span><span class="token punctuation">:</span>   <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>   <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ForceLowerDispatcher</span><span class="token punctuation">(</span>Dispatcher<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path_info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Dispatcher<span class="token punctuation">.</span>__call__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> path_info<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    conf <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'request.dispatch'</span><span class="token punctuation">:</span> ForceLowerDispatcher<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行此代码段后，请转到：</p><ul><li><code>http://localhost:8080/generate?length=8</code></li><li><code>http://localhost:8080/GENerAte?length=8</code></li></ul><p>在这两种情况下，您都将被引导到“生成页面处理程序”。如果没有我们的自制调度程序，第二个调度程序将失败并返回404错误（<a href="https://tools.ietf.org/html/rfc7231.html#section-6.5.4">RFC 7231＃section-6.5.4</a>）。</p><h3 id="Tool-or-dispatcher"><a href="#Tool-or-dispatcher" class="headerlink" title="Tool or dispatcher?"></a>Tool or dispatcher?</h3><p>在前面的示例中，为什么不简单地使用工具？好了，总是可以在找到页面处理程序之后尽快调用工具。在我们的示例中，为时已晚，因为默认调度程序甚至都找不到 <code>/GENerAte</code> 的匹配项。</p><p>通常存在一个调度程序，以确定为请求的资源提供服务的最佳页面处理程序。</p><p>另一方面，工具可以使请求的处理适应应用程序的运行时上下文和请求的内容。</p><p>通常，仅当您有非常特定的用例来定位最合适的页面处理程序时，才需要编写调度程序。否则，默认值可能就足够了。</p><h2 id="Request-body-processors"><a href="#Request-body-processors" class="headerlink" title="Request body processors"></a>Request body processors</h2><p>自从 3.2 版本发布以来，CherryPy 提供了一种非常优雅而强大的机制，可以根据其模仿类型来处理请求的正文。请参阅 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpreqbody.html#module-cherrypy._cpreqbody">cherrypy._cpreqbody</a> 模块以了解如何实现自己的处理器。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CherryPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CherryPy 配置</title>
      <link href="/dao/post/zh-CN/66fcbe5b6847.html"/>
      <url>/dao/post/zh-CN/66fcbe5b6847.html</url>
      
        <content type="html"><![CDATA[<p>CherryPy 中的配置是通过字典实现的。键是命名映射值的字符串。值可以是任何类型。在 CherryPy3 中，您可以使用配置（文件或字典）直接在引擎，服务器，请求，响应和日志对象上设置属性。因此，要了解配置文件中所有可用内容的全部范围，最好的方法是简单地导入这些对象，然后查看 <code>help(obj)</code> 告诉您什么。</p><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>关于 CherryPy 3 的配置，您需要了解的第一件事是它将全局配置与应用程序配置分开。如果您要在同一站点上部署多个应用程序（越来越多的人（由于 Python Web 应用程序趋向于分散管理）），则还需要注意分开配置。只有一个“全局配置”，但是您部署的每个应用都有一个单独的“应用配置”。</p><p>CherryPy Requests 是应用程序的一部分，该应用程序在全局上下文中运行，并且配置数据可能适用于这三个范围中的任何一个。让我们依次查看每个范围。</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>全局配置条目适用于任何地方，并存储在 <code>cherrypy.config</code> 中。这个简单的字典只保存全局配置数据。也就是说，“站点范围”配置条目会影响所有已安装的应用程序。</p><p>全局配置存储在 <code>cherrypy.config</code> 字典中，因此您可以通过调用 <code>cherrypy.config.update(conf)</code> 对其进行更新。<code>conf</code> 参数可以是文件名，打开的文件或配置条目的字典。这是一个传递 <code>dict</code> 参数的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'server.socket_host'</span><span class="token punctuation">:</span> <span class="token string">'64.72.221.48'</span><span class="token punctuation">,</span>                        <span class="token string">'server.socket_port'</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>                       <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本示例中的 <code>server.socket_host</code> 选项确定 CherryPy 将在哪个网络接口上侦听。<code>server.socket_port</code> 选项声明要侦听的 TCP 端口。</p><h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><p>应用程序条目适用于单个已安装的应用程序，并作为 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cptree.html#cherrypy._cptree.Application.config"><code>app.config</code></a> 存储在每个 Application 对象本身上。这是一个两级字典，其中每个顶级关键字是一个路径或“相对URL”（例如，<code>"/"</code> 或 <code>"/my/page"</code>），每个值是一个配置条目的字典。该 URL 相对于该应用程序的脚本名称（挂载点）。通常，所有这些数据都在对 <code>tree.mount(root(), script_name='/path/to', config=conf)</code> 的调用中提供，尽管您也可以使用 <code>app.merge(conf)</code>。<code>conf</code> 参数可以是文件名，打开的文件或配置条目的字典。</p><p>配置文件的例子：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.trailing_slash.on = Falserequest.dispatch: cherrypy.dispatch.MethodDispatcher()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者 Python 代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'/'</span><span class="token punctuation">:</span>    <span class="token punctuation">{</span>        <span class="token string">'request.dispatch'</span><span class="token punctuation">:</span> cherrypy<span class="token punctuation">.</span>dispatch<span class="token punctuation">.</span>MethodDispatcher<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'tools.trailing_slash.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token operator">=</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CherryPy 仅使用以 <code>"/"</code> 开头的部分（<code>[global]</code>除外，请参见下文）。这意味着您可以通过为自己的配置条目提供一个不以 <code>"/"</code> 开头的部分名称来将它们放置在 CherryPy 配置文件中。例如，您可能包括以下数据库条目：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[global]server.socket_host: "0.0.0.0"[Databases]driver: "postgres"host: "localhost"port: 5432[/path]response.timeout: 6000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在您的应用程序代码中，您可以在请求期间通过 <code>cherrypy.request.app.config['Databases']</code> 读取这些值。对于超出请求流程的代码，您必须将引用传递给您的应用程序。</p><h3 id="Request-配置"><a href="#Request-配置" class="headerlink" title="Request 配置"></a>Request 配置</h3><p>每个 Request 对象都具有一个 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cprequest.html#cherrypy._cprequest.Request.config">request.config</a> 字典。在请求过程的早期，通过合并全局配置，应用程序配置以及在查找页面处理程序时获取的任何配置来填充此 dict（请参见下文）。该字典仅包含适用于给定请求的那些配置条目。</p><p class="w3-pale-red"> 当您执行 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cperror.html#cherrypy._cperror.InternalRedirect">InternalRedirect</a> 时，将为新路径重新计算此 config 属性。</p><p></p><h2 id="Declaration"><a href="#Declaration" class="headerlink" title="Declaration"></a>Declaration</h2><p>配置数据可以作为 Python 字典，文件名或打开文件对象提供。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>当提供文件名或文件时，CherryPy 使用 Python 的内置 ConfigParser。您可以通过将每个路径写为 section header，并将每个条目写为 <code>"key: value"</code>（或 <code>"key = value"</code>）对来声明 Application config：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/path/to/my/page]response.stream: Truetools.trailing_slash.extra = False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="组合配置文件"><a href="#组合配置文件" class="headerlink" title="组合配置文件"></a>组合配置文件</h4><p>如果仅部署单个应用程序，则可以制作一个包含全局条目和应用程序条目的配置文件。只需将全局条目粘贴到名为 <code>[global]</code> 的配置节中，然后将同一文件传递到 <code>config.update</code> 和 <code>tree.mount &lt;cherrypy._cptree.Tree.mount()</code>。如果您要调用 <code>cherrypy.quickstart(app root, script name, config)</code>，它将为您将配置传递到两个地方。但是，一旦您决定将另一个应用程序添加到同一站点，就需要将两个配置文件/字典分开。</p><h4 id="单独的配置文件"><a href="#单独的配置文件" class="headerlink" title="单独的配置文件"></a>单独的配置文件</h4><p>如果您要在同一过程中部署多个应用程序，则需要（1）文件进行全局配置，另外还需要（1）文件用于每个应用程序。 全局配置是通过调用 <code>cherrypy.config.update</code> 来应用的，而应用程序配置通常是在对 <code>cherrypy.tree.mount</code> 的调用中传递的。</p><p>通常，您应该先设置全局配置，然后再使用自己的配置挂载每个应用程序。除其他好处外，它还使您可以设置全局日志记录，这样，如果在尝试装入应用程序时出现问题，您将看到回溯。换句话说，使用以下顺序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># global config</span>cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'environment'</span><span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>                        <span class="token string">'log.error_file'</span><span class="token punctuation">:</span> <span class="token string">'site.log'</span><span class="token punctuation">,</span>                        <span class="token comment"># ...</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># Mount each app and pass it its own config</span>cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>root1<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> appconf1<span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>root2<span class="token punctuation">,</span> <span class="token string">"/forum"</span><span class="token punctuation">,</span> appconf2<span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>root3<span class="token punctuation">,</span> <span class="token string">"/blog"</span><span class="token punctuation">,</span> appconf3<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">,</span> <span class="token string">'block'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 3.1 syntax</span>    cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>block<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 3.0 syntax</span>    cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span><span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文件中的值使用-Python-语法"><a href="#配置文件中的值使用-Python-语法" class="headerlink" title="配置文件中的值使用 Python 语法"></a>配置文件中的值使用 Python 语法</h4><p>Config 条目始终是键/值对，例如 <code>server.socket_port = 8080</code>。键始终是名称，值始终是 Python 对象。也就是说，如果您要设置的值是一个 int（或其他数字），则它必须看起来像 Python int；例如 8080。如果该值为字符串，则需要将其引号，就像 Python 字符串一样。也可以创建任意对象，就像在 Python 代码中一样（假定可以找到/导入）。这是一个扩展的示例，向您展示了一些不同的类型：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[global]log.error_file: "/home/fumanchu/myapp.log"environment = 'production'server.max_request_body_size: 1200[/myapp]tools.trailing_slash.on = Falserequest.dispatch: cherrypy.dispatch.MethodDispatcher()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="cp-config：将配置附加到处理程序"><a href="#cp-config：将配置附加到处理程序" class="headerlink" title="_cp_config：将配置附加到处理程序"></a><code>_cp_config</code>：将配置附加到处理程序</h4><p>配置文件有一个严格的限制：值始终由URL键入。例如：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/path/to/page]methods_with_bodies = ("POST", "PUT", "PROPPATCH")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显然，额外的方法是该路径的规范；实际上，如果没有该代码，则可以认为该代码已损坏。在 CherryPy 中，您可以直接在页面处理程序上附加该配置位：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token keyword">def</span> <span class="token function">page</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, world!"</span>page<span class="token punctuation">.</span>_cp_config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"request.methods_with_bodies"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"PROPPATCH"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>_cp_config</code> 是保留的属性，调度程序在对象树中的每个节点上查找该属性。<code>_cp_config</code> 属性必须是 CherryPy 配置字典。如果调度程序找到了 <code>_cp_config</code> 属性，它将将该字典合并到配置的其余部分中。整个合并的配置字典放置在 <code>cherrypy.request.config</code> 中。</p><p>可以在对象树的任何位置完成此操作。例如，我们可以将该配置附加到包含 page 方法的类中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SetOPages</span><span class="token punctuation">:</span>    _cp_config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"request.methods_with_bodies"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"PROPPATCH"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">page</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hullo, Werld!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p class="w3-pale-red">仅默认调度程序可以保证此行为。其他调度程序可能对在何处附加 <code>_cp_config</code> 属性有不同的限制。另外，由于分派器负责处理 <code>_cp_config</code>，因此无法更改分派器（即，在此构造中不执行 <code>request.dispatch</code>）。</p><p>此技术使您可以：</p><ul><li>将配置放在用于提高可读性和可维护性的位置。</li><li>将配置附加到对象而不是 URL。这样一来，多个 URL 都可以指向同一个对象，但是您只需定义一次配置即可。</li><li>提供仍可在配置文件中覆盖的默认值。</li></ul><h2 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h2><p>因为配置条目通常只是在对象上设置属性，所以它们几乎都是以下形式：<code>object.attribute</code>。其中一些格式为：<code>object.subobject.attribute</code>。它们看起来像普通的 Python 属性链，因为它们像它们一样工作。我们将链中的名字称为“配置名称空间”。当您提供配置条目时，它会尽早绑定到名称空间引用的实际对象。例如，条目 <code>response.stream</code> 实际上设置了 <code>cherrypy.response</code> 的 <code>stream</code> 属性！这样，您可以通过启动 Python 解释器并键入以下内容来轻松确定默认值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> cherrypy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cherrypy<span class="token punctuation">.</span>response<span class="token punctuation">.</span>stream<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每个配置名称空间都有其自己的处理程序。例如，“request” 名称空间具有一个处理程序，该处理程序获取您的配置条目并在适当的“请求”属性上设置该值。有一些名称空间无法像幕后的普通属性那样工作； 但是，它们仍然使用点键，并被认为是“具有名称空间”。</p><h3 id="内置名称空间"><a href="#内置名称空间" class="headerlink" title="内置名称空间"></a>内置名称空间</h3><p>可以在全局，应用程序根目录（<code>"/"</code>）或每个路径配置或以下组合中允许来自每个名称空间的条目。</p><h4 id="engine"><a href="#engine" class="headerlink" title="engine"></a>engine</h4><p>该命名空间中的条目控制着“应用程序引擎”。这些只能在全局配置中声明。<code>cherrypy.engine</code> 的任何属性都可以在 <code>config</code> 中设置；但是，在 <code>config</code> 中还有一些额外的条目可用：</p><ul><li><span class="w3-pale-yellow">Plugin 属性</span>：许多引擎插件本身就是 <code>cherrypy.engine</code> 的属性。 您可以通过简单地命名附件插件来设置任何属性。例如，在 <code>engine.autoreload</code> 处有一个 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.process.plugins.html#cherrypy.process.plugins.Autoreloader">Autoreloader</a> 类的实例。您可以通过配置条目 <code>engine.autoreload.frequency = 60</code> 设置其“frequency”属性。此外，您可以通过将 <code>engine.autoreload.on = True</code> 或 <code>False</code> 设置为打开或关闭此类插件。</li><li><span class="w3-pale-yellow">engine.SIGHUP/SIGTERM</span>：这些条目可用于设置给定通道的侦听器列表。通常，这用于关闭通过 <code>cherrypy.quickstart()</code> 自动获取的信号处理。</li></ul><h4 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h4><p>声明其他请求处理功能。使用它可以将自己的 Hook 函数附加到请求。例如，要将 <code>my_hook_func</code> 添加到 <code>before_handler</code> 挂钩点：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]hooks.before_handler = myapp.my_hook_func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p>配置日志记录。这些只能在全局配置（用于全局日志记录）或 <code>[/]</code> 配置（对于每个应用程序）中声明。有关可配置属性的列表，请参见 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cplogging.html#cherrypy._cplogging.LogManager">LogManager</a>。通常，“access_file”，“error_file” 和 “screen” 属性是最常用的配置。</p><h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><p>在每个 Request 上设置属性。有关完整列表，请参见 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cprequest.html#cherrypy._cprequest.Request">Request</a> 类。</p><h4 id="response"><a href="#response" class="headerlink" title="response"></a>response</h4><p>在每个 Response 上设置属性。有关完整列表，请参见 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cprequest.html#cherrypy._cprequest.Response">Response</a> 类。</p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>通过 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpserver.html#cherrypy._cpserver.Server">cherrypy.server</a> 控制默认的 HTTP 服务器（有关可配置属性的完整列表，请参见该类）。这些只能在全局配置中声明。</p><h4 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h4><p>启用和配置其他请求处理程序包。有关更多信息，请参见 /tutorial/tools 概述。</p><h4 id="wsgi"><a href="#wsgi" class="headerlink" title="wsgi"></a>wsgi</h4><p>将 WSGI 中间件添加到应用程序的“pipeline”中。这些只能在应用的根配置（“/”）中声明。</p><ul><li><code>wsgi.pipeline</code>：附加到 WSGI 管道。该值必须是（name, app factory）对的列表。每个应用程序工厂必须是 WSGI 可调用类（或返回 WSGI 可调用的可调用类）；它必须带有一个初始的 “nextapp” 参数，以及任何可选的关键字参数。可选参数可以通过 <code>wsgi.&lt;name&gt;.&lt;arg&gt;</code> 进行配置。</li><li><code>wsgi.response_class</code>：覆盖默认的 Response 类。</li></ul><h4 id="checker"><a href="#checker" class="headerlink" title="checker"></a>checker</h4><p>控制“checker”，该检查器在引擎启动时在应用程序状态（包括配置）中查找常见错误。您可以通过在配置中将单个检查设置为 <code>False</code> 来关闭单个检查。请参阅 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpchecker.html#cherrypy._cpchecker.Checker">cherrypy._cpchecker.Checker</a> 以获取完整列表。仅全局配置。</p><h3 id="自定义配置名称空间"><a href="#自定义配置名称空间" class="headerlink" title="自定义配置名称空间"></a>自定义配置名称空间</h3><p>如果愿意，您可以定义自己的名称空间，它们可以做的事情远不止简单地设置属性。例如，<code>test/test_config</code> 模块显示了一个自定义名称空间的示例，该名称空间强制输入的参数和输出的正文内容。<a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cpwsgi.html#module-cherrypy._cpwsgi">cherrypy._cpwsgi</a> 模块包括一个附加的内置名称空间，用于调用 WSGI 中间件。</p><p>本质上，配置名称空间处理程序只是一个函数，该函数将传递其名称空间中的所有配置条目。您将其添加到名称空间注册表（字典），其中键是名称空间名称，值是处理函数。当遇到您的名称空间的配置条目时，将调用相应的处理程序函数，并传递 <code>config</code> 键和值；即 <code>namespaces[namespace](k, v)</code>。例如，如果您编写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">db_namespace</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">'connstring'</span><span class="token punctuation">:</span>        orm<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>v<span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>namespaces<span class="token punctuation">[</span><span class="token string">'db'</span><span class="token punctuation">]</span> <span class="token operator">=</span> db_namespace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后 <code>cherrypy.config.update({"db.connstring": "Oracle:host=1.10.100.200;sid=TEST"})</code> 将调用<code>db_namespace('connstring', 'Oracle:host=1.10.100.200;sid=TEST')</code>。</p><p>调用名称空间处理程序的时间点取决于添加它的位置：</p><table><thead><tr><th align="center">Scope</th><th align="center">Namespace dict</th><th align="center">Handler is called in</th></tr></thead><tbody><tr><td align="center">Global</td><td align="center">cherrypy.config.namespaces</td><td align="center">cherrypy.config.update</td></tr><tr><td align="center">Application</td><td align="center"><a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cptree.html#cherrypy._cptree.Application.namespaces">app.namespaces</a></td><td align="center">Application.merge (which is called by cherrypy.tree.mount)</td></tr><tr><td align="center">Request</td><td align="center"><a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cprequest.html#cherrypy._cprequest.Request.namespaces">app.request_class.namespaces</a></td><td align="center">Request.configure (called for each request, after the handler is looked up)</td></tr></tbody></table><p>名称可以是任何字符串，并且处理程序必须是可调用的或（Python 2.5 样式）上下文管理器。</p><p>如果在收集所有名称空间键时需要其他代码来运行，则可以提供可调用的上下文管理器来代替处理程序的常规功能。在 <a href="https://www.python.org/dev/peps/pep-0343">PEP 343</a> 中定义了上下文管理器。</p><h3 id="Environments"><a href="#Environments" class="headerlink" title="Environments"></a>Environments</h3><p>命名空间中唯一不存在的键是“environment”条目。它仅适用于全局配置，并且仅在使用 <code>cherrypy.config.update</code> 时适用。此特殊条目从存储在 <code>cherrypy._cpconfig.environments[environment]</code> 中的以下模板中导入其他配置条目。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Config<span class="token punctuation">.</span>environments <span class="token operator">=</span> environments <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'staging'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'checker.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'tools.log_headers.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'request.show_tracebacks'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'request.show_mismatched_params'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'production'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'checker.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'tools.log_headers.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'request.show_tracebacks'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'request.show_mismatched_params'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'log.screen'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'embedded'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment"># For use with CherryPy embedded in another deployment stack.</span>        <span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'checker.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'tools.log_headers.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'request.show_tracebacks'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'request.show_mismatched_params'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'log.screen'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'engine.SIGHUP'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>        <span class="token string">'engine.SIGTERM'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'test_suite'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'engine.autoreload.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'checker.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'tools.log_headers.on'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'request.show_tracebacks'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'request.show_mismatched_params'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'log.screen'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果发现现有环境集（生产，暂存等）过于局限或完全错误，请随时扩展它们或添加新环境：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>_cpconfig<span class="token punctuation">.</span>environments<span class="token punctuation">[</span><span class="token string">'staging'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'log.screen'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>cherrypy<span class="token punctuation">.</span>_cpconfig<span class="token punctuation">.</span>environments<span class="token punctuation">[</span><span class="token string">'Greek'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'tools.encode.encoding'</span><span class="token punctuation">:</span> <span class="token string">'ISO-8859-7'</span><span class="token punctuation">,</span>    <span class="token string">'tools.decode.encoding'</span><span class="token punctuation">:</span> <span class="token string">'ISO-8859-7'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CherryPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的 HTML 元素使用参考</title>
      <link href="/dao/post/zh-CN/8d2e9bc8b6bf.html"/>
      <url>/dao/post/zh-CN/8d2e9bc8b6bf.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-lt-ul-gt-amp-lt-ol-gt"><a href="#1-lt-ul-gt-amp-lt-ol-gt" class="headerlink" title="1 <ul> &amp; <ol>"></a>1 &lt;ul&gt; &amp; &lt;ol&gt;</h2><table><thead><tr><th align="center">属性</th><th align="center">使用建议</th></tr></thead><tbody><tr><td align="center"><code>compact</code>👎</td><td align="center"><code>&lt;ul&gt;</code> 元素应当使用 CSS 来更改样式去渲染为其更紧凑的样式。（CSS）可以提供与 <code>compact</code> 属性相同的效果，将  CSS 属性 <a href="https://developer.mozilla.org/zh-CN/docs/CSS/line-height">line-height</a> 的值设为 80% 即可。</td></tr><tr><td align="center"><code>type</code>👎</td><td align="center">用于设置列表的着重号样式。不要使用这个属性，它已经被废弃了：使用 CSS <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type">list-style-type</a> 属性作为代替</td></tr></tbody></table><h3 id="1-1-lt-ul-gt-无序列表"><a href="#1-1-lt-ul-gt-无序列表" class="headerlink" title="1.1 <ul> 无序列表"></a>1.1 &lt;ul&gt; 无序列表</h3><p>特别作用于&nbsp;<code>&lt;ul&gt;</code> 元素的 CSS 属性:</p><ul><li><a href="https://developer.mozilla.org/en-US/CSS/list-style" title="en/CSS/list-style">list-style</a>&nbsp;属性, 作用于选择哪种序数的样式来显示,</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters" title="en/CSS_Counters">CSS counters</a>, 作用于操作复杂的嵌套列表,</li><li><a href="https://developer.mozilla.org/en-US/CSS/line-height" title="en/CSS/line-height">line-height</a>&nbsp;属性, 作用于模拟过时的&nbsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ul#attr-compact"><code>compact</code></a>&nbsp;属性,</li><li><a href="https://developer.mozilla.org/en-US/CSS/margin" title="en/CSS/margin">margin</a>&nbsp;属性, 作用于控制列表的缩进.</li></ul><h3 id="1-2-lt-ol-gt-有序列表"><a href="#1-2-lt-ol-gt-有序列表" class="headerlink" title="1.2 <ol> 有序列表"></a>1.2 &lt;ol&gt; 有序列表</h3><table><thead><tr><th align="center">属性</th><th align="center">使用建议</th></tr></thead><tbody><tr><td align="center"><code>reversed</code></td><td align="center">此布尔值属性指定列表中的条目是否是倒序排列的，即编号是否应从高到低反向标注。</td></tr><tr><td align="center"><code>start</code></td><td align="center">一个整数值属性，指定了列表编号的起始值。此属性的值应为阿拉伯数字，尽管列表条目的编号类型 <code>type</code> 属性可能指定为了罗马数字编号等其他类型的编号。比如说，想要让元素的编号从英文字母 “d” 或者罗马数字 “iv” 开始，都应当使用 <code>start="4"</code>。</td></tr><tr><td align="center"><code>type</code></td><td align="center">设置编号的类型：<code>a</code> 表示小写英文字母编号；<code>A</code> 表示大写英文字母编号；<code>i</code> 表示小写罗马数字编号；<code>I</code> 表示大写罗马数字编号；<code>1</code> 表示数字编号（默认）（除非列表中序号很重要（比如，在法律或者技术文件中条目通常被需要所引用），否则请使用 CSS <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type">list-style-type</a> 属性替代。）</td></tr></tbody></table><p>对&nbsp;<code>&lt;ol&gt;</code>&nbsp;元素常用的 CSS 属性:</p><ul><li>the&nbsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style"><code>list-style</code></a>&nbsp;属性, 有用的选择序数的显示方式,</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters">CSS计数器</a>, 用于处理复杂的嵌套列表,</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/line-height"><code>line-height</code></a>&nbsp;属性，可以模拟过时的&nbsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ol#attr-compact"><code>compact</code></a>&nbsp;属性；</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin"><code>margin</code></a>&nbsp;属性，用来控制列表的缩进。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CherryPy 高级教程</title>
      <link href="/dao/post/zh-CN/20d953f1f0b1.html"/>
      <url>/dao/post/zh-CN/20d953f1f0b1.html</url>
      
        <content type="html"><![CDATA[<p>CherryPy 支持这些部分将介绍的更高级的功能。</p><h2 id="1-为页面处理程序设置别名"><a href="#1-为页面处理程序设置别名" class="headerlink" title="1 为页面处理程序设置别名"></a>1 为页面处理程序设置别名</h2><p><code>cherrypy.expose</code> 装饰器提供的一个相当未知但有用的功能是支持别名。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">StringGenerator</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'generer'</span><span class="token punctuation">,</span> <span class="token string">'generar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此示例中，我们为页面处理程序创建本地化的别名。这意味着可以通过以下方式访问页面处理程序：</p><ul><li><code>/generate</code></li><li><code>/generer</code> (French)</li><li><code>/generar</code> (Spanish)</li></ul><p>显然，您的别名可以满足您的需要。</p><article class="w3-light-grey w3-card"><p class="w3-pale-red">注意</p><p>别名可以是单个字符串或它们的列表。</p></article><h2 id="2-RESTful-style-dispatching"><a href="#2-RESTful-style-dispatching" class="headerlink" title="2 RESTful-style dispatching"></a>2 RESTful-style dispatching</h2><p>术语 <strong>RESTful URL</strong> 有时用于谈论友好的 URL，这些 URL 很好地映射到应用程序公开的实体。</p><article class="w3-light-grey w3-card"><p class="w3-pale-red">重要</p><p>我们不会就什么是 restful 的问题进行辩论，但是我们将展示两种在您的 CherryPy 应用程序中实现通常想法的机制。</p></article><p>假设您希望创建一个可以显示乐队和唱片的应用程序。您的应用程序可能具有以下 URL：</p><ul><li><code>http://hostname/&lt;artist&gt;/</code></li><li><code>http://hostname/&lt;artist&gt;/albums/&lt;album_title&gt;/</code></li></ul><h3 id="2-1-The-special-cp-dispatch-method"><a href="#2-1-The-special-cp-dispatch-method" class="headerlink" title="2.1 The special _cp_dispatch method"></a>2.1 The special <code>_cp_dispatch</code> method</h3><p><code>_cp_dispatch</code> 是您在任何控制器中声明的一种特殊方法，用于在 CherryPy 处理剩余段之前对剩余段进行处理。这使您能够删除，添加或以其他方式处理您想要的任何段，甚至可以完全更改其余部分。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Band</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>albums <span class="token operator">=</span> Album<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_cp_dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vpath<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vpath<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> vpath<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vpath<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'artist'</span><span class="token punctuation">]</span> <span class="token operator">=</span> vpath<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># /band name/</span>            vpath<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># /albums/</span>            cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> vpath<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># /album title/</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>albums        <span class="token keyword">return</span> vpath    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'About %s...'</span> <span class="token operator">%</span> name<span class="token keyword">class</span> <span class="token class-name">Album</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> artist<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'About %s by %s...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> artist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Band<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法可以检查和操作段列表，在任何位置删除任何段或添加新段。然后将新的段列表发送到调度程序，该调度程序将使用它来查找适当的资源。</p><p>在上面的示例中，您应该能够转到以下 URL：</p><ul><li><code>http://localhost:8080/nirvana/</code></li><li><code>http://localhost:8080/nirvana/albums/nevermind/</code></li></ul><p><code>/nirvana/</code> 段与乐队相关联， <code>/nevermind/</code> 段与专辑相关。</p><p>为了实现这一点，我们的 <code>_cp_dispatch</code> 方法基于以下想法：默认调度程序将 URL 与页面处理程序签名及其在处理程序树中的位置进行匹配。</p><p>在这种情况下，我们在URL中使用动态段（乐队和记录名称），将它们注入到请求参数中，然后将它们从段列表中删除，就好像它们从来没有出现过一样。</p><p>换句话说，<code>_cp_dispatch</code> 使它就像我们正在处理以下 URL 一样：</p><ul><li><code>http://localhost:8080/?artist=nirvana</code></li><li><code>http://localhost:8080/albums/?artist=nirvana&amp;title=nevermind</code></li></ul><h3 id="2-2-The-popargs-decorator"><a href="#2-2-The-popargs-decorator" class="headerlink" title="2.2 The popargs decorator"></a>2.2 The popargs decorator</h3><p><code>cherrypy.popargs</code> 更直接，因为它为 CherryPy 否则无法解释的任何段命名。这使段与页面处理程序签名的匹配更加容易，并帮助 CherryPy 了解 URL 的结构。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>popargs</span><span class="token punctuation">(</span><span class="token string">'band_name'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Band</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>albums <span class="token operator">=</span> Album<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> band_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'About %s...'</span> <span class="token operator">%</span> band_name<span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>popargs</span><span class="token punctuation">(</span><span class="token string">'album_title'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Album</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> band_name<span class="token punctuation">,</span> album_title<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'About %s by %s...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>album_title<span class="token punctuation">,</span> band_name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Band<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的工作方式与 <code>_cp_dispatch</code> 类似，但是如上所述，它更加明确和本地化。 它说：</p><ul><li>取第一段并将其存储到名为 <code>band_name</code> 的参数中</li><li>再次获取第一段（因为我们删除了之前的第一段）并将其存储在名为 <code>album_title</code> 的参数中</li></ul><p>请注意，装饰器接受的绑定不仅仅是一个绑定。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>popargs</span><span class="token punctuation">(</span><span class="token string">'album_title'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Album</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>tracks <span class="token operator">=</span> Track<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>popargs</span><span class="token punctuation">(</span><span class="token string">'track_num'</span><span class="token punctuation">,</span> <span class="token string">'track_title'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Track</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> band_name<span class="token punctuation">,</span> album_title<span class="token punctuation">,</span> track_num<span class="token punctuation">,</span> track_title<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将处理以下 URL：<code>http://localhost:8080/nirvana/albums/nevermind/tracks/06/polly</code></p><p>最后，请注意如何将整个段堆栈传递给每个页面处理程序，以便获得完整的上下文。</p><h2 id="3-Error-handling"><a href="#3-Error-handling" class="headerlink" title="3 Error handling"></a>3 Error handling</h2><p>CherryPy 的 <code>HTTPError</code> 类支持在出现错误的情况下立即发出响应。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">thing</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> authorized<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> cherrypy<span class="token punctuation">.</span>HTTPError<span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">'Unauthorized'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> cherrypy<span class="token punctuation">.</span>HTTPError<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>HTTPError.handle</code> 是一个上下文管理器，它支持将应用程序中引发的异常转换为适当的HTTP响应，如第二个示例所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">thing</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> cherrypy<span class="token punctuation">.</span>HTTPError<span class="token punctuation">.</span>handle<span class="token punctuation">(</span>FileNotFoundError<span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Streaming-the-response-body"><a href="#4-Streaming-the-response-body" class="headerlink" title="4 Streaming the response body"></a>4 Streaming the response body</h2><p>CherryPy 处理 HTTP 请求，打包和解压缩低级详细信息，然后将控制权传递给应用程序的<a href="https://docs.cherrypy.org/en/latest/glossary.html#term-page-handler">页面处理程序</a>，从而生成响应的正文。CherryPy 允许您以各种类型返回正文内容：字符串，字符串列表，文件。CherryPy 还允许您产生内容，而不是返回内容。当您使用“ yield”时，您还可以选择流式传输输出。</p><p>通常，不流输出更安全，更容易。因此，流输出默认情况下处于关闭状态。流输出并使用会话需要对会话锁的工作方式有充分的了解。</p><h3 id="4-1-The-“normal”-CherryPy-response-process"><a href="#4-1-The-“normal”-CherryPy-response-process" class="headerlink" title="4.1 The “normal” CherryPy response process"></a>4.1 The “normal” CherryPy response process</h3><p>当您从页面处理程序提供内容时，CherryPy 将管理 HTTP 服务器与您的代码之间的对话，如下所示：</p><p><img src="https://docs.cherrypy.org/en/latest/_images/cpreturn.gif"></p><p>请注意，HTTP 服务器首先收集所有输出，然后立即将所有内容写入客户端：状态，标头和正文。这适用于静态页面或简单页面，因为可以在应用程序代码中或通过 CherryPy 框架随时更改整个响应。</p><h3 id="4-2-CherryPy-如何使用“流输出”"><a href="#4-2-CherryPy-如何使用“流输出”" class="headerlink" title="4.2 CherryPy 如何使用“流输出”"></a>4.2 CherryPy 如何使用“流输出”</h3><p>当您将配置条目“response.stream”设置为True（并使用“yield”）时，CherryPy 将管理 HTTP 服务器与您的代码之间的对话，如下所示：</p><p><img src="https://docs.cherrypy.org/en/latest/_images/cpyield.gif"></p><p>流式传输时，您的应用程序不会立即将原始内容传递回 CherryPy 或 HTTP 服务器。而是将其传递回生成器。那时，CherryPy 在生成器被消耗或产生任何输出之前完成状态和标头的确定。这是必要的，以允许 HTTP 服务器在头文件和正文部分可用时发送它们。</p><p>CherryPy 设置了状态和标头后，便将其发送到 HTTP 服务器，然后由 HTTP 服务器将其写出到客户端。从那时起，CherryPy 框架基本上不再使用，HTTP 服务器实际上直接从您的应用程序代码（您的页面处理程序方法）中请求内容。</p><p>因此，在流式传输时，如果页面处理程序中发生错误，CherryPy 将不会捕获它-HTTP 服务器将捕获它。因为标头（可能还有主体的一部分）已经被写入客户端，所以服务器无法知道一种安全的错误处理方法，因此只能关闭连接（当前的内置服务器实际上会写出一个简短错误） 消息，但可以更改此消息，并且不能保证可能与 CherryPy 一起使用的所有 HTTP 服务器的行为）。</p><p>此外，如果该处理程序方法是流生成器，则无法手动修改页面处理程序中的状态或标头，因为在将标头写入客户端之前，不会迭代该方法。这包括引发异常，例如 HTTPError，NotFound，InternalRedirect 和 HTTPRedirect。要在修改标题时使用流式生成器，您将必须返回与页面处理程序分离（或嵌入到页面处理程序中）的生成器。 例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">thing</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/plain'</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> authorized<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> cherrypy<span class="token punctuation">.</span>NotFound<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> <span class="token string">"Hello, "</span>            <span class="token keyword">yield</span> <span class="token string">"world"</span>        <span class="token keyword">return</span> content<span class="token punctuation">(</span><span class="token punctuation">)</span>    thing<span class="token punctuation">.</span>_cp_config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'response.stream'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流生成器很性感，但是它们会对 HTTP 造成破坏。CherryPy 允许您针对特定情况流输出：需要花费几分钟才能生成的页面，或需要部分内容的页面会立即输出到客户端。由于上面概述的问题，通常最好扁平化（缓冲）内容而不是流内容。仅当流式传输的好处胜过风险时，否则请执行其他操作。</p><h2 id="5-响应时间"><a href="#5-响应时间" class="headerlink" title="5 响应时间"></a>5 响应时间</h2><p>CherryPy 响应包括一个属性：<code>response.time</code>：响应开始的 <code>time.time()</code></p><h2 id="6-Deal-with-signals"><a href="#6-Deal-with-signals" class="headerlink" title="6 Deal with signals"></a>6 Deal with signals</h2><p><a href="https://docs.cherrypy.org/en/latest/extend.html#busplugins">引擎插件</a>将自动实例化为 <code>cherrypy.engine.signal_handler</code>。但是，它仅由 <code>cherrypy.quickstart</code> 自动订阅。因此，如果您要进行信号处理并回调：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token punctuation">)</span>engine<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>engine<span class="token punctuation">.</span>block<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您必须自己添加，然后才能启动引擎：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">engine<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-1-Windows-Console-Events"><a href="#6-1-Windows-Console-Events" class="headerlink" title="6.1 Windows Console Events"></a>6.1 Windows Console Events</h3><p>Microsoft Windows 使用控制台事件来传达某些信号，例如 Ctrl-C。在 Windows 平台上部署 CherryPy 需要 <a href="http://sourceforge.net/projects/pywin32/">Python for Windows Extensions</a>，它会自动安装，并带有环境标记，从而具有额外的依赖性。 安装该程序后，CherryPy 将自动处理 Ctrl-C 和其他控制台事件（CTRL_C_EVENT，CTRL_LOGOFF_EVENT，CTRL_BREAK_EVENT，CTRL_SHUTDOWN_EVENT 和 CTRL_CLOSE_EVENT），从而关闭总线以准备退出进程。</p><h2 id="7-保护服务器安全"><a href="#7-保护服务器安全" class="headerlink" title="7 保护服务器安全"></a>7 保护服务器安全</h2><p>本部分不作为保护 Web 应用程序或生态系统的完整指南。请查看 <a href="https://www.owasp.org/index.php/Main_Page">OWASP</a> 提供的各种指南。</p><p>可以启用多种设置以使 CherryPy 页面更安全。这些包括：</p><ul><li>传输数据：使用安全 Cookie</li><li>渲染页面：<ul><li>设置 HttpOnly cookie</li><li>设置 XFrame 选项</li><li>启用 XSS 保护</li><li>设置内容安全策略（Content Security Policy）</li></ul></li></ul><p>一种简单的方法是使用工具设置标题，并用它包装整个 CherryPy 应用程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token comment"># set the priority according to your needs if you are hooking something</span><span class="token comment"># else on the 'before_finalize' hook point.</span><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">'before_finalize'</span><span class="token punctuation">,</span> priority<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">secureheaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers    headers<span class="token punctuation">[</span><span class="token string">'X-Frame-Options'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'DENY'</span>    headers<span class="token punctuation">[</span><span class="token string">'X-XSS-Protection'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1; mode=block'</span>    headers<span class="token punctuation">[</span><span class="token string">'Content-Security-Policy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"default-src 'self';"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>了解有关<a href="https://www.owasp.org/index.php/List_of_useful_HTTP_headers">这些 headers</a>的更多信息。</p><p>在配置文件（或您要启用该工具的任何其他位置）中：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.secureheaders.on = True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果您使用会话，则还可以启用以下设置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.sessions.on = True# increase security on sessionstools.sessions.secure = Truetools.sessions.httponly = True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用 SSL，则还可以启用严格传输安全性：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># add this to secureheaders():# only add Strict-Transport headers if we're actually using SSL; see the ietf spec# "An HSTS Host MUST NOT include the STS header field in HTTP responses# conveyed over non-secure transport"# http://tools.ietf.org/html/draft-ietf-websec-strict-transport-sec-14#section-7.2if (cherrypy.server.ssl_certificate != None and cherrypy.server.ssl_private_key != None):    headers['Strict-Transport-Security'] = 'max-age=31536000'  # one year<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，您可能应该使用 <a href="https://docs.cherrypy.org/en/latest/deploy.html#ssl">SSL</a>。</p><h2 id="8-多个-HTTP-服务器支持"><a href="#8-多个-HTTP-服务器支持" class="headerlink" title="8 多个 HTTP 服务器支持"></a>8 多个 HTTP 服务器支持</h2><p>每当您启动引擎时，CherryPy 都会启动其自己的 HTTP 服务器。在某些情况下，您可能希望将应用程序托管在多个端口上。这很容易实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>_cpserver <span class="token keyword">import</span> Serverserver <span class="token operator">=</span> Server<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>socket_port <span class="token operator">=</span> <span class="token number">8090</span>server<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>您可以根据需要创建任意数量的服务器服务器实例，一旦订阅，它们将遵循 CherryPy 引擎的生命周期。</p><h2 id="9-支持-WSGI"><a href="#9-支持-WSGI" class="headerlink" title="9 支持 WSGI"></a>9 支持 WSGI</h2><p>CherryPy 支持 <a href="https://www.python.org/dev/peps/pep-0333">PEP 333</a> 中定义的 WSGI 接口以及 <a href="https://www.python.org/dev/peps/pep-3333">PEP 3333</a> 中的更新。这意味着：</p><ul><li>您可以使用 CherryPy 服务器托管外部 WSGI 应用程序</li><li>CherryPy 应用程序可以由另一个 WSGI 服务器托管</li></ul><h3 id="9-1-使您的-CherryPy-应用程序成为-WSGI-应用程序"><a href="#9-1-使您的-CherryPy-应用程序成为-WSGI-应用程序" class="headerlink" title="9.1 使您的 CherryPy 应用程序成为 WSGI 应用程序"></a>9.1 使您的 CherryPy 应用程序成为 WSGI 应用程序</h3><p>可以从您的应用程序中获取 WSGI 应用程序，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypywsgiapp <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>Application<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> config<span class="token operator">=</span>myconf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只需在任何支持 WSGI 的服务器中使用 <code>wsgiapp</code> 实例。</p><h3 id="9-2-在-CherryPy-中托管外部-WSGI-应用程序"><a href="#9-2-在-CherryPy-中托管外部-WSGI-应用程序" class="headerlink" title="9.2 在 CherryPy 中托管外部 WSGI 应用程序"></a>9.2 在 CherryPy 中托管外部 WSGI 应用程序</h3><p>假设您具有可识别 WSGI 的应用程序，则可以使用 <code>cherrypy.tree.graft</code> 工具将其托管在 CherryPy 服务器中。</p><p>您不能将工具与外部WSGI应用程序一起使用。但是，您仍然可以从 <a href="https://docs.cherrypy.org/en/latest/extend.html#buspattern">CherryPy bus</a> 中受益。</p><h3 id="9-3-不需要-WSGI-接口吗？"><a href="#9-3-不需要-WSGI-接口吗？" class="headerlink" title="9.3 不需要 WSGI 接口吗？"></a>9.3 不需要 WSGI 接口吗？</h3><p>默认的 CherryPy HTTP 服务器支持 PEP 333 和 PEP 3333 中定义的 WSGI 接口。但是，如果您的应用程序是纯 CherryPy 应用程序，则可以切换到完全绕过 WSGI 层的 HTTP 服务器。它将提供轻微的性能提升。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>_cpnative_server <span class="token keyword">import</span> CPHTTPServer    cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">.</span>httpserver <span class="token operator">=</span> CPHTTPServer<span class="token punctuation">(</span>cherrypy<span class="token punctuation">.</span>server<span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用本地服务器，您将无法移植上一节中显示的WSGI应用程序。这样做会在运行时导致服务器错误。</p><h2 id="10-支持-WebSocket"><a href="#10-支持-WebSocket" class="headerlink" title="10 支持 WebSocket"></a>10 支持 WebSocket</h2><p><a href="http://tools.ietf.org/html/rfc6455">WebSocket</a> 是 HTML5 工作组应运而生的最新应用程序协议，可满足双向通信的需求。已经提出了各种黑客手段，例如 Comet，polling 等。</p><p>WebSocket 是从 HTTP 升级请求开始的套接字。执行升级后，基础套接字将保持打开状态，但不再在 HTTP 上下文中使用。相反，两个连接的端点都可以使用套接字将数据推送到另一端。</p><p>CherryPy 本身不支持 WebSocket，但是该功能由名为 <a href="https://github.com/Lawouach/WebSocket-for-Python">ws4py</a> 的外部库提供。</p><h2 id="11-Database-支持"><a href="#11-Database-支持" class="headerlink" title="11 Database 支持"></a>11 Database 支持</h2><p>CherryPy 不会捆绑任何数据库访问权限，但是它的体系结构使集成通用数据库接口（例如 <a href="https://www.python.org/dev/peps/pep-0249">PEP 249</a> 中指定的 DB-API）变得容易。您也可以使用 <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>（例如 <a href="http://sqlalchemy.readthedocs.org/">SQLAlchemy</a> 或 <a href="https://pypi.python.org/pypi/SQLObject/">SQLObject</a>）。</p><p>您将在 <a href="https://bitbucket.org/Lawouach/cherrypy-recipes/src/tip/web/database/sql_alchemy/">cherrypy-recipes</a> 上找到一个食谱，其中介绍了如何使用<a href="https://docs.cherrypy.org/en/latest/extend.html#busplugins">插件</a>和<a href="https://docs.cherrypy.org/en/latest/extend.html#tools">工具</a> 的组合来集成 SQLAlchemy。</p><h2 id="12-HTML-模板支持"><a href="#12-HTML-模板支持" class="headerlink" title="12 HTML 模板支持"></a>12 HTML 模板支持</h2><p>CherryPy不提供任何 HTML 模板，但其体系结构使集成一个模板变得容易。最受欢迎的是 <a href="http://www.makotemplates.org/">Mako</a> 或 <a href="http://jinja.pocoo.org/docs/">Jinja2</a>。</p><p>您将在<a href="https://bitbucket.org/Lawouach/cherrypy-recipes/src/tip/web/templating/">此处</a>找到有关如何使用混合<a href="https://docs.cherrypy.org/en/latest/extend.html#busplugins">插件</a>和<a href="https://docs.cherrypy.org/en/latest/extend.html#tools">工具</a>进行集成的秘诀。</p><h2 id="13-测试您的应用程序"><a href="#13-测试您的应用程序" class="headerlink" title="13 测试您的应用程序"></a>13 测试您的应用程序</h2><p>与其他任何类型的代码一样，Web 应用程序也必须经过测试。CherryPy 提供了一个帮助程序类，以简化编写功能测试的过程。</p><p>这是基本回显应用程序的一个简单示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>test <span class="token keyword">import</span> helper<span class="token keyword">class</span> <span class="token class-name">SimpleCPTest</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span>CPWebCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>            <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>            <span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> message        cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    setup_server <span class="token operator">=</span> <span class="token builtin">staticmethod</span><span class="token punctuation">(</span>setup_server<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_message_should_be_returned_as_is</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token string">"/echo?message=Hello%20world"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertStatus<span class="token punctuation">(</span><span class="token string">'200 OK'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertHeader<span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertBody<span class="token punctuation">(</span><span class="token string">'Hello world'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_non_utf8_message_will_fail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        CherryPy defaults to decode the query-string        using UTF-8, trying to send a query-string with        a different encoding will raise a 404 since        it considers it's a different URL.        """</span>        self<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token string">"/echo?message=A+bient%F4t"</span><span class="token punctuation">,</span>                     headers<span class="token operator">=</span><span class="token punctuation">[</span>                         <span class="token punctuation">(</span><span class="token string">'Accept-Charset'</span><span class="token punctuation">,</span> <span class="token string">'ISO-8859-1,utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=ISO-8859-1'</span><span class="token punctuation">)</span>                     <span class="token punctuation">]</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertStatus<span class="token punctuation">(</span><span class="token string">'404 Not Found'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如您所见，<code>test</code> 继承自该帮助程序类。您应该设置您的应用程序并将其按常规方式安装。然后，定义您的各种测试，并调用辅助方法 <code>getPage</code> 方法以执行请求。只需使用各种专门的 <code>assert*</code> 方法来验证您的工作流程和数据。</p><p>然后可以使用 <code>py.test</code> 运行测试，如下所示：</p><pre class="line-numbers language-sell" data-language="sell"><code class="language-sell">$ py.test -s test_echo_app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-s</code> 是必需的，因为 CherryPy 类还包装了 <code>stdin</code> 和 <code>stdout</code>。如果没有该标志，则测试可能会在失败的断言上挂起，等待输入。</p><p>避免此问题的另一种选择（例如，如果您正在 IDE 中运行测试）是禁用默认情况下启用的交互模式。可以将 <code>WEBTEST_INTERACTIVE</code> 环境变量设置为 <code>False</code> 或 <code>0</code> 来禁用它。</p><p>如果您不想更改环境变量以仅运行一组测试，则也可以将帮助程序类作为子类，在该类中设置 <code>helper.CPWebCase.interactive = False</code>，然后从您的自定义类派生所有测试类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>test <span class="token keyword">import</span> helper<span class="token keyword">class</span> <span class="token class-name">TestsBase</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span>CPWebCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    helper<span class="token punctuation">.</span>CPWebCase<span class="token punctuation">.</span>interactive <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尽管它们是使用<code>unittest</code>模块支持的典型模式编写的，但它们并不是裸露的单元测试。实际上，将为您启动整个 CherryPy 堆栈并运行您的应用程序。如果要真正对 CherryPy 应用程序进行单元测试（即不必启动服务器），则可能需要看一下此<a href="https://bitbucket.org/Lawouach/cherrypy-recipes/src/tip/testing/unit/serverless/">菜谱</a>。</p><p><code>helper</code> 类是从 <code>unittest.TestCase</code> 类派生的。因此，从 pytest 运行时，相对于标准 pytest 测试存在一些限制，尤其是在将测试分组到测试类中时。您可以在<a href="pytest-docs:unittest.html#pytest-features-in-unittest-testcase-subclasses">此页面</a>上找到更多详细信息。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CherryPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CherryPy 基础</title>
      <link href="/dao/post/zh-CN/a20e10870e52.html"/>
      <url>/dao/post/zh-CN/a20e10870e52.html</url>
      
        <content type="html"><![CDATA[<p>翻译自 <a href="https://docs.cherrypy.org/en/latest/basics.html#id3">CherryPy Basics</a></p><p>以下各节将引导您完成 CherryPy 应用程序的基础知识，并介绍一些基本概念。</p><h2 id="1-一分钟的应用示例"><a href="#1-一分钟的应用示例" class="headerlink" title="1 一分钟的应用示例"></a>1 一分钟的应用示例</h2><p>您可以用 CherryPy 编写的最基本的应用程序几乎涉及其所有核心概念。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，对于大多数任务，您将只需要第 1 行中所示的单个 <code>import</code> 语句即可。在讨论这些内容之前，让我们跳到第 11 行，该行显示如何使用 CherryPy 服务器应用程序托管您的应用程序，以及如何在 <code>/</code> 路径中将其与内置的 HTTP 服务器一起使用。</p><p>现在回到实际的应用程序。即使 CherryPy 没有强制要求，大多数时候您的应用程序仍将被编写为 Python 类。这些类的方法将由 CherryPy 调用以响应客户端请求。但是，CherryPy 需要意识到可以使用这种方法，我们说该方法需要公开。这正是 <code>cherrypy.expose</code> 装饰器在第 5 行中所做的。</p><p>执行此程序，在你的浏览器定位到：<code>http://127.0.0.1:8080</code> 可以预览效果。</p><article class="w3-card w3-padding w3-light-grey"><p class="w3-text-yellow w3-wide w3-large">注意</p><p>CherryPy 是一个小型框架，专注于一项任务：接收 HTTP 请求并找到与请求的 URL 匹配的最合适的 Python 函数或方法。与其他知名框架不同，CherryPy 不提供对数据库访问，HTML 模板或任何其他中间件漂亮功能的内置支持。</p><p>简而言之，一旦 CherryPy 找到并调用了公开的方法，作为开发人员，您就应自行提供工具来实现应用程序的逻辑。</p><p>CherryPy 认为您（开发人员）最了解。</p></article><article class="w3-card w3-padding w3-margin-top w3-pale-red"><p class="w3-text-yellow w3-wide w3-large">警告</p><p>前面的示例演示了 CherryPy 接口的简单性，但是您的应用程序可能还会包含其他一些细节：静态服务，更复杂的结构，数据库访问等。这将在教程部分中进行开发。</p><p></p></article><p>CherryPy 是一个微型框架，但不是一个裸露的框架，它带有一些基本工具来涵盖您期望的常用用法。</p><h2 id="2-托管一个或多个应用程序"><a href="#2-托管一个或多个应用程序" class="headerlink" title="2 托管一个或多个应用程序"></a>2 <a href="https://docs.cherrypy.org/en/latest/basics.html#id5">托管一个或多个应用程序</a></h2><p>Web 应用程序需要访问 HTTP 服务器。 CherryPy 提供了自己的，可投入生产的 HTTP 服务器。有两种方法来托管应用程序。</p><h3 id="2-1-单一应用"><a href="#2-1-单一应用" class="headerlink" title="2.1 单一应用"></a>2.1 单一应用</h3><p>最直接的方法是使用 <code>cherrypy.quickstart</code> 函数。它需要至少一个参数，即要托管的应用程序实例。另外两个设置是可选的。首先，可以从中访问应用程序的基本路径。其次，使用配置字典或文件来配置您的应用程序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Blog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Blog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/blog'</span><span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Blog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/blog'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'tools.gzip.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一个意味着您的应用程序将在 <code> http://hostname:port/</code> 上可用，而另两个将使您的博客应用程序在 <code>http://hostname:port/blog</code> 上可用。此外，最后一个为应用程序提供了特定的设置。</p><article class="w3-card w3-padding w3-light-grey"><p class="w3-text-yellow w3-wide w3-large">注意</p><p>注意在第三种情况下，设置如何仍然相对于应用程序，而不是在何处可用，因此使用 {'/': ... } 而不是 {'/blog': ... }。</p></article><h3 id="2-2-多元应用"><a href="#2-2-多元应用" class="headerlink" title="2.2 多元应用"></a>2.2 多元应用</h3><p><code>cherrypy.quickstart</code> 方法适用于单个应用程序，但缺乏使用服务器托管多个应用程序的能力。 为此，必须使用 <code>cherrypy.tree.mount</code> 函数，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Blog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/blog'</span><span class="token punctuation">,</span> blog_conf<span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Forum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/forum'</span><span class="token punctuation">,</span> forum_conf<span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>block<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质上，<code>cherrypy.tree.mount</code> 具有与 <code>cherrypy.quickstart</code> 相同的参数：应用程序，托管路径段和配置。最后两行只是启动应用程序服务器。</p><article class="w3-card w3-padding w3-light-grey"><p class="w3-text-yellow w3-wide w3-large">重要</p><p>    <code>cherrypy.quickstart</code> 和 <code>cherrypy.tree.mount</code> 不是唯一的。例如，前几行可以写成：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>Blog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/blog'</span><span class="token punctuation">,</span> blog_conf<span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Forum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/forum'</span><span class="token punctuation">,</span> forum_conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></article><article class="w3-card w3-padding w3-margin-top w3-light-grey"><p class="w3-text-yellow w3-wide w3-large">注意</p><p>您也可以 <a href="https://docs.cherrypy.org/en/latest/advanced.html#hostwsgiapp"> 托管外部 WSGI 应用程序</a>。</p></article><h2 id="3-Logging"><a href="#3-Logging" class="headerlink" title="3 Logging"></a>3 <a href="https://docs.cherrypy.org/en/latest/basics.html#id8">Logging</a></h2><p>日志记录（Logging）是任何应用程序中的重要任务。CherryPy 将记录所有传入的请求以及协议错误。</p><p>为此，CherryPy 管理着两个记录器：</p><ol><li>记录每个传入请求的访问权限</li><li>跟踪错误或其他应用程序级别消息的应用程序/错误日志</li></ol><p>您的应用程序可以通过调用 <code>cherrypy.log</code> 来利用第二个记录器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"hello there"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您还可以记录异常：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>   cherrypy<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"kaboom!"</span><span class="token punctuation">,</span> traceback<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这两个日志都将写入由配置中的以下键标识的文件：</p><ul><li>使用<a href="http://en.wikipedia.org/wiki/Common_Log_Format">通用日志格式</a>的传入请求的 <code>log.access_file</code></li><li>其他日志的 <code>log.error_file</code></li></ul><article class="w3-card w3-padding w3-margin-top w3-light-grey"><p class="w3-text-yellow w3-wide w3-large">也可以参考</p><p>有关 CherryPy 的日志记录体系结构的更多详细信息，请参阅 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy._cplogging.html#module-cherrypy._cplogging">cherrypy._cplogging</a> 模块。</p></article><h3 id="3-1-Disable-logging"><a href="#3-1-Disable-logging" class="headerlink" title="3.1 Disable logging"></a>3.1 <a href="https://docs.cherrypy.org/en/latest/basics.html#id9">Disable logging</a></h3><p>您可能有兴趣禁用某个日志。</p><p>要禁用文件日志记录，只需在<a href="https://docs.cherrypy.org/en/latest/basics.html#globalsettings">全局配置</a>中为 <code>log.access_file</code> 或 <code>log.error_file</code> 键对应更多值设置一个空字符串。</p><p>要禁用控制台日志记录，请将 <code>log.screen</code> 设置为 <code>False</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'log.screen'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                        <span class="token string">'log.access_file'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                        <span class="token string">'log.error_file'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-与您的其他记录器一起玩"><a href="#3-2-与您的其他记录器一起玩" class="headerlink" title="3.2 与您的其他记录器一起玩"></a>3.2 <a href="https://docs.cherrypy.org/en/latest/basics.html#id10">与您的其他记录器一起玩</a></h3><p>您的应用程序可能显然已经在使用日志记录模块来跟踪应用程序级别的消息。下面是一个简单的设置示例。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> logging<span class="token punctuation">.</span>config<span class="token keyword">import</span> cherrypylogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>db_logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">)</span>LOG_CONF <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'formatters'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'void'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'standard'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'%(asctime)s [%(levelname)s] %(name)s: %(message)s'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'level'</span><span class="token punctuation">:</span><span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'logging.StreamHandler'</span><span class="token punctuation">,</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'standard'</span><span class="token punctuation">,</span>            <span class="token string">'stream'</span><span class="token punctuation">:</span> <span class="token string">'ext://sys.stdout'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'cherrypy_console'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'level'</span><span class="token punctuation">:</span><span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'logging.StreamHandler'</span><span class="token punctuation">,</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'void'</span><span class="token punctuation">,</span>            <span class="token string">'stream'</span><span class="token punctuation">:</span> <span class="token string">'ext://sys.stdout'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'cherrypy_access'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'level'</span><span class="token punctuation">:</span><span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.handlers.RotatingFileHandler'</span><span class="token punctuation">,</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'void'</span><span class="token punctuation">,</span>            <span class="token string">'filename'</span><span class="token punctuation">:</span> <span class="token string">'access.log'</span><span class="token punctuation">,</span>            <span class="token string">'maxBytes'</span><span class="token punctuation">:</span> <span class="token number">10485760</span><span class="token punctuation">,</span>            <span class="token string">'backupCount'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string">'encoding'</span><span class="token punctuation">:</span> <span class="token string">'utf8'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'cherrypy_error'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'level'</span><span class="token punctuation">:</span><span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.handlers.RotatingFileHandler'</span><span class="token punctuation">,</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'void'</span><span class="token punctuation">,</span>            <span class="token string">'filename'</span><span class="token punctuation">:</span> <span class="token string">'errors.log'</span><span class="token punctuation">,</span>            <span class="token string">'maxBytes'</span><span class="token punctuation">:</span> <span class="token number">10485760</span><span class="token punctuation">,</span>            <span class="token string">'backupCount'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string">'encoding'</span><span class="token punctuation">:</span> <span class="token string">'utf8'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'loggers'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">''</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'db'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span> <span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">False</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'cherrypy.access'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'cherrypy_access'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">False</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'cherrypy.error'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'cherrypy_console'</span><span class="token punctuation">,</span> <span class="token string">'cherrypy_error'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">False</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"boom"</span><span class="token punctuation">)</span>        db_logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"bam"</span><span class="token punctuation">)</span>        cherrypy<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"bang"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'log.screen'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token string">'log.access_file'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                            <span class="token string">'log.error_file'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span>cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>unsubscribe<span class="token punctuation">(</span><span class="token string">'graceful'</span><span class="token punctuation">,</span> cherrypy<span class="token punctuation">.</span>log<span class="token punctuation">.</span>reopen_files<span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dictConfig<span class="token punctuation">(</span>LOG_CONF<span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此代码段中，我们创建一个<a href="https://docs.python.org/2/library/logging.config.html#logging.config.dictConfig">配置字典</a>，然后将其传递到 <code>logging</code> 模块以配置记录器：</p><ul><li>默认的根记录器与单个流处理程序关联</li><li>db 后端的记录器，还有一个流处理程序</li></ul><p>另外，我们重新配置 CherryPy 记录器：</p><ul><li>顶级 <code>cherrypy.access</code> 记录器，将请求记录到文件中</li><li><code>cherrypy.error</code> 记录器，将其他所有内容记录到文件中并登录到控制台</li></ul><p>当自动重新加载程序启动时，我们还阻止 CherryPy 尝试打开其日志文件。由于我们甚至都不让 CherryPy 首先打开它们，因此这不是严格要求的。但是，这样可以避免浪费时间在无用的东西上。</p><h2 id="4-Configuring"><a href="#4-Configuring" class="headerlink" title="4 Configuring"></a>4 <a href="https://docs.cherrypy.org/en/latest/basics.html#id11">Configuring</a></h2><p>CherryPy 带有细粒度的配置机制，可以在各种级别上进行设置。</p><article class="w3-card w3-padding w3-margin-top w3-light-grey"><p class="w3-text-yellow w3-wide w3-large">也可以参考</p><p>复习了基础知识后，请参考有关配置的<a href="https://docs.cherrypy.org/en/latest/config.html#configindepth">深入讨论</a>。</p></article><h3 id="4-1-Global-server-configuration"><a href="#4-1-Global-server-configuration" class="headerlink" title="4.1 Global server configuration"></a>4.1 <a href="https://docs.cherrypy.org/en/latest/basics.html#id12">Global server configuration</a></h3><p>要配置 HTTP 和应用程序服务器，请使用 <code>cherrypy.config.update</code> 方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'server.socket_port'</span><span class="token punctuation">:</span> <span class="token number">9090</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>cherrypy.config</code> 对象是一个字典，<code>update</code> 方法将传递的字典合并到其中。您也可以改为传递文件（假设使用 <code>server.conf</code> 文件）：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[global]server.socket_port: 9090<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">"server.conf"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><article class="w3-light-grey"><p class="w3-red">警告</p><code>cherrypy.config.update</code> 并非用于配置应用程序。这是一个常见的错误。它用于配置服务器和引擎。</article><h3 id="4-2-Per-application-configuration"><a href="#4-2-Per-application-configuration" class="headerlink" title="4.2 Per-application configuration"></a>4.2 <a href="https://docs.cherrypy.org/en/latest/basics.html#id13">Per-application configuration</a></h3><p>要配置您的应用程序，请在将应用程序与服务器关联时传入字典或文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>myapp<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'tools.gzip.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或通过文件（例如，称为 <code>app.conf</code>）：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.gzip.on: True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>myapp<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">"app.conf"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尽管您可以全局方式定义大多数配置，但有时在代码中应用它们的位置定义它们很方便。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>gzip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的变体符号：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world!"</span>    index<span class="token punctuation">.</span>_cp_config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'tools.gzip.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种方法具有相同的效果，因此请选择最适合您的样式的方法。</p><h3 id="4-3-Additional-application-settings"><a href="#4-3-Additional-application-settings" class="headerlink" title="4.3 Additional application settings"></a>4.3 <a href="https://docs.cherrypy.org/en/latest/basics.html#id14">Additional application settings</a></h3><p>您可以添加非特定于请求URL的设置，并从页面处理程序中检索它们，如下所示：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.gzip.on: True[googleapi]key = "..."appid = "..."<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        google_appid <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'googleapi'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'appid'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">"hello world!"</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>Root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">"app.conf"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Cookies"><a href="#5-Cookies" class="headerlink" title="5 Cookies"></a>5 <a href="https://docs.cherrypy.org/en/latest/basics.html#id15">Cookies</a></h2><p>CherryPy 使用 Python 中的 <code>Cookie</code> 模块，尤其是 <code>Cookie.SimpleCookie</code> 对象类型来处理 Cookie。</p><ul><li>要将 Cookie 发送到浏览器，请设置 <code>cherrypy.response.cookie[key] = value</code>。</li><li>要检索浏览器发送的 cookie，请使用 <code>cherrypy.request.cookie[key]</code>。</li><li>要删除 cookie（在客户端），必须发送其有效时间设置为 <code>0</code> 的 cookie：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>response<span class="token punctuation">.</span>cookie<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> valuecherrypy<span class="token punctuation">.</span>response<span class="token punctuation">.</span>cookie<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'expires'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>请务必注意，请求 Cookie 不会自动复制到响应 Cookie 中。客户端将在每个请求上发送相同的 cookie，因此每次都应填充 <code>cherrypy.request.cookie</code>。<br>但是服务器不需要在每次响应时都发送相同的 cookie；因此，<code>cherrypy.response.cookie</code> 通常为空。故而，当您希望“delete”（过期）cookie 时，必须首先设置<br><code>cherrypy.response.cookie[key] = value</code>，然后将其 <code>expires</code> 属性设置为 <code>0</code>。</p><p>扩展示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyCookieApp</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cookie <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>response<span class="token punctuation">.</span>cookie        cookie<span class="token punctuation">[</span><span class="token string">'cookieName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'cookieValue'</span>        cookie<span class="token punctuation">[</span><span class="token string">'cookieName'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'/'</span>        cookie<span class="token punctuation">[</span><span class="token string">'cookieName'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'max-age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3600</span>        cookie<span class="token punctuation">[</span><span class="token string">'cookieName'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">"&lt;html&gt;&lt;body&gt;Hello, I just sent you a cookie&lt;/body&gt;&lt;/html&gt;"</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cookie <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>cookie        res <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html&gt;&lt;body&gt;Hi, you sent me %s cookies.&lt;br /&gt;                Here is a list of cookie names/values:&lt;br /&gt;"""</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> cookie<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">"name: %s, value: %s&lt;br&gt;"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> cookie<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token string">"&lt;/body&gt;&lt;/html&gt;"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>MyCookieApp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/cookie'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Using-sessions"><a href="#6-Using-sessions" class="headerlink" title="6 Using sessions"></a>6 <a href="https://docs.cherrypy.org/en/latest/basics.html#id16">Using sessions</a></h2><p>会话是开发人员用来识别用户并同步其活动的最常用机制之一。默认情况下，CherryPy 不激活会话，因为它不是必需的功能，要使其启用，只需在配置中添加以下设置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.sessions.on: True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>myapp<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">"app.conf"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，会话存储在 RAM 中，因此，如果重新启动服务器，则所有当前会话都将丢失。您可以将它们存储在 memcached 或文件系统中。</p><p>在应用程序中使用会话的操作如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'count'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">:</span>       cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此代码段中，每次调用索引页面处理程序时，当前用户的会话的 <code>'count'</code> 键都增加 1。</p><p>CherryPy 通过检查与请求一起发送的 cookie 来知道要使用哪个会话。此 Cookie 包含 CherryPy 用于从存储中加载用户会话的会话标识符。</p><article class="w3-light-grey"><p class="w3-yellow">也可以看看</p><p>有关会话接口和实现的更多详细信息，请参阅 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.lib.sessions.html#module-cherrypy.lib.sessions">cherrypy.lib.sessions</a> 模块。值得注意的是，您将了解会话到期。</p></article><h3 id="6-1-Filesystem-backend"><a href="#6-1-Filesystem-backend" class="headerlink" title="6.1 Filesystem backend"></a>6.1 <a href="https://docs.cherrypy.org/en/latest/basics.html#id17">Filesystem backend</a></h3><p>使用文件系统很简单，不会在重新启动之间丢失会话。每个会话都保存在给定目录中的自己的文件中。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.sessions.on: Truetools.sessions.storage_class = cherrypy.lib.sessions.FileSessiontools.sessions.storage_path = "/some/directory"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-Memcached-backend"><a href="#6-2-Memcached-backend" class="headerlink" title="6.2 Memcached backend"></a>6.2 <a href="https://docs.cherrypy.org/en/latest/basics.html#id18">Memcached backend</a></h3><p><a href="http://memcached.org/">Memcached</a> 是 RAM 上流行的密钥库，它是分布式的，如果您想在运行 CherryPy 的进程之外共享会话，它是一个不错的选择。要求安装 Python <a href="https://pypi.org/project/memcached">memcached 软件包</a>，这可以通过安装 <code>cherrypy[memcached_session]</code> 来指示。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.sessions.on: Truetools.sessions.storage_class = cherrypy.lib.sessions.MemcachedSession<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-3-Other-backends"><a href="#6-3-Other-backends" class="headerlink" title="6.3 Other backends"></a>6.3 <a href="https://docs.cherrypy.org/en/latest/basics.html#id19">Other backends</a></h3><p>任何其他库都可以实现会话后端。只需将 <code>cherrypy.lib.sessions.Session</code> 子类化，并将该子类表示为 <code>tools.sessions.storage_class</code>。</p><h2 id="7-Static-content-serving"><a href="#7-Static-content-serving" class="headerlink" title="7 Static content serving"></a>7 <a href="https://docs.cherrypy.org/en/latest/basics.html#id20">Static content serving</a></h2><p>CherryPy 可以提供您的静态内容，例如图像，JavaScript 和 CSS 资源等。</p><article class="w3-light-grey w3-card"><p class="w3-pale-red">笔记</p><p>CherryPy 使用 <code>mimetypes</code> 模块来确定服务特定资源的最佳内容类型。如果选择无效，则可以如下设置更多的媒体类型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mimetypesmimetypes<span class="token punctuation">.</span>types_map<span class="token punctuation">[</span><span class="token string">'.csv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/csv'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p></article><h3 id="7-1-Serving-a-single-file"><a href="#7-1-Serving-a-single-file" class="headerlink" title="7.1 Serving a single file"></a>7.1 <a href="https://docs.cherrypy.org/en/latest/basics.html#id21">Serving a single file</a></h3><p>您可以按以下方式提供单个文件：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/style.css]tools.staticfile.on = Truetools.staticfile.filename = "/home/site/style.css"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CherryPy 将自动响应 URL，例如 <code>http://hostname/style.css</code>。</p><h3 id="7-2-Serving-a-whole-directory"><a href="#7-2-Serving-a-whole-directory" class="headerlink" title="7.2 Serving a whole directory"></a>7.2 <a href="https://docs.cherrypy.org/en/latest/basics.html#id22">Serving a whole directory</a></h3><p>服务整个目录类似于单个文件：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/static]tools.staticdir.on = Truetools.staticdir.dir = "/home/site/static"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假设您在 <code>static/js/my.js</code> 中有一个文件，CherryPy 将自动响应 URL，例如 <code>http://hostname/static/js/my.js</code>。</p><article class="w3-light-grey w3-card"><p class="w3-pale-yellow">注意</p><p>CherryPy 始终需要将要服务的文件或目录的绝对路径。如果要配置多个静态部分，但它们位于同一根目录中，则可以使用以下快捷方式：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/]tools.staticdir.root = "/home/site"[/static]tools.staticdir.on = Truetools.staticdir.dir = "static"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></article><h3 id="7-3-指定-index-文件"><a href="#7-3-指定-index-文件" class="headerlink" title="7.3 指定 index 文件"></a>7.3 <a href="https://docs.cherrypy.org/en/latest/basics.html#id23">指定 <code>index</code> 文件</a></h3><p>默认情况下，指示未找到路径“/”的静态目录的根，CherryPy 将响应 404 错误。要指定索引文件，可以使用以下命令：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/static]tools.staticdir.on = Truetools.staticdir.dir = "/home/site/static"tools.staticdir.index = "index.html"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假设您在 <code>static/index.html</code> 上有一个文件，CherryPy 将通过返回其内容自动响应 URL，例如 <code>http://hostname/static/</code>。</p><h3 id="7-4-允许下载文件"><a href="#7-4-允许下载文件" class="headerlink" title="7.4 允许下载文件"></a>7.4 <a href="https://docs.cherrypy.org/en/latest/basics.html#id24">允许下载文件</a></h3><p>使用 <code>"application/x-download"</code> 响应内容类型，您可以告诉浏览器应该将资源下载到用户的计算机上而不是显示。</p><p>例如，您可以编写一个页面处理程序，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>static <span class="token keyword">import</span> serve_file<span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> serve_file<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">"application/x-download"</span><span class="token punctuation">,</span> <span class="token string">"attachment"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设文件路径是您计算机上的有效路径，那么浏览器会将响应视为可下载的内容。</p><article class="w3-light-grey w3-card"><p class="w3-pale-red">警告</p><p>上面的页面处理程序本身就有安全风险，因为可以访问服务器的任何文件（如果运行服务器的用户对其具有权限）。</p></article><h2 id="8-Dealing-with-JSON"><a href="#8-Dealing-with-JSON" class="headerlink" title="8 Dealing with JSON"></a>8 <a href="https://docs.cherrypy.org/en/latest/basics.html#id25">Dealing with JSON</a></h2><p>CherryPy 具有对请求和/或响应的 JSON 编码和解码的内置支持。</p><h3 id="8-1-Decoding-request"><a href="#8-1-Decoding-request" class="headerlink" title="8.1 Decoding request"></a>8.1 <a href="https://docs.cherrypy.org/en/latest/basics.html#id26">Decoding request</a></h3><p>要使用 JSON 自动解码请求的内容，请执行以下操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>json_in</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> cherrypy<span class="token punctuation">.</span>request<span class="token punctuation">.</span>json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附加到请求的 <code>json</code> 属性包含解码后的内容。</p><h3 id="8-2-Encoding-response"><a href="#8-2-Encoding-response" class="headerlink" title="8.2 Encoding response"></a>8.2 <a href="https://docs.cherrypy.org/en/latest/basics.html#id27">Encoding response</a></h3><p>要使用 JSON 自动编码响应的内容，请执行以下操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>json_out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CherryPy 将使用 JSON 对您的页面处理程序返回的所有内容进行编码。并非所有类型的对象都可以本地编码。</p><h2 id="9-Authentication"><a href="#9-Authentication" class="headerlink" title="9 Authentication"></a>9 <a href="https://docs.cherrypy.org/en/latest/basics.html#id28">Authentication</a></h2><p>CherryPy 支持以下两种非常简单的基于 HTTP 的身份验证机制，在 <a href="https://tools.ietf.org/html/rfc7616.html">RFC 7616</a> 和 <a href="https://tools.ietf.org/html/rfc7617.html">RFC 7617</a>（已淘汰 <a href="https://tools.ietf.org/html/rfc2617.html">RFC 2617</a>）中进行了描述：Basic 和 Digest。众所周知，它们会触发浏览器的弹出窗口，询问用户其名称和密码。</p><h3 id="9-1-Basic"><a href="#9-1-Basic" class="headerlink" title="9.1 Basic"></a>9.1 <a href="https://docs.cherrypy.org/en/latest/basics.html#id29">Basic</a></h3><p>基本身份验证是最简单的身份验证形式，但是由于用户的凭据已嵌入到请求中，因此它不是安全的形式。除非您在 SSL 上或封闭的网络中运行，否则我们建议不要使用它。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>lib <span class="token keyword">import</span> auth_basicUSERS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'jon'</span><span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">validate_password</span><span class="token punctuation">(</span>realm<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> username <span class="token keyword">in</span> USERS <span class="token keyword">and</span> USERS<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">==</span> password<span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>conf <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'/protected/area'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token string">'tools.auth_basic.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>       <span class="token string">'tools.auth_basic.realm'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>       <span class="token string">'tools.auth_basic.checkpassword'</span><span class="token punctuation">:</span> validate_password<span class="token punctuation">,</span>       <span class="token string">'tools.auth_basic.accept_charset'</span><span class="token punctuation">:</span> <span class="token string">'UTF-8'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>myapp<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简而言之，您必须提供一个由 CherryPy 调用的函数，该函数传递从请求中解码的用户名和密码。</p><p>该函数可以从其必须具有的任何源中读取其数据：文件，数据库，内存等。</p><h3 id="9-2-Digest"><a href="#9-2-Digest" class="headerlink" title="9.2 Digest"></a>9.2 <a href="https://docs.cherrypy.org/en/latest/basics.html#id30">Digest</a></h3><p>摘要式身份验证的不同之处在于，凭据不是由请求携带的，因此它比基本身份验证更为安全。</p><p>CherryPy 的摘要支持具有与上述基本支持类似的界面。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>lib <span class="token keyword">import</span> auth_digestUSERS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'jon'</span><span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">}</span>conf <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'/protected/area'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'tools.auth_digest.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'tools.auth_digest.realm'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        <span class="token string">'tools.auth_digest.get_ha1'</span><span class="token punctuation">:</span> auth_digest<span class="token punctuation">.</span>get_ha1_dict_plain<span class="token punctuation">(</span>USERS<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'tools.auth_digest.key'</span><span class="token punctuation">:</span> <span class="token string">'a565c27146791cfb'</span><span class="token punctuation">,</span>        <span class="token string">'tools.auth_digest.accept_charset'</span><span class="token punctuation">:</span> <span class="token string">'UTF-8'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>myapp<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-SO-PEERCRED"><a href="#9-3-SO-PEERCRED" class="headerlink" title="9.3 SO_PEERCRED"></a>9.3 <a href="https://docs.cherrypy.org/en/latest/basics.html#id31">SO_PEERCRED</a></h3><p>UNIX 文件和抽象套接字还具有低级身份验证。这是启用它的方式：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[global]server.peercreds: Trueserver.peercreds_resolve: Trueserver.socket_file: /var/run/cherrypy.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>server.peercreds</code> 允许查找连接的进程 ID，用户 ID 和组ID。它们可以作为 WSGI 环境变量进行访问：</p><ul><li>X_REMOTE_PID</li><li>X_REMOTE_UID</li><li>X_REMOTE_GID</li></ul><p><code>server.peercreds_resolve</code> 将其解析为用户名和组名。它们可以作为 WSGI 环境变量进行访问：</p><ul><li>X_REMOTE_USER and REMOTE_USER</li><li>X_REMOTE_GROUP</li></ul><h2 id="10-Favicon"><a href="#10-Favicon" class="headerlink" title="10 Favicon"></a>10 <a href="https://docs.cherrypy.org/en/latest/basics.html#id32">Favicon</a></h2><p>CherryPy 使用静态文件工具将其自己的甜红色 cherrypy 作为默认图标提供服务。您可以按以下方式提供自己的网站图标：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">:</span>   <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>   <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>HelloWorld<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">'/favicon.ico'</span><span class="token punctuation">:</span>            <span class="token punctuation">{</span>                <span class="token string">'tools.staticfile.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                <span class="token string">'tools.staticfile.filename'</span><span class="token punctuation">:</span> <span class="token string">'/path/to/myfavicon.ico'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关更多详细信息，请参阅<a href="https://docs.cherrypy.org/en/latest/basics.html#staticontent">静态服务</a>部分。</p><p>您还可以使用文件进行配置：</p><article>    <link rel="stylesheet" href="https://xinetzone.github.io/w3css/4/w3.css">    <link rel="stylesheet" href="https://xinetzone.github.io/xinet-css/tabs.css">    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">conf</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[/favicon.ico]tools.staticfile.on: Truetools.staticfile.filename: "/path/to/myfavicon.ico"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">Python</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">:</span><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>HelloWorld<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">"app.conf"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        </div>    </div></article>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CherryPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CherryPy：极简主义的 Python Web 框架</title>
      <link href="/dao/post/zh-CN/9a6e76240070.html"/>
      <url>/dao/post/zh-CN/9a6e76240070.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://www.cherrypy.org/">CherryPy</a> 是一个 pythonic 的，面向对象的 Web 框架。CherryPy 允许开发人员以与构建任何其他面向对象的 Python 程序相同的方式构建 Web 应用程序。可以在更短的时间内开发出更小的源代码。</p><p>CherryPy 应用程序通常如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">:</span>    <span class="token comment"># CherryPy 绝不会发布未将 `expose` 属性设置为 `True` 的方法</span>    <span class="token comment"># 在 Web 中公开 index 方法</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># CherryPy 将为根 URI（"/"）调用此方法，并将其返回值发送给客户端</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token comment"># 在尝试将请求 URI 映射到对象时，CherryPy 始终以 `app.root` 开始，</span><span class="token comment"># 因此我们需要挂载请求处理程序根。 对 `'/'` 的请求将映射到 `HelloWorld().index()`。</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>HelloWorld<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了充分利用 CherryPy，您应该从<a href="https://docs.cherrypy.org/en/latest/tutorials.html#tutorials">教程</a>开始，它将指导您完成框架的最常见方面。完成后，您可能需要浏览<a href="https://docs.cherrypy.org/en/latest/basics.html#basics">基础</a>和<a href="https://docs.cherrypy.org/en/latest/advanced.html#advanced">高级</a>部分，以演示如何实现某些操作。最后，您将需要仔细阅读配置和<a href="https://docs.cherrypy.org/en/latest/extend.html#extend">扩展</a>部分，那是有关框架提供的强大功能的更深入的内容。</p><h2 id="架构解析"><a href="#架构解析" class="headerlink" title="架构解析"></a>架构解析</h2><p>CherryPy 不是由一层组成，而是由四个独立的 API 层组成。</p><article>    <link rel="stylesheet" href="https://xinetzone.github.io/w3css/4/w3.css">    <link rel="stylesheet" href="https://xinetzone.github.io/xinet-css/tabs.css">    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">应用层</label>        <div class="tab-content w3-padding">            <p>                <strong>应用层</strong>是最简单的。CherryPy 应用程序被编写为类和方法的树，其中树中的每个分支都对应于 URL 路径中的一个分支。每个方法都是一个“page                handler”，它接收 GET 和 POST 参数作为关键字参数，并返回或产生 response                的（HTML）主体（body）。特殊方法名称“index”用于以斜杠结尾的路径，特殊方法名称“default”用于通过单个处理程序处理多个路径。该层还包括：            </p><ul>                <li><code>exposed</code> 属性 (和 <code>cherrypy.expose</code>)</li>                <li><code>cherrypy.quickstart()</code></li>                <li><code>_cp_config attributes</code></li>                <li><code>cherrypy.tools</code> (包括 <code>cherrypy.session</code>)</li>                <li><code>cherrypy.url()</code></li>            </ul>            <p></p>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">环境层</label>        <div class="tab-content w3-padding">            <p>                开发人员在各个级别都使用“<strong>环境层</strong>”。它通过一组（默认）顶级（top-level）对象提供有关当前请求和响应以及应用程序和服务器环境的信息：            </p><ul>                <li><code>cherrypy.request</code></li>                <li><code>cherrypy.response</code></li>                <li><code>cherrypy.engine</code></li>                <li><code>cherrypy.server</code></li>                <li><code>cherrypy.tree</code></li>                <li><code>cherrypy.config</code></li>                <li><code>cherrypy.thread_data</code></li>                <li><code>cherrypy.log</code></li>                <li><code>cherrypy.HTTPError</code>, <code>NotFound</code>, 和 <code>HTTPRedirect</code></li>                <li><code>cherrypy.lib</code></li>            </ul>            <p></p>        </div>        <input id="tab-set--0-input--3" name="tab-set--0" type="radio">        <label for="tab-set--0-input--3">扩展层</label>        <div class="tab-content w3-padding">            <p>                <strong>扩展层</strong>允许高级用户构造和共享他们自己的插件。它包括：            </p><ul>                <li><code>Hook</code> API</li>                <li><code>Tool</code> API</li>                <li><code>Toolbox</code> API</li>                <li><code>Dispatch</code> API</li>                <li>Config Namespace API</li>            </ul>            <p></p>        </div>        <input id="tab-set--0-input--4" name="tab-set--0" type="radio">        <label for="tab-set--0-input--4">核心层</label>        <div class="tab-content w3-padding">            <p>                <strong>核心层</strong> 使用核心 API 来构造可在更高层使用的默认组件。您可以将默认组件视为 CherryPy                的“参考实现”。Megaframeworks（和高级用户）可以用自定义或扩展组件替换默认组件。核心 API 是：            </p><ul>                <li>Application API</li>                <li>Engine API</li>                <li>Request API</li>                <li>Server API</li>                <li>WSGI API</li>            </ul>            <p></p>        </div>    </div></article><p>这些 API 在 <a href="https://github.com/cherrypy/cherrypy/wiki/CherryPySpec">CherryPy 规范</a> 中进行了描述。</p><h2 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h2><p>首先了解一些基础知识。</p><h3 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h3><p>下面的示例演示了用 CherryPy 编写的最基本的应用程序。它启动一个服务器并托管一个应用程序，该应用程序将在请求时提供服务到 <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"你好世界！"</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>HelloWorld<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，终端可以看到：</p><p><img src="/dao/post/zh-CN/9a6e76240070/hello.png"></p><p>这告诉你一些事情。前三行表示服务器将处理&nbsp;<a href="https://docs.python.org/3/library/signal.html#module-signal" title="(在 Python v3.8)"><code>signal</code></a>&nbsp;。下一行告诉您服务器的当前状态，因为此时服务器处于&nbsp;<code>STARTING</code>&nbsp;阶段。然后，系统会通知您的应用程序没有为其设置特定的配置。接下来，服务器启动一些内部实用程序，稍后我们将对此进行解释。最后，服务器表明它现在已经准备好接受传入的通信，因为它正在监听地址 <code>127.0.0.1:8080</code>。换句话说，在那个阶段，您的应用程序就可以使用了。</p><p>然后，在浏览器打开输入网址： <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a>，可以看到：</p><p><img src="/dao/post/zh-CN/9a6e76240070/hello1.png"></p><h4 id="不同的函数产生不同的-URL"><a href="#不同的函数产生不同的-URL" class="headerlink" title="不同的函数产生不同的 URL"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id5">不同的函数产生不同的 URL</a></h4><p>显然，您的应用程序可能会处理多个 URL。假设您有一个应用程序，每次调用它时都会生成一个随机字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">StringGenerator</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"你好世界！"</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在转到 <code>http://localhost:8080/generate</code>，您的浏览器将显示一个随机字符串。</p><p><img src="/dao/post/zh-CN/9a6e76240070/urls.png"></p><p>让我们花一分钟时间来分解这里发生的事情。这是您在浏览器中键入的 URL: <a href="http://localhost:8080/generate">http://localhost:8080/generate</a></p><p>此 URL 包含多个部分：</p><ul><li><p>  <code>http://</code>&nbsp;这大致表明它是一个使用 HTTP 协议的 URL（请参见&nbsp;<a href="https://tools.ietf.org/html/rfc2616.html"><strong>RFC 2616</strong></a>&nbsp;）</p></li><li><p>  <code>localhost:8080</code>&nbsp;是服务器的地址。它由主机名和端口组成。</p></li><li><p>  <code>/generate</code>&nbsp;它是 URL 的路径段。这就是 CherryPy 用来定位 <a href="https://docs.cherrypy.org/en/latest/glossary.html#term-exposed">exposed</a> 响应的函数或方法。</p></li></ul><p>在这里，CherryPy 使用&nbsp;<a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.lib.covercp.html#cherrypy.lib.covercp.CoverStats.index" title="cherrypy.lib.covercp.CoverStats.index"><code>index()</code></a>&nbsp;方法处理&nbsp;<code>/</code>&nbsp;以及&nbsp;<code>generate()</code>&nbsp;方法处理&nbsp;<code>/generate</code>。</p><p>当然也可以是中文作为方法名称，比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">StringGenerator</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"你好世界！"</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> 生成<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，将创建子路径 <code>http://localhost:8080/生成</code>（不推荐使用中文）。</p><h4 id="设置-URL-的参数"><a href="#设置-URL-的参数" class="headerlink" title="设置 URL 的参数"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#tutorial-3-my-urls-have-parameters" title="Permalink to this headline">设置 URL 的参数</a></h4><p>在前面的教程中，我们已经了解如何创建可以生成随机字符串的应用程序。现在假设您希望动态地指示该字符串的长度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> random<span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">StringGenerator</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"你好世界！"</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在转到 <code>http://localhost:8080/generate?length=16</code>，浏览器将显示长度为 16 的生成字符串。请注意，我们也可以从 Python 的默认参数值中获益，以支持 URL，如 <code>http://localhost:8080/generate</code>。</p><p>在这样的 URL 中，后面的部分 <code>?</code> 称为查询字符串。一般地，查询字符串通过传递一组（键、值）对来将 URL 上下文化（contextualize）。它们的格式是 <code>key=value</code>，且使用 <code>&amp;</code> 分隔。</p><p>注意我们必须转换给定的 <code>length</code> 值为整数。实际上，值是作为字符串从客户端发送到服务器的。</p><p>与 CherryPy 将 URL 路径段映射到公开的函数很相似，查询字符串键映射到公开的函数参数。</p><p>下面介绍一些进阶是教程。</p><h3 id="简单的配置"><a href="#简单的配置" class="headerlink" title="简单的配置"></a>简单的配置</h3><p>在继续之前，让我们讨论一下关于配置的消息。默认情况下，CherryPy 有一个特性，它将检查配置应用程序时可以提供的设置的语法正确性。如果没有提供，日志中将显示警告消息。那根原木是无害的，不会阻止 CherryPy 工作。你可以参考&nbsp;<a href="https://docs.cherrypy.org/en/latest/basics.html#perappconf">配置的文档</a>&nbsp;了解如何设置配置。</p><p>函数 <code>quickstart(root=None, script_name='', config=None)</code>，利用参数 <code>config</code> 可以修改一些配置参数。</p><p><code>config</code> 可以是包含应用程序配置的文件或字典（<code>dict</code>）。如果包含 <code>[global]</code> 部分，这些配置项将在（站点范围内） <code>global</code> 中使用配置。下面创建一个配置文件 <code>base-server.conf</code>，内容如下：</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">global</span><span class="token punctuation">]</span><span class="token key property">server.socket_host</span> <span class="token punctuation">=</span> <span class="token string">"127.0.0.1"</span><span class="token key property">server.socket_port</span> <span class="token punctuation">=</span> <span class="token number">9999</span><span class="token key property">server.thread_pool</span> <span class="token punctuation">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样，便可以修改默认的端口为 <code>9999</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">:</span>    <span class="token comment"># CherryPy 绝不会发布未将 `expose` 属性设置为 `True` 的方法</span>    <span class="token comment"># 在 Web 中公开 index 方法</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># CherryPy 将为根 URI（"/"）调用此方法，并将其返回值发送给客户端</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span>config <span class="token operator">=</span> <span class="token string">'configs/base-server.conf'</span> <span class="token comment"># 这里也可以是 dict 形式</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>HelloWorld<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token operator">=</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建-HTML-模板"><a href="#创建-HTML-模板" class="headerlink" title="创建 HTML 模板"></a>创建 HTML 模板</h3><p>CherryPy 是用于构建 Web 应用程序的 Web 框架。应用程序采用的最传统的形式是通过与 CherryPy 服务器通信的 HTML 用户界面。为此，可以创建一个载入 HTML 模板，加快软件开发效率。</p><ol><li>我们借助 <a href="https://docs.python.org/3/library/string.html"><code>string</code></a>.<code>Template</code> 创建一个基础的 HTML 模板 <code>base.html</code>：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${lang}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>${title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    ${body}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接着，创建该模板的初始化配置文件 <code>base.toml</code>：</li></ol><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token key property">lang</span> <span class="token punctuation">=</span> <span class="token string">'zh-CN'</span><span class="token key property">title</span> <span class="token punctuation">=</span> <span class="token string">'Web 模板'</span><span class="token key property">body</span> <span class="token punctuation">=</span> <span class="token string">'&lt;h1&gt;环艺&lt;/h1&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建可以载入模板 HTML 和配置文件的函数：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> Template<span class="token keyword">import</span> toml<span class="token keyword">class</span> <span class="token class-name">Bunch</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__ <span class="token operator">=</span> self<span class="token keyword">def</span> <span class="token function">load_option</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    opt <span class="token operator">=</span> toml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">return</span> Bunch<span class="token punctuation">(</span><span class="token operator">**</span>opt<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load_template</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        h5 <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Template<span class="token punctuation">(</span>h5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>创建解析 HTML 模板的类和函数：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Template</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> objtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> obj<span class="token punctuation">.</span>template_path        <span class="token keyword">if</span> path<span class="token punctuation">:</span>            <span class="token keyword">return</span> load_template<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Html</span><span class="token punctuation">:</span>    template <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>template_path <span class="token operator">=</span> template_path        self<span class="token punctuation">.</span>_config_path <span class="token operator">=</span> config_path        self<span class="token punctuation">.</span>_configure <span class="token operator">=</span> self<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> self<span class="token punctuation">.</span>_config_path        <span class="token keyword">if</span> path<span class="token punctuation">:</span>            <span class="token keyword">return</span> load_option<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">config</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_configure    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>template<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>self<span class="token punctuation">.</span>config<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自此，便完成对 HTML 的解析，使用如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">template_path <span class="token operator">=</span> <span class="token string">'templates/base.html'</span>config_path <span class="token operator">=</span> <span class="token string">'configs/base.toml'</span>html <span class="token operator">=</span> Html<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Web 模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>调用服务器：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> app<span class="token punctuation">.</span>htmlx <span class="token keyword">import</span> Html<span class="token keyword">class</span> <span class="token class-name">TemplateHtml</span><span class="token punctuation">(</span>Html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> self<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>template_path <span class="token operator">=</span> <span class="token string">'templates/base.html'</span>config_path <span class="token operator">=</span> <span class="token string">'configs/base.toml'</span>config <span class="token operator">=</span> <span class="token string">'configs/base-server.conf'</span>httpd <span class="token operator">=</span> TemplateHtml<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'body'</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">'''&lt;h1&gt;欢迎进入 Web 世界 &lt;h1&gt;&lt;p&gt;CherryPy&lt;/p&gt;'''</span><span class="token punctuation">}</span>httpd<span class="token punctuation">.</span>update<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment"># 更新 HTML</span>cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>httpd<span class="token punctuation">,</span> config<span class="token operator">=</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><p>创建 HTML 模板：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${lang}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>${title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>generate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字符串的长度：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gen<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>length<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Give it now!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个 GET 请求：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> app<span class="token punctuation">.</span>htmlx <span class="token keyword">import</span> Html<span class="token keyword">class</span> <span class="token class-name">TemplateHtml</span><span class="token punctuation">(</span>Html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> self<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">quickstart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> script_name<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> app_config<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>self<span class="token punctuation">,</span> script_name<span class="token punctuation">,</span> app_config<span class="token punctuation">)</span>template_path <span class="token operator">=</span> <span class="token string">'templates/form.html'</span>config_path <span class="token operator">=</span> <span class="token string">'configs/form.toml'</span>config <span class="token operator">=</span> <span class="token string">'configs/base-server.conf'</span>httpd <span class="token operator">=</span> TemplateHtml<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>httpd<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>app_config<span class="token operator">=</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，在此示例中，表单使用 <code>GET</code> 方法，并且当您按下 <code>Give&nbsp;it&nbsp;now!</code> 按钮，使用与上一教程相同的 URL 发送表单。HTML 表单还支持 <code>POST</code> 方法，在这种情况下，查询字符串不会附加到 URL，而是作为客户端请求主体发送给服务器的。但是，这不会更改您应用程序的 <code>exposed</code> 方法，因为 CherryPy 以相同的方式处理这两种情况，并使用 <code>exposed</code> 的处理程序参数来处理查询字符串 <code>(key, value)</code> 对。</p><h3 id="跟踪最终用户的活动"><a href="#跟踪最终用户的活动" class="headerlink" title="跟踪最终用户的活动"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id8">跟踪最终用户的活动</a></h3><p>应用程序需要一段时间跟踪用户的活动并不少见。通常的机制是使用在用户和您的应用程序之间的对话过程中携带的 <a href="http://en.wikipedia.org/wiki/Session_(computer_science)#HTTP_session_token">会话标识符</a>。</p><p>需要修改服务器的配置（<code>configsbase-server.toml</code>）：</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">global</span><span class="token punctuation">]</span><span class="token key property">server.socket_host</span> <span class="token punctuation">=</span> <span class="token string">"127.0.0.1"</span><span class="token key property">server.socket_port</span> <span class="token punctuation">=</span> <span class="token number">9999</span><span class="token key property">server.thread_pool</span> <span class="token punctuation">=</span> <span class="token number">10</span><span class="token punctuation">[</span>/<span class="token punctuation">]</span>tools<span class="token punctuation">.</span>sessions<span class="token punctuation">.</span>on: True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用下面的代码启动服务器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> app<span class="token punctuation">.</span>htmlx <span class="token keyword">import</span> Html<span class="token keyword">class</span> <span class="token class-name">TemplateHtml</span><span class="token punctuation">(</span>Html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> self<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        some_string <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'mystring'</span><span class="token punctuation">]</span> <span class="token operator">=</span> some_string        <span class="token keyword">return</span> some_string    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'mystring'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">quickstart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> script_name<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> config<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>self<span class="token punctuation">,</span> script_name<span class="token punctuation">,</span> config<span class="token punctuation">)</span>template_path <span class="token operator">=</span> <span class="token string">'templates/form.html'</span>config_path <span class="token operator">=</span> <span class="token string">'configs/form.toml'</span>config <span class="token operator">=</span> <span class="token string">'configs/base-server.conf'</span>httpd <span class="token operator">=</span> TemplateHtml<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>httpd<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>config<span class="token operator">=</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的效果是：</p><p><img src="/dao/post/zh-CN/9a6e76240070/display.png"></p><p>在本例中，我们生成的字符串并存储在当前会话中。如果您转到 <code>http://localhost:8080/</code>，生成一个随机字符串，然后转到 <code>http://localhost:8080/display</code>，您将看到刚刚生成的字符串。</p><p>其中 <code>tools.sessions.on: True</code> 向您展示了如何在 CherryPy 应用程序中启用会话支持。默认情况下，CherryPy 会将会话保存在进程的内存中。<a href="https://www.osgeo.cn/cherrypy/basics.html#basicsession">backends</a> 提供更持久的支持。</p><h3 id="关于-JavaScripts-CSS-和-图片"><a href="#关于-JavaScripts-CSS-和-图片" class="headerlink" title="关于 JavaScripts, CSS 和 图片"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#tutorial-6-what-about-my-javascripts-css-and-images" title="Permalink to this headline">关于 JavaScripts, CSS 和 图片</a></h3><p>Web 应用程序通常由静态内容组成，如 JavaScript、CSS 文件或图像。CherryPy 提供了为最终用户提供静态内容的支持。</p><p>假设您希望将样式表与应用程序关联，以显示蓝色背景色。</p><p>首先，将以下样式表保存到名为 <code>main.css</code> 并存储到本地目录中 <code>public/css</code>。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>模板 HTML 则为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${lang}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>${title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/css/main.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>generate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字符串的长度：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gen<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>length<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Give it now!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> os<span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> app<span class="token punctuation">.</span>htmlx <span class="token keyword">import</span> Html<span class="token keyword">class</span> <span class="token class-name">TemplateHtml</span><span class="token punctuation">(</span>Html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> self<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        some_string <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'mystring'</span><span class="token punctuation">]</span> <span class="token operator">=</span> some_string        <span class="token keyword">return</span> some_string    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'mystring'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">quickstart</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> script_name<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> server_config<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>self<span class="token punctuation">,</span> script_name<span class="token punctuation">,</span> server_config<span class="token punctuation">)</span>template_path <span class="token operator">=</span> <span class="token string">'templates/form.html'</span>config_path <span class="token operator">=</span> <span class="token string">'configs/form.toml'</span>conf <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'global'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'server.socket_port'</span><span class="token punctuation">:</span> <span class="token number">9999</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'tools.sessions.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'tools.staticdir.root'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'/static'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'tools.staticdir.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'tools.staticdir.dir'</span><span class="token punctuation">:</span> <span class="token string">'./public'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>httpd <span class="token operator">=</span> TemplateHtml<span class="token punctuation">(</span>template_path<span class="token punctuation">,</span> config_path<span class="token punctuation">)</span>httpd<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>server_config<span class="token operator">=</span>conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <code>conf</code> 是 <code>dict</code> 形式的，您也可以使用 <code>base.conf</code> 文件设计：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[global]server.socket_port = 9999[/]tools.sessions.on = Truetools.staticdir.root = os.path.abspath('.')[/static]tools.staticdir.on = Truetools.staticdir.dir = './public'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>http://localhost:9999/</code> 上，您应该看到一个鲜艳的蓝色。</p><p>CherryPy 提供了服务于单个文件或完整目录结构的支持。大多数情况下，这就是您将要做的，这就是上面的代码所演示的。首先，我们指出&nbsp;<a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.html#cherrypy.Application.root" title="cherrypy.Application.root"><code>root</code></a>&nbsp;所有静态内容的目录。出于安全考虑，这必须是绝对路径。如果在寻找与URL匹配的路径时只提供相对路径，CherryPy 会抱怨。</p><p>然后我们指出路径段以之开头的所有URL&nbsp;<code>/static</code>&nbsp;将用作静态内容。我们将该URL映射到&nbsp;<code>public</code>&nbsp;目录，它是 <a href="https://docs.cherrypy.org/en/latest/pkg/cherrypy.html#cherrypy.Application.root" title="cherrypy.Application.root"><code>root</code></a>&nbsp;的直接子目录。整个&nbsp;<code>public</code>&nbsp;目录的子树将用作静态内容。CherryPy 将把 URL 映射到该目录中的路径。这就是为什么&nbsp;<code>/static/css/main.css</code>&nbsp;发现于&nbsp;<code>public/css/main.css</code>.</p><h3 id="给定-REST"><a href="#给定-REST" class="headerlink" title="给定 REST"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id10">给定 REST</a></h3><p>如今，Web 应用程序公开某种数据模型（datamodel）或计算函数并不罕见。在不详细说明的情况下，一个策略是遵循 &nbsp;<a href="http://www.ibm.com/developerworks/library/ws-restful/index.html">REST principles edicted by Roy T. Fielding</a>。</p><p>大致来说，它假定您可以标识一个资源，并且可以通过该标识符来 address 该资源。</p><p>你可能会问“为什么？”。好吧，大多数情况下，这些原则是为了确保您尽可能地将应用程序所公开的实体与操作或使用它们的方式分离开来。为了接受这一观点，开发人员通常会设计一个 Web API 来公开 (<strong>URL</strong>, <strong>HTTP method</strong>, <strong>data</strong>, <strong>constraints</strong>)。</p><article class="w3-card w3-padding w3-light-grey">注意：您可能经常会同时听到 <strong>REST</strong> 和 <strong>Web API</strong>。前者是提供后者的一种策略。本教程不会涉及整个 Web API 概念，因为它是一个更具吸引力的主题，但是您应该在线阅读更多有关它的内容。</article><p>让我们来看一个非常基本的 Web API 的小例子，它稍微遵循 REST 原理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token keyword">class</span> <span class="token class-name">StringGeneratorWebService</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>accept</span><span class="token punctuation">(</span>media<span class="token operator">=</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'mystring'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">POST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        some_string <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'mystring'</span><span class="token punctuation">]</span> <span class="token operator">=</span> some_string        <span class="token keyword">return</span> some_string    <span class="token keyword">def</span> <span class="token function">PUT</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> another_string<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'mystring'</span><span class="token punctuation">]</span> <span class="token operator">=</span> another_string    <span class="token keyword">def</span> <span class="token function">DELETE</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'mystring'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    conf <span class="token operator">=</span> <span class="token string">'configs/rest.conf'</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>StringGeneratorWebService<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token operator">=</span>conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>rest.conf</code> 为：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[global]server.socket_host = "127.0.0.1"server.socket_port = 9999server.thread_pool = 10[/]request.dispatch = cherrypy.dispatch.MethodDispatcher()tools.sessions.on = Truetools.response_headers.on = Truetools.response_headers.headers = [('Content-Type', 'text/plain')]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们付诸实践之前，让我们解释一些事情。直到现在，CherryPy 仍在创建一棵暴露的方法树，用于匹配URL。对于我们的 Web API，我们想强调实际请求的 HTTP 方法所扮演的角色。因此，我们创建了以它们命名的方法，并通过用 <code>cherrypy.expose</code> 装饰类本身来一次公开它们。</p><p>但是，对于知道整个 HTTP 方法 shenanigan 的方法，我们必须从匹配 URL 的默认机制切换到 method。这就是我们在 <code>rest.conf</code> 中创建 <code>MethodDispatcher</code> 实例的过程。</p><p>然后，我们将响应的内容类型强制为 <code>text/plain</code>，最后确保在请求中设置了 <code>Accept: text/plain</code> 标头，从而确保 GET 请求仅响应接受该内容类型的客户端。但是，我们仅针对该 HTTP 方法执行此操作，因为它对其他方法没有多大意义。</p><p>就本教程而言，我们将使用 Python 客户端而不是您的浏览器，否则我们将无法实际尝试使用我们的 Web API。</p><p>另外，为了测试效果，不再使用浏览器，而是使用 <code>requests</code> 模块:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; import requests&gt;&gt;&gt; s = requests.Session()&gt;&gt;&gt; r = s.get('http://127.0.0.1:8080/')&gt;&gt;&gt; r.status_code500&gt;&gt;&gt; r = s.post('http://127.0.0.1:8080/')&gt;&gt;&gt; r.status_code, r.text(200, u'04A92138')&gt;&gt;&gt; r = s.get('http://127.0.0.1:8080/')&gt;&gt;&gt; r.status_code, r.text(200, u'04A92138')&gt;&gt;&gt; r = s.get('http://127.0.0.1:8080/', headers={'Accept': 'application/json'})&gt;&gt;&gt; r.status_code406&gt;&gt;&gt; r = s.put('http://127.0.0.1:8080/', params={'another_string': 'hello'})&gt;&gt;&gt; r = s.get('http://127.0.0.1:8080/')&gt;&gt;&gt; r.status_code, r.text(200, u'hello')&gt;&gt;&gt; r = s.delete('http://127.0.0.1:8080/')&gt;&gt;&gt; r = s.get('http://127.0.0.1:8080/')&gt;&gt;&gt; r.status_code500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前 500 响应和后 500 响应来自以下事实：在第一种情况下，我们尚未通过 POST 生成字符串，而在后一种情况下，删除后该字符串不存在。</p><p>第 12-14 行显示了当我们的客户端请求将生成的字符串作为 JSON 格式请求时，应用程序如何做出反应。由于我们将 Web API 配置为仅支持纯文本，因此它将返回适当的 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.7">HTTP 错误代码</a>。</p><p>注意：我们使用请求的 Session 接口，以便在每个后续请求中都携带存储在请求 cookie 中的会话 ID。</p><h3 id="使用-Ajax-使其更流畅"><a href="#使用-Ajax-使其更流畅" class="headerlink" title="使用 Ajax 使其更流畅"></a>使用 Ajax 使其更流畅</h3><p>近年来，Web 应用程序已经摆脱了“HTML表单+刷新整个页面”的简单模式。这种传统方案仍然可以很好地发挥作用，但是用户已经习惯于不刷新整个页面的网络应用程序。广义上讲，Web 应用程序带有在客户端执行的代码，这些代码可以与后端通信，而不必刷新整个页面。</p><ol><li>创建样式表 <code>public/css/main.css</code>：</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#the-string</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>我们添加了一个有关元素的简单规则，该元素将显示生成的字符串。默认情况下，我们不显示它。将以下 HTML 代码保存到名为 <code>index.html</code> 的文件中。</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/css/main.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://code.jquery.com/jquery-2.0.3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#generate-string"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/generator"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"length"</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name='length']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#the-string"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#the-string input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#replace-string"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    type<span class="token operator">:</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span>                    url<span class="token operator">:</span> <span class="token string">"/generator"</span><span class="token punctuation">,</span>                    data<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">"another_string"</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#the-string input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Replaced!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#delete-string"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    type<span class="token operator">:</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span>                    url<span class="token operator">:</span> <span class="token string">"/generator"</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#the-string"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>length<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>generate-string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Give it now!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>the-string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>replace-string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Replace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete-string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Delete it<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将出于简单的目的使用 jQuery 框架，但请随时用您喜欢的工具替换它。该页面由简单的 HTML 元素组成，以获取用户输入并显示生成的字符串。它还包含用于与实际执行艰苦工作的后端 API 进行通信的客户端代码。</p><p>最后，这是应用程序的代码，该代码用于上方的 HTML 页面，并响应生成字符串的请求。两者都由同一应用程序服务器托管。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">StringGenerator</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token keyword">class</span> <span class="token class-name">StringGeneratorWebService</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>accept</span><span class="token punctuation">(</span>media<span class="token operator">=</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'mystring'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">POST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        some_string <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'mystring'</span><span class="token punctuation">]</span> <span class="token operator">=</span> some_string        <span class="token keyword">return</span> some_string    <span class="token keyword">def</span> <span class="token function">PUT</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> another_string<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'mystring'</span><span class="token punctuation">]</span> <span class="token operator">=</span> another_string    <span class="token keyword">def</span> <span class="token function">DELETE</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'mystring'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    conf <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'tools.sessions.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">'tools.staticdir.root'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'/generator'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'request.dispatch'</span><span class="token punctuation">:</span> cherrypy<span class="token punctuation">.</span>dispatch<span class="token punctuation">.</span>MethodDispatcher<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'tools.response_headers.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">'tools.response_headers.headers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'/static'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'tools.staticdir.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">'tools.staticdir.dir'</span><span class="token punctuation">:</span> <span class="token string">'./public'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    webapp <span class="token operator">=</span> StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span>    webapp<span class="token punctuation">.</span>generator <span class="token operator">=</span> StringGeneratorWebService<span class="token punctuation">(</span><span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>webapp<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转到 <code>http://127.0.0.1:8080/</code> 并使用输入和按钮来生成，替换或删除字符串。请注意，页面只是部分内容而没有刷新。</p><p>还请注意，您的前端如何使用简单但干净的 Web 服务 API 与后端进行对话。非 HTML 客户端可以轻松使用相同的 API。</p><h3 id="数据是我的全部生命"><a href="#数据是我的全部生命" class="headerlink" title="数据是我的全部生命"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id12">数据是我的全部生命</a></h3><p>到目前为止，所有生成的字符串都保存在会话中，默认情况下存储在进程内存中。虽然，您可以将会话保留在磁盘或分布式内存存储中，但从长远来看，这不是正确的方法。会话在那里可以识别您的用户，并携带用户执行的操作所需的尽可能少的数据。</p><p>要存储，持久化和查询数据，您需要适当的数据库服务器。有多种范式支持可供选择：</p><ul><li>关系：PostgreSQL，SQLite，MariaDB，Firebird</li><li>面向列：HBase，Cassandra</li><li>密钥库：redis，memcached</li><li>面向文档：Couchdb，MongoDB</li><li>面向图形的：neo4j</li></ul><p>让我们关注关系型，因为它们是最常见的，并且可能是您首先要学习的。</p><p>为了减少这些教程的依赖关系数量，我们将使用 Python 直接支持的 <code>sqlite</code> 数据库。</p><p>我们的应用程序将替换会话中生成的字符串到 SQLite 数据库的存储。该应用程序将具有与上节教程相同的 HTML 代码。因此，我们仅关注应用程序代码本身：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> random<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> string<span class="token keyword">import</span> time<span class="token keyword">import</span> cherrypyDB_STRING <span class="token operator">=</span> <span class="token string">"my.db"</span><span class="token keyword">class</span> <span class="token class-name">StringGenerator</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span><span class="token keyword">class</span> <span class="token class-name">StringGeneratorWebService</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>accept</span><span class="token punctuation">(</span>media<span class="token operator">=</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>DB_STRING<span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>            cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            r <span class="token operator">=</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT value FROM user_string WHERE session_id=?"</span><span class="token punctuation">,</span>                          <span class="token punctuation">[</span>cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> r<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">POST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        some_string <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>DB_STRING<span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>            cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT INTO user_string VALUES (?, ?)"</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span>cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span> some_string<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> some_string    <span class="token keyword">def</span> <span class="token function">PUT</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> another_string<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>DB_STRING<span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>            cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"UPDATE user_string SET value=? WHERE session_id=?"</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span>another_string<span class="token punctuation">,</span> cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">DELETE</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'ts'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>DB_STRING<span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>            c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DELETE FROM user_string WHERE session_id=?"</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span>cherrypy<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">setup_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Create the `user_string` table in the database    on server startup    """</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>DB_STRING<span class="token punctuation">)</span> <span class="token keyword">as</span> con<span class="token punctuation">:</span>        con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"CREATE TABLE user_string (session_id, value)"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cleanup_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Destroy the `user_string` table from the database    on server shutdown.    """</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>DB_STRING<span class="token punctuation">)</span> <span class="token keyword">as</span> con<span class="token punctuation">:</span>        con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE user_string"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    conf <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'tools.sessions.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">'tools.staticdir.root'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'/generator'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'request.dispatch'</span><span class="token punctuation">:</span> cherrypy<span class="token punctuation">.</span>dispatch<span class="token punctuation">.</span>MethodDispatcher<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'tools.response_headers.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">'tools.response_headers.headers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'/static'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'tools.staticdir.on'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">'tools.staticdir.dir'</span><span class="token punctuation">:</span> <span class="token string">'./public'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">,</span> setup_database<span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token string">'stop'</span><span class="token punctuation">,</span> cleanup_database<span class="token punctuation">)</span>    webapp <span class="token operator">=</span> StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span>    webapp<span class="token punctuation">.</span>generator <span class="token operator">=</span> StringGeneratorWebService<span class="token punctuation">(</span><span class="token punctuation">)</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>webapp<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，让我们看看如何创建两个函数来创建和销毁数据库中的表。这些函数在第 85-86 行注册到 CherryPy 的服务器上，以便在服务器启动和停止时调用它们。</p><p>接下来，请注意我们如何用对数据库的调用替换所有会话代码。我们使用会话 ID 在数据库中标识用户的字符串。由于会话将在一段时间后消失，因此这可能不是正确的方法。一个更好的主意是将用户的登录名或更具弹性的唯一标识符相关联。为了我们的演示，应该这样做。</p><article class="w3-green"><p class="w3-yellow">重要的</p><p>在此示例中，我们仍然必须将会话设置为虚拟值，以免 CherryPy 在每次请求时都丢弃该会话。由于我们现在使用数据库存储生成的字符串，因此我们仅在会话内部存储一个虚拟时间戳。</p></article><article class="w3-green"><p class="w3-yellow">笔记</p><p>不幸的是，Python 中的 `sqlite` 禁止我们在线程之间共享连接。由于 CherryPy 是多线程服务器，因此这将是一个问题。这就是为什么我们在每次调用时打开和关闭与数据库的连接的原因。这显然不是真正的生产友好，并且建议使用功能更强大的数据库引擎或更高级别的库（例如 SQLAlchemy）来更好地满足应用程序的需求。</p></article><h3 id="使用-React-js-使其成为现代的单页应用程序"><a href="#使用-React-js-使其成为现代的单页应用程序" class="headerlink" title="使用 React.js 使其成为现代的单页应用程序"></a>使用 <code>React.js</code> 使其成为现代的单页应用程序</h3><p>近年来，客户端单页应用程序（SPA）逐渐吃掉了服务器端生成的内容网络应用程序的午餐。</p><p>本教程演示了如何与 <code>React.js</code> 集成，<code>React.js</code> 是 Facebook 在 2013 年发布的 SPA Java 语言库。请参考 <code>React.js</code> 文档以了解更多信息。</p><p>为了演示它，让我们使用上节教程中的代码。但是，我们将替换 HTML 和 JavaScript 代码。</p><p>首先，让我们看看我们的 HTML 代码是如何变化的：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://code.jquery.com/jquery-2.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>generator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/js/gen.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本上，我们删除了使用 jQuery 的整个 JavaScript 代码。取而代之的是，我们加载 <code>React.js</code> 库以及一个名为 <code>gen.js</code> 的新本地 JavaScript 模块，该模块位于 <code>public/js</code> 目录中：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> StringGeneratorBox <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">handleGenerate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>url<span class="token punctuation">,</span>        dataType<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string">"length"</span><span class="token operator">:</span> length        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            length<span class="token operator">:</span> length<span class="token punctuation">,</span>            string<span class="token operator">:</span> data<span class="token punctuation">,</span>            mode<span class="token operator">:</span> <span class="token string">"edit"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xhr<span class="token punctuation">,</span> status<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            status<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleEdit</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> new_string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>string<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>url<span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string">"another_string"</span><span class="token operator">:</span> new_string        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            length<span class="token operator">:</span> new_string<span class="token punctuation">.</span>length<span class="token punctuation">,</span>            string<span class="token operator">:</span> new_string<span class="token punctuation">,</span>            mode<span class="token operator">:</span> <span class="token string">"edit"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xhr<span class="token punctuation">,</span> status<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            status<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleDelete</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>url<span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'DELETE'</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            length<span class="token operator">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span>            string<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            mode<span class="token operator">:</span> <span class="token string">"create"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xhr<span class="token punctuation">,</span> status<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            status<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleLengthChange</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      length<span class="token operator">:</span> length<span class="token punctuation">,</span>      string<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      mode<span class="token operator">:</span> <span class="token string">"create"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleStringChange</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">new_string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      length<span class="token operator">:</span> new_string<span class="token punctuation">.</span>length<span class="token punctuation">,</span>      string<span class="token operator">:</span> new_string<span class="token punctuation">,</span>      mode<span class="token operator">:</span> <span class="token string">"edit"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">getInitialState</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      length<span class="token operator">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span>      string<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      mode<span class="token operator">:</span> <span class="token string">"create"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"stringGenBox"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>StringGeneratorForm onCreateString<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleGenerate<span class="token punctuation">}</span>                                 onReplaceString<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleEdit<span class="token punctuation">}</span>                                 onDeleteString<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDelete<span class="token punctuation">}</span>                                 onLengthChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLengthChange<span class="token punctuation">}</span>                                 onStringChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleStringChange<span class="token punctuation">}</span>                                 mode<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>mode<span class="token punctuation">}</span>                                 length<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>length<span class="token punctuation">}</span>                                 string<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>string<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> StringGeneratorForm <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">handleCreate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onCreateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleReplace</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onReplaceString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleDelete</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onDeleteString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleLengthChange</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">findDOMNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onLengthChange</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleStringChange</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> string <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">findDOMNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onStringChange</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">"create"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>input  type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token string">"length"</span> defaultValue<span class="token operator">=</span><span class="token string">"8"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>length<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLengthChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleCreate<span class="token punctuation">}</span><span class="token operator">&gt;</span>Give it now<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">"edit"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token string">"string"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>string<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleStringChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleReplace<span class="token punctuation">}</span><span class="token operator">&gt;</span>Replace<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDelete<span class="token punctuation">}</span><span class="token operator">&gt;</span>Delete it<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>StringGeneratorBox url<span class="token operator">=</span><span class="token string">"/generator"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'generator'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>哇！ 如此简单的代码需要很多代码，不是吗？入口点是最后几行，表示我们要在生成器 <code>div</code> 中呈现StringGeneratorBox React.js 类的 HTML 代码。</p><p>呈现页面时，该组件也将呈现。请注意，它也是如何由另一个呈现表单本身的组件组成的。</p><p>对于这样一个简单的示例，这可能有点过头，但是希望可以使您在此过程中开始使用 React.js。</p><p>没什么可说的，希望该代码的含义很清楚。该组件具有内部状态，在该状态下，我们存储用户生成/修改的当前字符串。</p><p>当用户更改输入框的内容时，状态将在客户端更新。然后，当单击一个按钮时，该状态将使用 API 端点发送到后端服务器，并执行适当的操作。然后，状态将更新，视图也将更新。</p><h2 id="组织你的代码"><a href="#组织你的代码" class="headerlink" title="组织你的代码"></a>组织你的代码</h2><p>CherryPy 具有强大的体系结构，可帮助您以一种易于维护和灵活的方式来组织代码。</p><p>您可以使用几种机制，本教程将重点介绍三个主要机制：</p><ul><li><a href="https://docs.cherrypy.org/en/latest/extend.html#dispatchers">dispatchers</a></li><li><a href="https://docs.cherrypy.org/en/latest/extend.html#tools">tools</a></li><li><a href="https://docs.cherrypy.org/en/latest/extend.html#busplugins">plugins</a></li></ul><p>为了理解它们，让我们假设您在一家大型超市中：</p><ul><li>您有多个收银台，每个人都在排队（这些都是您的要求）</li><li>您可以在各个部分中找到食物和其他内容（这些是您的数据）</li><li>最终，您将拥有一家大型超市人员及其日常任务，以确保各个部分始终井井有条（这是您的后端）</li></ul><p>尽管确实很简单，但这离您的应用程序的行为并不遥远。CherryPy 可帮助您以反映这些高级思想的方式来构建应用程序。</p><h3 id="Dispatchers"><a href="#Dispatchers" class="headerlink" title="Dispatchers"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id15">Dispatchers</a></h3><p>回到超市示例，您可能希望基于 收银台 执行操作：</p><ul><li>存放少于十个物品的篮子的收银台</li><li>为残障人士的收银台</li><li>孕妇的收银台</li><li>一个只能使用商店卡的收银台</li></ul><p>为了支持这些用例，CherryPy 提供了一种称为 <a href="https://docs.cherrypy.org/en/latest/extend.html#dispatchers">dispatcher</a> 的机制。在请求处理期间的早期执行调度程序，以确定应用程序的哪段代码将处理传入的请求。或者，要继续进行商店类比，<code>dispatcher</code> 将决定引导顾客到哪一个。</p><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id16">Tools</a></h3><p>假设您的商店决定经营折扣大礼包，但仅针对特定类别的客户。CherryPy 将通过称为 <a href="https://docs.cherrypy.org/en/latest/extend.html#tools">工具</a> 的机制来处理此类用例。</p><p><code>工具</code>是一段代码，它在每个请求的基础上运行，以执行其他工作。通常，工具是一个简单的 Python 函数，它在 CherryPy 的请求过程中的给定时间执行。</p><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id17">Plugins</a></h3><p>如我们所见，这家商店有一群人专门管理库存并处理任何顾客的期望。</p><p>在 CherryPy 世界中，这转化为具有可以在任何请求生命周期之外运行的功能。这些功能应处理后台任务，长期连接（例如与数据库的连接）等。</p><p>之所以称呼其为<a href="https://docs.cherrypy.org/en/latest/extend.html#busplugins">插件</a>，是因为它们与 CherryPy 引擎一起使用并随着您的操作进行扩展。</p><h2 id="使用-pytest-和代码覆盖率"><a href="#使用-pytest-和代码覆盖率" class="headerlink" title="使用 pytest 和代码覆盖率"></a>使用 pytest 和代码覆盖率</h2><h3 id="Pytest"><a href="#Pytest" class="headerlink" title="Pytest"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id19">Pytest</a></h3><p>编写一个简单的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># tut12.py</span><span class="token keyword">import</span> string<span class="token keyword">import</span> cherrypy<span class="token keyword">class</span> <span class="token class-name">StringGenerator</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hello world!"</span>    <span class="token decorator annotation punctuation">@cherrypy<span class="token punctuation">.</span>expose</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>hexdigits<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写测试文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_tut12.py</span><span class="token keyword">import</span> cherrypy<span class="token keyword">from</span> cherrypy<span class="token punctuation">.</span>test <span class="token keyword">import</span> helper<span class="token keyword">from</span> tut12 <span class="token keyword">import</span> StringGenerator<span class="token keyword">class</span> <span class="token class-name">SimpleCPTest</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span>CPWebCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">setup_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cherrypy<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertStatus<span class="token punctuation">(</span><span class="token string">'200 OK'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_generate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token string">"/generate"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertStatus<span class="token punctuation">(</span><span class="token string">'200 OK'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ pytest -v test_tut12.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，我们有了一种巧妙的方法来进行应用程序测试。</p><h3 id="增加代码覆盖率"><a href="#增加代码覆盖率" class="headerlink" title="增加代码覆盖率"></a><a href="https://docs.cherrypy.org/en/latest/tutorials.html#id20">增加代码覆盖率</a></h3><p>要获得代码覆盖率，只需运行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pytest --cov<span class="token operator">=</span>tut12 --cov-report term-missing test_tut12.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要为 <code>pytest</code> <a href="https://pytest-cov.rtfd.io/">添加覆盖支持</a>，您需要通过 <code>pip install pytest-cov</code> 进行安装。</p><p>这告诉我们缺少一行。当然是因为仅在直接启动 Python 程序时才执行该操作。我们可以简单地在 <code>tut12.py</code> 中更改以下几行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token comment"># pragma: no cover</span>    cherrypy<span class="token punctuation">.</span>quickstart<span class="token punctuation">(</span>StringGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 CI 中使用时，您可能希望将 <a href="https://codecov.io/">Codecov</a>,&nbsp;<a href="https://landscape.io/">Landscape</a>&nbsp;或者&nbsp;<a href="https://coveralls.io/">Coveralls</a> 集成到项目中，以随时间存储和跟踪 coverage 数据。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CherryPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSGI 编程</title>
      <link href="/dao/post/zh-CN/d7d438b25c12.html"/>
      <url>/dao/post/zh-CN/d7d438b25c12.html</url>
      
        <content type="html"><![CDATA[<p>参考资料：<a href="http://www.phyast.pitt.edu/~micheles/python/europython07/talk.html">An Introduction to Web Programming with WSGI</a></p><h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><p>WSGI 是作为 Web 服务器与 Web 应用程序或应用框架之间的一种低级别的接口，以提升可移植 Web 应用开发的共同点。</p><p>WSGI 分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个 WSGI 请求时，服务器会为应用程序提供环境信息及一个可回调的迭代器。当应用程序完成处理请求后，通过回调，将结果回传给服务器。</p><p>所谓的“<strong>WSGI 中间件</strong>”同时实现了 API 的两方，因此可以在 WSGI 服务器和 WSGI 应用之间起调解作用：从 Web 服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：</p><ul><li>重写环境变量后，根据目标 URL，将请求消息路由到不同的应用对象。</li><li>允许在一个进程中同时运行多个应用程序或应用框架。</li><li>负载均衡和远程处理，通过在网络上转发请求和响应消息。</li><li>进行内容后处理，例如应用 XSLT 样式表。</li></ul><h2 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h2><p>WSGI 的应用接受参数 <code>(environ, start_response)</code>，其中 <code>environ</code> 是 dict-like 的环境，<code>start_response</code> 是一个 可回调函数，接受两个必须的参数，<code>status</code>（HTTP 状态）和 <code>response_headers</code>（响应消息的头）。</p><p>WSGI 应用必须是可回调的，可迭代的对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>simple_server <span class="token keyword">import</span> make_server<span class="token comment"># 定义 WSGI 应用</span><span class="token keyword">def</span> <span class="token function">simple_app</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''一个相对简单的 WSGI 应用程序    '''</span>    status <span class="token operator">=</span> <span class="token string">'200 OK'</span>    headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>    content <span class="token operator">=</span> <span class="token string">'&lt;h1&gt;欢迎进入 WSGI 世界！&lt;/h1&gt;'</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>content<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>port <span class="token operator">=</span> <span class="token number">8000</span><span class="token comment"># 启动服务器</span><span class="token keyword">with</span> make_server<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> simple_app<span class="token punctuation">)</span> <span class="token keyword">as</span> httpd<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"正在端口 </span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string"> 上服务..."</span></span><span class="token punctuation">)</span>    httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WSGI-环境变量"><a href="#WSGI-环境变量" class="headerlink" title="WSGI 环境变量"></a>WSGI 环境变量</h2><p>下面了解一下 WSGI 的环境变量。</p><h3 id="标准变量"><a href="#标准变量" class="headerlink" title="标准变量"></a>标准变量</h3><article>    <dl>        <dt class="w3-yellow">REQUEST_METHOD</dt>        <dd>HTTP 请求方法，例如 <code>GET</code> 或 <code>POST</code>。这永远不能是一个空字符串，因此始终是必需的。        </dd>        <dt class="w3-yellow">SCRIPT_NAME</dt>        <dd>            请求 URL 的“path”的初始部分与应用程序对象相对应，以便应用程序知道其虚拟的“location”。如果应用程序对应于服务器的“root”，则它可以是一个空字符串。        </dd>        <dt class="w3-yellow">PATH_INFO</dt>        <dd>            请求网址的其余“path”，指定应用程序中请求目标的虚拟“location”。如果请求 URL 以应用程序根目录为目标，并且没有尾部斜杠，则该字符串可以为空。        </dd>        <dt class="w3-yellow">QUERY_STRING</dt>        <dd>            请求网址中“？”之后的部分（如果有）。可能为空或不存在。        </dd>        <dt class="w3-yellow">CONTENT_TYPE</dt>        <dd>            HTTP 请求中任何 <code>Content-Type</code> 字段的内容。 可能为空或不存在。        </dd>        <dt class="w3-yellow">CONTENT_LENGTH</dt>        <dd>            HTTP 请求中任何 <code>Content-Length</code> 字段的内容。可能为空或不存在。        </dd>        <dt class="w3-yellow">SERVER_NAME</dt>        <dd></dd>        <dt class="w3-yellow">SERVER_PORT</dt>        <dd>            与 <dfn>SCRIPT_NAME</dfn> 和 <dfn>PATH_INFO</dfn> 结合使用时，这些变量可用于完成 URL。但是请注意，<dfn>HTTP_HOSTSERVER_NAME</dfn> 使用，以重建请求 URL。有关更多详细信息，请参见下面的“URL重构”部分。<dfn>SERVER_NAME</dfn> 和 <dfn>SERVER_PORT</dfn> 永远不能为空字符串，因此始终是必需的。        </dd>        <dt class="w3-yellow">SERVER_PROTOCOL</dt>        <dd>            客户端用于发送请求的协议版本。通常，这类似于“HTTP/1.0”或“HTTP/1.1”，并且应用程序可以使用它来确定如何处理任何 HTTP 请求标头。（此变量可能应该称为<dfn>REQUEST_PROTOCOL</dfn>，因为它表示请求中使用的协议，不一定是服务器响应中将使用的协议。但是，为了与 CGI 兼容，我们必须保留现有名称。）        </dd>        <dt class="w3-yellow">HTTP_ Variables</dt>        <dd>            与客户端提供的 HTTP 请求标头相对应的变量（即，名称以 <code>HTTP_</code> 开头的变量）。这些变量的存在与否应与请求中适当的 HTTP 标头的存在与否相对应。        </dd>    </dl></article><h3 id="WSGI-变量"><a href="#WSGI-变量" class="headerlink" title="WSGI 变量"></a>WSGI 变量</h3><article>    <dl>        <dt class="w3-yellow">wsgi.version</dt>        <dd>            元组 (1, 0)，代表 WSGI 1.0 版。        </dd>        <dt class="w3-yellow">wsgi.url_scheme</dt>        <dd>            一个字符串，表示在其中调用应用程序的 URL 的“方案”部分。通常，适当时，其值为“http”或“https”。        </dd>        <dt class="w3-yellow">wsgi.input</dt>        <dd>            可以从中读取 HTTP 请求主体的输入流（类似文件的对象）。（服务器或网关可以根据应用程序的请求按需执行读取，或者可以预先读取客户端的请求主体并将其缓存在内存中或磁盘上，或者使用任何其他技术来提供这样的输入流，根据 偏好）。        </dd>        <dt class="w3-yellow">wsgi.errors</dt>        <dd>            可以向其中写入错误输出的输出流（类似文件的对象），目的是在标准化且可能集中的位置记录程序或其他错误。这应该是“文本模式”流； 即，应用程序应使用“n”作为行尾，并假定它将被服务器/网关转换为正确的行尾。        </dd>        <dd>            对于许多服务器，<code>wsgi.errors</code> 将是服务器的主要错误日志。或者，它可以是 <code>sys.stderr</code> 或某种日志文件。服务器的文档应包括有关如何配置它或在何处找到记录的输出的说明。如果需要，服务器或网关可以向不同的应用程序提供不同的错误流。        </dd>        <dt class="w3-yellow">wsgi.multithread</dt>        <dd>            如果应用程序对象可以在同一进程中被另一个线程同时调用，则此值应评估为 <code>true</code>，否则应评估为 <code>false</code>。        </dd>        <dt class="w3-yellow">wsgi.multiprocess</dt>        <dd>            如果等效的应用程序对象可以同时被另一个进程调用，则此值应评估为 <code>true</code>，否则应评估为 <code>false</code>。        </dd>        <dt class="w3-yellow">wsgi.run_once</dt>        <dd>            如果服务器或网关期望（但不保证！）该应用程序仅在其包含过程的生命周期内被调用一次，则此值应评估为 <code>true</code>。通常，这仅适用于基于 CGI（或类似内容）的网关。        </dd>    </dl></article><h2 id="解析-Get-请求"><a href="#解析-Get-请求" class="headerlink" title="解析 Get 请求"></a>解析 Get 请求</h2><p>下面一步步实现 Get 请求。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>simple_server <span class="token keyword">import</span> make_server<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> parse_qs<span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token keyword">def</span> <span class="token function">app</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    query_str <span class="token operator">=</span> environ<span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span>    <span class="token comment"># 解析 `%` 编码的查询字符串；返回查询字典，其中的值是列表</span>    d <span class="token operator">=</span> parse_qs<span class="token punctuation">(</span>query_str<span class="token punctuation">)</span>    request_method <span class="token operator">=</span> environ<span class="token punctuation">[</span><span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"查询字符串：</span><span class="token interpolation"><span class="token punctuation">{</span>query_str<span class="token punctuation">}</span></span><span class="token string">\n"</span></span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>fp<span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"查询方式：</span><span class="token interpolation"><span class="token punctuation">{</span>request_method<span class="token punctuation">}</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># print(f"{k} = {v}\n", file=fp)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">{</span>v<span class="token punctuation">}</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>        output <span class="token operator">=</span> fp<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> <span class="token string">'200 OK'</span>    headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>    <span class="token keyword">yield</span> output<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>port <span class="token operator">=</span> <span class="token number">8000</span><span class="token keyword">with</span> make_server<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> app<span class="token punctuation">)</span> <span class="token keyword">as</span> httpd<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"正在端口 </span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string"> 上服务..."</span></span><span class="token punctuation">)</span>    httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>parse_qs</code> 函数解析 <code>%</code> 编码的查询字符串。返回查询字典，其中的值是列表。</p><p>比如 URL <code>http://localhost:8000/?年龄=10&amp;hobbies=software&amp;hobbies=tunning</code> 的输出结果：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">查询字符串：%E5%B9%B4%E9%BE%84=10&amp;hobbies=software&amp;hobbies=tunning查询方式：GET年龄 = ['10']hobbies = ['software', 'tunning']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，编写表单的 GET。防止用户的输入产生脚本注入，可以使用 <code>escape</code> 函数。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsgiref</title>
      <link href="/dao/post/zh-CN/22add8d782c9.html"/>
      <url>/dao/post/zh-CN/22add8d782c9.html</url>
      
        <content type="html"><![CDATA[<p>WSGI（Web Server Gateway Interface, Web 服务器网关接口）是描述 Web 服务器如何与 Web 应用程序通信以及如何将 Web 应用程序链接在一起以处理一个 Request 的规范。</p><p>只有 Web 服务器和编程框架的作者才需要了解 WSGI 设计的每个细节和特殊情况。您无需了解 WSGI 的每个细节，仅安装 WSGI 应用程序或使用现有框架编写 Web 应用程序即可。</p><p><a href="https://docs.python.org/zh-cn/3.10/library/wsgiref.html#module-wsgiref">wsgiref</a> 是 WSGI 规范的参考实现，可用于将 WSGI 支持添加到 Web 服务器或框架。它提供了用于处理 WSGI 环境变量和响应标头的实用程序，用于实现 WSGI 服务器的基类，为 WSGI 应用程序提供服务的演示 HTTP 服务器以及用于检查 WSGI 服务器和应用程序是否符合 WSGI 规范的验证工具（<a href="https://www.python.org/dev/peps/pep-3333">PEP 3333</a>）。</p><p>有关 WSGI 的更多信息，请参见 <a href="https://wsgi.readthedocs.io/">wsgi.readthedocs.io</a>，以及教程和其他资源的链接。</p><p>Python 目前拥有大量的 Web 框架，比如 Zope, Quixote, Webware, SkunkWeb, PSO, 和 Twisted Web。大量的选择使得新手无所适从，因为总得来说，框架的选择都会限制 Web 服务器的选择。</p><p>WSGI 的目的是使得 Web 框架和 Web 服务器之间轻松互连，而不是创建一套新的 Web 框架。</p><h2 id="PEP3333-概述"><a href="#PEP3333-概述" class="headerlink" title="PEP3333 概述"></a>PEP3333 概述</h2><p>WSGI 不是服务器，Python 模块，框架，API 或任何类型的软件。它只是服务器和应用程序进行通信的接口规范。在 PEP 3333 中指定了服务器和应用程序接口端。如果将应用程序（或框架或工具包）写入 WSGI 规范，则它将在写入该规范的任何服务器上运行。</p><p>可以堆叠 WSGI 应用程序（意味着符合 WSGI）。那些位于堆栈中间的组件称为<strong>中间件</strong>（middleware，一般为 app 的 Python 装饰器），它们必须同时实现 WSGI 接口的两端：应用程序和服务器。对于最上面的应用程序，它将充当服务器，对于下面的应用程序，则它将充当应用程序。</p><p>WSGI 服务器（意味着符合 WSGI）仅接收来自客户端的请求，将其传递给应用程序，然后将应用程序返回的响应发送给客户端。它什么也没做。所有 gory 详细信息必须由应用程序或中间件提供。</p><p>无需学习 WSGI 规范即可在框架或工具包之上构建应用程序。要使用中间件，除非对中间件已经集成在框架中，或者框架提供了某种包装器以将那些未集成的中间件集成在一起，否则必须对如何将它们与应用程序或框架堆叠在一起有最低限度的了解。</p><h2 id="wsgiref-util-–-WSGI-environment-utilities"><a href="#wsgiref-util-–-WSGI-environment-utilities" class="headerlink" title="wsgiref.util – WSGI environment utilities"></a><a href="https://docs.python.org/zh-cn/3.10/library/wsgiref.html#module-wsgiref.util">wsgiref.util</a> – WSGI environment utilities</h2><p>如果要在单个主机和端口上提供多个应用程序，则应创建一个 WSGI 应用程序，该应用程序解析 <code>PATH_INFO</code> 以选择为每个请求调用哪个应用程序。（例如，使用 <code>wsgiref.util</code> 中的 <code>shift_path_info</code> 函数。）</p><p>该模块提供了用于 WSGI 环境的各种实用程序函数。WSGI 环境是一个包含 HTTP 请求变量的字典，如 <a href="https://www.python.org/dev/peps/pep-3333">PEP 3333</a> 中所述。所有带有 <code>environ</code> 参数的函数都希望提供符合 WSGI 的字典；请参阅 PEP 3333 了解详细规格。</p><ul><li><code>wsgiref.util.guess_scheme(environ)</code>：通过检查 <code>environ</code> 字典中的 <code>HTTPS</code> 环境变量，返回有关 <code>wsgi.url_scheme</code> 应为 <code>"http"</code> 还是 <code>"https"</code> 的猜测。返回值是字符串。当创建包装 CGI 或类似 CGI 的协议（如 FastCGI）的网关时，此功能很有用。通常，当通过 SSL 接收到请求时，提供此类协议的服务器将包含一个 <code>HTTPS</code> 变量，其值为 <code>"1"</code>, <code>"yes"</code>, 或者 <code>"on"</code>。因此，如果找到该值，此函数将返回 <code>"https"</code>，否则返回 <code>"http"</code>。</li><li><code>wsgiref.util.application_uri(environ)</code>：返回应用程序的基本 URI（无 <code>PATH_INFO</code> 或 <code>QUERY_STRING</code>）</li><li><code>wsgiref.util.request_uri(environ, include_query=True)</code>：使用 PEP 3333 的 “URL Reconstruction” 部分中找到的算法，返回完整的请求 URI（可选包括查询字符串）。如果 <code>include_query</code> 为 <code>false</code>，则查询字符串不包含在结果 URI 中。</li><li><code>wsgiref.util.shift_path_info(environ)</code>：将单个名称从 <code>PATH_INFO</code> 移至 <code>SCRIPT_NAME</code>，然后返回该名称。<code>environ</code> 字典就地修改；如果您需要保留原始的 <code>PATH_INFO</code> 或 <code>SCRIPT_NAME</code>，请使用 <code>copy</code>。如果 <code>PATH_INFO</code> 中没有剩余的路径段，则返回 <code>None</code>。通常，此例程（routine）用于处理请求 URI 路径的每个部分，例如，将该路径视为一系列字典键。该例程修改了传入的环境，使其适合于调用位于目标 URI 处的另一个 WSGI 应用程序。例如，如果在 <code>/foo</code> 处有一个 WSGI 应用程序，并且请求 URI 路径是 <code>/foo/bar/baz</code>，在 <code>/foo</code> 处的 WSGI 应用程序调用 <code>shift_path_info</code> 函数，它将接收字符串 “bar”，并且环境将被更新以适合传递到 <code>/foo/bar/</code> 的 WSGI 应用程序。也就是说，<code>SCRIPT_NAME</code> 将从 <code>/foo</code> 更改为 <code>/foo/bar/</code>，<code>PATH_INFO</code> 将从 <code>/bar/baz</code> 更改为 <code>/baz</code>。当 <code>PATH_INFO</code> 只是 <code>"/"</code> 时，此例程将返回一个空字符串，并在 <code>SCRIPT_NAME</code> 后面附加一个斜杠，即使通常忽略空路径段，并且 <code>SCRIPT_NAME</code> 通常也不以斜杠结尾。这是故意的行为，以确保应用程序在使用此例程进行对象遍历时可以区分以 <code>/x</code> 结尾的 URI 与以 <code>/x/</code> 结尾的 URI 之间的区别。</li><li><code>wsgiref.util.setup_testing_defaults(environ)</code>：为了测试目的，使用简单的默认值更新环境。此例程添加了 WSGI 所需的各种参数，包括 <code>HTTP_HOST</code>，<code>SERVER_NAME</code>，<code>SERVER_PORT</code>，<code>REQUEST_METHOD</code>，<code>SCRIPT_NAME</code>，<code>PATH_INFO</code> 以及所有 PEP 3333 定义的 <code>wsgi.*</code> 变量。它仅提供默认值，并且不替换这些变量的任何现有设置。该例程旨在使 WSGI 服务器和应用程序的单元测试更容易设置虚拟环境。实际的 WSGI 服务器或应用程序都不应使用它，因为数据是伪造的！</li></ul><p>用法示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>util <span class="token keyword">import</span> setup_testing_defaults<span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>simple_server <span class="token keyword">import</span> make_server<span class="token comment"># A relatively simple WSGI application. It's going to print out the</span><span class="token comment"># environment dictionary after being updated by setup_testing_defaults</span><span class="token keyword">def</span> <span class="token function">simple_app</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    setup_testing_defaults<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>    status <span class="token operator">=</span> <span class="token string">'200 OK'</span>    headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>    ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>           <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> environ<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> ret<span class="token keyword">with</span> make_server<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> simple_app<span class="token punctuation">)</span> <span class="token keyword">as</span> httpd<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Serving on port 8000..."</span><span class="token punctuation">)</span>    httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>wsgiref.util.is_hop_by_hop(header_name)</code>：如果 <code>'header_name'</code> 是 <a href="https://tools.ietf.org/html/rfc2616.html">RFC 2616</a> 定义的 HTTP/1.1 “Hop-by-Hop” Header，则返回 <code>True</code>。</li><li><code>class wsgiref.util.FileWrapper(filelike, blksize=8192)</code>：用于将类似文件的对象转换为迭代器的包装器（wrapper）。生成的对象支持 <code>__getitem __()</code> 和 <code>__iter __()</code> 迭代样式，以与 Python 2.1 和 Jython 兼容。当对象被迭代时，可选的 <code>blksize</code> 参数将反复传递给类似文件的对象的 <code>read()</code> 方法，以获取要产生的字节串。当 <code>read()</code> 返回一个空字节串时，迭代结束且不可恢复。如果 filelike 具有 <code>close</code> 方法，则返回的对象也将具有 <code>close</code> 方法，并且在调用时将调用该 Filelike 对象的 <code>close</code> 方法。</li></ul><p>用法示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>util <span class="token keyword">import</span> FileWrapper<span class="token comment"># We're using a StringIO-buffer for as the file-like object</span>filelike <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token string">"This is an example file-like object"</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>wrapper <span class="token operator">=</span> FileWrapper<span class="token punctuation">(</span>filelike<span class="token punctuation">,</span> blksize<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">for</span> chunk <span class="token keyword">in</span> wrapper<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用-框架端"><a href="#应用-框架端" class="headerlink" title="应用/框架端"></a>应用/框架端</h3><p>应用对象（application object）就是一个简单的接受两个参数的可调用对象。不要混淆术语”object”就真的是一个对象实例。Python 中的函数、方法、类、实现了 <code>__call__</code> 的实例都是可以接受的应用对象。应用对象必须可以被多次调用，因为实际上所有服务器/网关（除了 CGI 网关）都会重复地调用它。</p><p>注意：我们总是讲 应用对象，不要误解为应用开发者需要使用 WSGI 作为 web 编程 API！应用开发者可以继续使用已经存在的、高级框架服务去开发他们的应用。WSGI 是一个为框架开发者和服务器开发者准备的工具，应用开发者不需要直接使用 WSGI。</p><p>应用对象必须：</p><ol><li>accept two positional parameters:<ul><li>A dictionary containing CGI like variables; and</li><li>a callback function that will be used by the application to send HTTP status code/message and HTTP headers to the server.</li></ul></li><li>return the response body to the server as strings wrapped in an iterable.</li></ol><p>比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">simple_app</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""最简单的应用对象    参数    =======    environ: 指向包含类似于 CGI 的环境变量的字典，该字典由服务器针对客户端收到的每个请求填充    start_response: 服务器提供的回调函数，它以 HTTP 状态和标头为参数    """</span>    <span class="token comment"># 使用提供的 environ 字典构建响应主体</span>    response_body <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Request method: </span><span class="token interpolation"><span class="token punctuation">{</span>environ<span class="token punctuation">[</span><span class="token string">"REQUEST_METHOD"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">'</span></span>    <span class="token comment"># HTTP 响应代码和消息</span>    status <span class="token operator">=</span> <span class="token string">'200 OK'</span>    <span class="token comment"># 客户端期望的 HTTP 标头必须将它们包装为元组对的列表：[(Header name, Header value)]</span>    response_headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">(</span><span class="token string">'Content-Length'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>response_body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 使用提供的函数将它们发送到服务器</span>    start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> response_headers<span class="token punctuation">)</span>    <span class="token comment"># 返回响应主体。请注意，尽管它可以迭代，但它包装在列表中。</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>response_body<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是两个应用对象(application object)的示例。一个是函数(function)，一个是类(class)：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HELLO_WORLD <span class="token operator">=</span> <span class="token string">b"Hello world!\n"</span><span class="token keyword">def</span> <span class="token function">simple_app</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""最简单的应用对象"""</span>    status <span class="token operator">=</span> <span class="token string">'200 OK'</span>    response_headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> response_headers<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>HELLO_WORLD<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">AppClass</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""产生相同的输出，但是用类实现。    (Note: 'AppClass' is the "application" here, so calling it    returns an instance of 'AppClass', which is then the iterable    return value of the "application callable" as required by    the spec.    If we wanted to use *instances* of 'AppClass' as application    objects instead, we would have to implement a '__call__'    method, which would be invoked to execute the application,    and we would need to create an instance for use by the    server or gateway.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>environ <span class="token operator">=</span> environ        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start_response    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        status <span class="token operator">=</span> <span class="token string">'200 OK'</span>        response_headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>start<span class="token punctuation">(</span>status<span class="token punctuation">,</span> response_headers<span class="token punctuation">)</span>        <span class="token keyword">yield</span> HELLO_WORLD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务器-网关端"><a href="#服务器-网关端" class="headerlink" title="服务器/网关端"></a>服务器/网关端</h2><p>服务器或者网关每次从 HTTP 客户端收到一个请求，就调用一次应用对象。为了描述方便，以下是一个简单的 CGI 网关，用 Python 函数实现，接收应用对象。注意这个简单的示例在错误处理方面相当简单，因为默认情况下，未捕获的异常会被 <code>dump</code> 到 <code>sys.stderr</code>，并且被 Web 服务器记入日志。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sysenc<span class="token punctuation">,</span> esc <span class="token operator">=</span> sys<span class="token punctuation">.</span>getfilesystemencoding<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'surrogateescape'</span><span class="token keyword">def</span> <span class="token function">unicode_to_wsgi</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Convert an environment variable to a WSGI "bytes-as-unicode" string</span>    <span class="token keyword">return</span> u<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>enc<span class="token punctuation">,</span> esc<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">wsgi_to_bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_with_cgi</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">:</span>    environ <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> unicode_to_wsgi<span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    environ<span class="token punctuation">[</span><span class="token string">'wsgi.input'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token builtin">buffer</span>    environ<span class="token punctuation">[</span><span class="token string">'wsgi.errors'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stderr    environ<span class="token punctuation">[</span><span class="token string">'wsgi.version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    environ<span class="token punctuation">[</span><span class="token string">'wsgi.multithread'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    environ<span class="token punctuation">[</span><span class="token string">'wsgi.multiprocess'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    environ<span class="token punctuation">[</span><span class="token string">'wsgi.run_once'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">if</span> environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTPS'</span><span class="token punctuation">,</span> <span class="token string">'off'</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        environ<span class="token punctuation">[</span><span class="token string">'wsgi.url_scheme'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'https'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        environ<span class="token punctuation">[</span><span class="token string">'wsgi.url_scheme'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http'</span>    headers_set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    headers_sent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token builtin">buffer</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headers_set<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AssertionError<span class="token punctuation">(</span><span class="token string">"write() before start_response()"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token keyword">not</span> headers_sent<span class="token punctuation">:</span>            <span class="token comment"># Before the first output, send the stored headers</span>            status<span class="token punctuation">,</span> response_headers <span class="token operator">=</span> headers_sent<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> headers_set            out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>wsgi_to_bytes<span class="token punctuation">(</span><span class="token string">'Status: %s\r\n'</span> <span class="token operator">%</span> status<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> header <span class="token keyword">in</span> response_headers<span class="token punctuation">:</span>                out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>wsgi_to_bytes<span class="token punctuation">(</span><span class="token string">'%s: %s\r\n'</span> <span class="token operator">%</span> header<span class="token punctuation">)</span><span class="token punctuation">)</span>            out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>wsgi_to_bytes<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        out<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_response</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> response_headers<span class="token punctuation">,</span> exc_info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> exc_info<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> headers_sent<span class="token punctuation">:</span>                    <span class="token comment"># Re-raise original exception if headers sent</span>                    <span class="token keyword">raise</span> exc_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>with_traceback<span class="token punctuation">(</span>exc_info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                exc_info <span class="token operator">=</span> <span class="token boolean">None</span>     <span class="token comment"># avoid dangling circular ref</span>        <span class="token keyword">elif</span> headers_set<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AssertionError<span class="token punctuation">(</span><span class="token string">"Headers already set!"</span><span class="token punctuation">)</span>        headers_set<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>status<span class="token punctuation">,</span> response_headers<span class="token punctuation">]</span>        <span class="token comment"># Note: error checking on the headers should happen here,</span>        <span class="token comment"># *after* the headers are set.  That way, if an error</span>        <span class="token comment"># occurs, start_response can only be re-called with</span>        <span class="token comment"># exc_info set.</span>        <span class="token keyword">return</span> write    result <span class="token operator">=</span> application<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">:</span>    <span class="token comment"># don't send headers until body appears</span>                write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headers_sent<span class="token punctuation">:</span>            write<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>   <span class="token comment"># send headers now if body was empty</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'close'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wsgiref-headers-–-WSGI-response-header-tools"><a href="#wsgiref-headers-–-WSGI-response-header-tools" class="headerlink" title="wsgiref.headers – WSGI response header tools"></a><a href="https://docs.python.org/zh-cn/3.10/library/wsgiref.html#module-wsgiref.headers">wsgiref.headers</a> – WSGI response header tools</h2><p>该模块提供了一个单独的类 <code>Headers</code>，用于使用类似于映射的接口方便地操作 WSGI 响应标头。</p><p><code>class wsgiref.headers.Headers([headers])</code>：创建一个类似于映射的对象来包装响应的 headers，该标头必须是如 PEP 3333 中所述的标头 <strong>名称/值</strong> 元组的列表。标头的默认值为空列表。标头对象支持典型的映射操作，包括 <code>__getitem__()</code>, <code>get()</code>, <code>__setitem__()</code>, <code>setdefault()</code>, <code>__delitem__()</code> 和 <code>__contains__()</code>。对于这些方法中的每一个，键都是标头名称（不区分大小写地对待），并且值是与该标头名称关联的第一个值。设置 header 会删除该 header 的所有现有值，然后在包装的 header 列表的末尾添加一个新值。通常保留 header 的现有顺序，将新的 header 添加到包装列表的末尾。</p><p>与字典不同，当您尝试获取或删除包装的标头列表中没有的键时，标头对象不会引发错误。获取不存在的标头只会返回 <code>None</code>，而删除不存在的标头则不会执行任何操作。</p><p><code>Headers</code> 对象还支持 <code>keys</code>，<code>values</code> 和 <code>items</code> 方法。如果存在多值标头，则 <code>keys</code> 和 <code>items</code> 方法返回的列表可以多次包含同一个键。<code>Headers</code> 对象的 <code>len</code> 方法与其 <code>items</code> 方法的长度相同，也与包装的 haeder 列表的长度相同。实际上，<code>items</code> 方法仅返回包装的 header 列表的副本。</p><p>在 <code>Headers</code> 对象上调用 <code>bytes()</code> 返回适合于作为 HTTP 响应标头传输的格式化字节串。每个标头均以其值放在一行中，并用冒号和空格分隔。每行以回车和换行符结尾，字节串以空行结尾。</p><p>除了其映射接口和格式设置功能之外，<code>Headers</code> 对象还具有以下方法用于查询和添加多值标头以及添加带有 MIME 参数的标头：</p><ul><li><code>get_all(name)</code>：返回命名标头的所有值的列表。返回的列表将按照它们在原始 header 列表中出现或添加到此实例的顺序进行排序，并且可能包含重复项。删除并重新插入的所有字段始终附加到 header 列表中。如果不存在具有给定 <code>name</code> 的字段，则返回一个空列表。</li><li><code>add_header(name, value, **_params)</code>：添加一个（可能是多值的）header，并通过关键字参数指定可选的 MIME 参数。<code>name</code> 是要添加的 header 字段。关键字参数可用于设置标头字段的 MIME 参数。每个参数必须是字符串或 <code>None</code>。参数名称中的下划线会转换为破折号，因为破折号在 Python 标识符中是非法的，但是许多 MIME 参数名称都包含破折号。如果参数值是字符串，则以 <code>name="value"</code> 的形式将其添加到标头值参数中。如果为 <code>None</code>，则仅添加参数名称。（这用于没有值的 MIME 参数。）用法示例：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">h<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'content-disposition'</span><span class="token punctuation">,</span> <span class="token string">'attachment'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'bud.gif'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面将添加一个 header，如下所示：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Content-Disposition: attachment; filename="bud.gif"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="wsgiref-simple-server-–-a-simple-WSGI-HTTP-server"><a href="#wsgiref-simple-server-–-a-simple-WSGI-HTTP-server" class="headerlink" title="wsgiref.simple_server – a simple WSGI HTTP server"></a><a href="https://docs.python.org/zh-cn/3.10/library/wsgiref.html#module-wsgiref.simple_server">wsgiref.simple_server</a> – a simple WSGI HTTP server</h2><p>该模块实现了一个简单的 HTTP 服务器（基于 <code>http.server</code>），该服务器为 WSGI 应用程序服务。每个服务器实例在给定的主机和端口上服务单个 WSGI 应用程序。</p><p>用法示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>simple_server <span class="token keyword">import</span> make_server<span class="token punctuation">,</span> demo_appport <span class="token operator">=</span> <span class="token number">8000</span>  <span class="token comment"># 端口号</span>host <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment"># IP 地址</span><span class="token comment"># demo_app 是 处理函数</span><span class="token comment"># 创建一个服务器</span><span class="token keyword">with</span> make_server<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> demo_app<span class="token punctuation">)</span> <span class="token keyword">as</span> httpd<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"在端口 </span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string"> 上提供 HTTP 服务..."</span></span><span class="token punctuation">)</span>    <span class="token comment"># 开始监听 HTTP 请求，响应请求直到进程终止</span>    httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 备选方案：处理一个请求，然后退出</span>    httpd<span class="token punctuation">.</span>handle_request<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面详细说明此示例。</p><p><code>wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)</code> 创建一个侦听 <code>host</code> 和 <code>port</code> 的新 WSGI 服务器，接受 <code>app</code> 的连接。返回值是提供的 <code>server_class</code> 的实例，并将使用指定的 <code>handler_class</code> 处理请求。<code>app</code> 必须是 PEP 3333 定义的 WSGI 应用程序对象。</p><p><code>wsgiref.simple_server.demo_app(environ, start_response)</code>：该函数是一个小型但完整的 WSGI 应用程序，它返回一个包含消息 <code>"Hello world!"</code> 的文本页面。以及 <code>environ</code> 参数中提供的键/值对的列表。这对于验证 WSGI 服务器（例如 <code>wsgiref.simple_server</code>）是否能够正确运行简单的 WSGI 应用程序很有用。</p><p><code>class wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass)</code> 创建一个 <code>WSGIServer</code> 实例。<code>server_address</code> 应该是一个 <code>(host,port)</code> 元组，而 <code>RequestHandlerClass</code> 应该是将用于处理请求的 <a href="https://docs.python.org/zh-cn/3.10/library/http.server.html#http.server.BaseHTTPRequestHandler">http.server.BaseHTTPRequestHandler</a> 的子类。通常不需要调用此构造函数，因为 <code>make_server</code> 函数可以为您处理所有详细信息。<code>WSGIServer</code> 是 <code>http.server.HTTPServer</code> 的子类，因此它的所有方法（例如 <code>serve_forever</code> 和<code>handle_request</code>）都可用。<code>WSGIServer</code> 还提供以下特定于 WSGI 的方法：</p><ul><li><code>set_app(application)</code>：将可调用的应用程序设置为将接收请求的 WSGI 应用程序。</li><li><code>get_app()</code>：返回当前设置的可调用应用程序。</li></ul><p>但是，通常不需要使用这些其他方法，因为 <code>set_app</code> 通常由 <code>make_server</code> 调用，而 <code>get_app</code> 主要是为了请求处理程序实例而存在。</p><p><code>class wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)</code> 为给定 <code>request</code>（即 <code>socket</code>），<code>client_address</code>（<code>(host,port)</code> 元组）和 <code>server</code>（<code>WSGIServer</code> 实例）创建 HTTP handler。您无需直接创建此类的实例； 它们由 <code>WSGIServer</code> 对象根据需要自动创建。但是，您可以将该类作为子类，并将其作为 <code>handler_class</code> 提供给 <code>make_server</code> 函数。在子类中重写的一些可能相关的方法：</p><ul><li><code>get_environ()</code>：返回包含请求的 WSGI 环境的字典。缺省实现复制 WSGIServer 对象的 <code>base_environ</code> 词典属性的内容，然后添加从 HTTP 请求派生的各种标头。每次对此方法的调用都应返回一个新字典，其中包含 PEP 3333 中指定的所有相关 CGI 环境变量。</li><li><code>get_stderr()</code> 返回应该用作 <code>wsgi.errors</code> 流的对象。默认实现只是返回 <code>sys.stderr</code>。</li><li><code>handle()</code> 处理 HTTP 请求。缺省实现使用 <a href="https://docs.python.org/zh-cn/3.10/library/wsgiref.html#module-wsgiref.handlers"><code>wsgiref.handlers</code></a> 类创建一个处理程序实例，以实现实际的 WSGI 应用程序接口。</li></ul><h2 id="中间件：可以与两端交互的组件"><a href="#中间件：可以与两端交互的组件" class="headerlink" title="中间件：可以与两端交互的组件"></a>中间件：可以与两端交互的组件</h2><p>中间件（Middleware）就是一个简单对象：既可以作为服务端角色，响应应用对象；也可以作为应用对象，与服务器交互。除此之外，还有一些其他功能：</p><ul><li>重写 environ，然后基于 URL，将请求对象路由给不同的应用对象。</li><li>支持多个应用或者框架顺序地运行于同一个进程中。</li><li>通过转发请求和响应，支持负载均衡和远程处理。</li><li>支持对内容做后处理(postprocessing)，比如处理一个 XSL 样式表文件。</li></ul><p>中间件的灵魂是：对 WSGI 接口的服务器/网关端和 应用/框架端是透明的，不需要其他条件。</p><p>希望将中间件合并进应用的用户，将这个中间件传递给服务器即可，就好像这个中间件是一个应用对象；或者让中间件去调用应用对象，好像这个中间件就是服务器。当然，被中间件包装(wrap)的应用对象，实际上可能是另一个包装了另一个应用的中间件，以此类推，就创建了一个中间件栈（middleware stack）。</p><p>最重要的，中间件必须同时满足服务端和应用端的限制和条件。然而，在有些情况下，中间件需要的条件比单纯的服务端或者应用端更严格，这些点会在下面予以说明。</p><p>以下是一个中间件示例。他用 Joe Strout 的 <code>piglatin.py</code> 将 <code>text/plain</code> 的响应转换成 pig latin（注意：真正的中间件应该使用更加健壮的方式——应该检查内容的类型和内容的编码，同样这个简单的例子还忽略了一个单词可能被分割到一个块边界的可能性）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> foo_app <span class="token keyword">import</span> foo_app<span class="token keyword">from</span> piglatin <span class="token keyword">import</span> piglatin<span class="token keyword">class</span> <span class="token class-name">LatinIter</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Transform iterated output to piglatin, if it's okay to do so    Note that the "okayness" can change until the application yields    its first non-empty bytestring, so 'transform_ok' has to be a mutable    truth value.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> transform_ok<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'close'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>close <span class="token operator">=</span> result<span class="token punctuation">.</span>close        self<span class="token punctuation">.</span>_next <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span>__next__        self<span class="token punctuation">.</span>transform_ok <span class="token operator">=</span> transform_ok    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform_ok<span class="token punctuation">:</span>            <span class="token keyword">return</span> piglatin<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># call must be byte-safe on Py3</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Latinator</span><span class="token punctuation">:</span>    <span class="token comment"># by default, don't transform output</span>    transform <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>application <span class="token operator">=</span> application    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>        transform_ok <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">start_latin</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> response_headers<span class="token punctuation">,</span> exc_info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># Reset ok flag, in case this is a repeat call</span>            <span class="token keyword">del</span> transform_ok<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> response_headers<span class="token punctuation">:</span>                <span class="token keyword">if</span> name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'content-type'</span> <span class="token keyword">and</span> value <span class="token operator">==</span> <span class="token string">'text/plain'</span><span class="token punctuation">:</span>                    transform_ok<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>                    <span class="token comment"># Strip content-length if present, else it'll be wrong</span>                    response_headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>                                        <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> response_headers                                        <span class="token keyword">if</span> name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'content-length'</span>                                        <span class="token punctuation">]</span>                    <span class="token keyword">break</span>            write <span class="token operator">=</span> start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> response_headers<span class="token punctuation">,</span> exc_info<span class="token punctuation">)</span>            <span class="token keyword">if</span> transform_ok<span class="token punctuation">:</span>                <span class="token keyword">def</span> <span class="token function">write_latin</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>                    write<span class="token punctuation">(</span>piglatin<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># call must be byte-safe on Py3</span>                <span class="token keyword">return</span> write_latin            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> write        <span class="token keyword">return</span> LatinIter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>application<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_latin<span class="token punctuation">)</span><span class="token punctuation">,</span> transform_ok<span class="token punctuation">)</span><span class="token comment"># Run foo_app under a Latinator's control, using the example CGI gateway</span>run_with_cgi<span class="token punctuation">(</span>Latinator<span class="token punctuation">(</span>foo_app<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wsgiref-validate-—-WSGI-conformance-checker"><a href="#wsgiref-validate-—-WSGI-conformance-checker" class="headerlink" title="wsgiref.validate — WSGI conformance checker"></a><a href="https://docs.python.org/zh-cn/3.10/library/wsgiref.html#module-wsgiref.validate">wsgiref.validate</a> — WSGI conformance checker</h2><p>创建新的 WSGI 应用程序对象，框架，服务器或中间件（middleware）时，使用 <code>wsgiref.validate</code> 验证新代码的一致性可能很有用。该模块提供了创建 WSGI 应用程序对象的函数，该函数验证 WSGI 服务器或网关与 WSGI 应用程序对象之间的通信，以检查双方的协议一致性。</p><p>请注意，该实用程序不能保证完全符合 PEP 3333；该模块中没有错误并不一定意味着不存在错误。但是，如果此模块确实产生错误，则实际上可以确定服务器或应用程序不是 $100%$ 兼容的。</p><p>该模块基于 Ian Bicking 的“Python Paste”库中的 <code>paste.lint</code> 模块。</p><p><code>wsgiref.validate.validator(application)</code> 包装应用程序并返回一个新的 WSGI 应用程序对象。返回的应用程序会将所有请求转发到原始应用程序，并将检查该应用程序和调用它的服务器是否都符合 WSGI 规范和 RFC 2616。</p><p>任何检测到的不符合都会导致引发 <code>AssertionError</code>；但是请注意，如何处理这些错误取决于服务器。例如，<code>wsgiref.simple_server</code> 和其他基于 <code>wsgiref.handlers</code> 的服务器（不会重写错误处理方法以执行其他操作）将仅输出一条消息，指出发生了错误，并将回溯信息转储到 <code>sys.stderr</code> 或其他错误流。</p><p>该包装器还可以使用 <a href="https://docs.python.org/zh-cn/3.10/library/warnings.html#module-warnings"><code>warnings</code></a> 模块生成输出，以指示可疑的行为，但实际上可能不会被 PEP 3333 禁止。除非使用 Python 命令行选项或警告 API 禁止它们，否则任何此类警告都会写入 <code>sys.stderr</code>（不是 <code>wsgi.errors</code>，除非它们恰好是同一对象）。</p><p>用法示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>validate <span class="token keyword">import</span> validator<span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>simple_server <span class="token keyword">import</span> make_server<span class="token comment"># Our callable object which is intentionally not compliant to the</span><span class="token comment"># standard, so the validator is going to break</span><span class="token keyword">def</span> <span class="token function">simple_app</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    status <span class="token operator">=</span> <span class="token string">'200 OK'</span>  <span class="token comment"># HTTP Status</span>    headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># HTTP Headers</span>    start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>    <span class="token comment"># This is going to break because we need to return a list, and</span>    <span class="token comment"># the validator is going to inform us</span>    <span class="token keyword">return</span> <span class="token string">b"Hello World"</span><span class="token comment"># This is the application wrapped in a validator</span>validator_app <span class="token operator">=</span> validator<span class="token punctuation">(</span>simple_app<span class="token punctuation">)</span><span class="token keyword">with</span> make_server<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> validator_app<span class="token punctuation">)</span> <span class="token keyword">as</span> httpd<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Listening on port 8000...."</span><span class="token punctuation">)</span>    httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wsgiref-handlers-–-server-gateway-base-classes"><a href="#wsgiref-handlers-–-server-gateway-base-classes" class="headerlink" title="wsgiref.handlers – server/gateway base classes"></a><a href="https://docs.python.org/zh-cn/3.10/library/wsgiref.html#module-wsgiref.handlers">wsgiref.handlers</a> – server/gateway base classes</h2><p>该模块提供用于实现 WSGI 服务器和网关的基本处理程序类。这些基类可以处理与 WSGI 应用程序进行通信的大部分工作，只要它们具有类似 CGI 的环境以及输入，输出和错误流即可。</p>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Common Gateway Interface support</title>
      <link href="/dao/post/zh-CN/8a7367c4d509.html"/>
      <url>/dao/post/zh-CN/8a7367c4d509.html</url>
      
        <content type="html"><![CDATA[<p>Python 提供了通用网关接口（Common Gateway Interface，CGI）脚本的支持模块 <code>cgi</code>。HTTP 服务器调用 CGI 脚本，通常用于处理通过 HTML &lt;FORM&gt; 或 &lt;ISINDEX&gt; 元素提交的用户输入。</p><p>通常，CGI 脚本位于服务器的特殊 <code>cgi-bin</code> 目录中。HTTP 服务器将有关请求的各种信息（例如客户端的主机名，请求的 URL，查询字符串以及许多其他东西）放置在脚本的 Shell 环境中，执行脚本，并将脚本的输出发送回给客户端。CGI 程序可以是 Python 脚本，PERL 脚本，SHELL 脚本，C 或者 C++ 程序等，本文仅仅考虑 Python。</p><p><img src="/dao/post/zh-CN/8a7367c4d509/cgi-intro.png"></p><p>脚本的输入也连接到客户端，有时以这种方式读取表单数据。在其他时候，表单数据是通过 URL 的“查询字符串”部分传递的。该模块旨在处理不同的情况，并为 Python 脚本提供更简单的界面。它还提供了许多实用程序，可帮助调试脚本，并且最新添加的功能是支持从表单上传文件（如果您的浏览器支持的话）。</p><p>CGI 脚本的输出应由两部分组成，并用空白行分隔。第一部分包含许多 headers，告诉客户端要遵循的数据类型。生成最小 header 部分的 Python 代码如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html"</span><span class="token punctuation">)</span>    <span class="token comment"># HTML is following</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># blank line, end of headers</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二部分通常是 HTML，它允许客户端软件显示带有 header，嵌入式图像等格式良好的文本。这是 Python 代码，可打印简单的 HTML：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;TITLE&gt;CGI script output&lt;/TITLE&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;H1&gt;This is my first CGI script&lt;/H1&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Python 中 CGI 模块中文乱码的问题解决方案：去除 <code>print(&lt;meta charset="UTF-8"&gt;)</code> 这句即可。</p><h2 id="cgitb-——-用于-CGI-脚本的回溯管理器"><a href="#cgitb-——-用于-CGI-脚本的回溯管理器" class="headerlink" title="cgitb —— 用于 CGI 脚本的回溯管理器"></a>cgitb —— 用于 CGI 脚本的回溯管理器</h2><p><a href="https://docs.python.org/zh-cn/3.10/library/cgitb.html#module-cgitb">cgitb</a> 模块提供了用于 Python 脚本的特殊异常处理程序。（这个名称有一点误导性。它最初是设计用来显示 HTML 格式的 CGI 脚本详细回溯信息。但后来被一般化为也可显示纯文本格式的回溯信息。） 激活这个模块之后，如果发生了未被捕获的异常，将会显示详细的已格式化的报告。报告显示内容包括每个层级的源代码摘录，还有当前正在运行的函数的参数和局部变量值，以帮助你调试问题。你也可以选择将此信息保存至文件而不是将其发送至浏览器。</p><p>要启用此特性，只需简单地将此代码添加到你的 CGI 脚本的最顶端:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cgitbcgitb<span class="token punctuation">.</span>enable<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://docs.python.org/zh-cn/3.10/library/cgitb.html#cgitb.enable">enable()</a> 函数的选项可以控制是将报告显示在浏览器中，还是将报告记录到文件供以后进行分析。</p><ul><li><code>cgitb.enable(display=1, logdir=None, context=5, format='html')</code> 函数可通过设置 <code>sys.excepthook</code> 的值以使 <code>cgitb</code> 模块接管解释器默认的异常处理机制。<ul><li>可选参数 <code>display</code> 默认为 1 并可被设为 0 来停止将回溯发送至浏览器。如果给出了参数 <code>logdir</code>，则回溯会被写入文件。<code>logdir</code> 的值应当是一个用于存放所写入文件的目录。可选参数 <code>context</code> 是要在回溯中的当前源代码行前后显示的上下文行数；默认为 5。如果可选参数 <code>format</code> 为 <code>"html"</code>，输出将为 HTML 格式。任何其它值都会强制启用纯文本输出。默认取值为 <code>"html"</code>。</li></ul></li><li><code>cgitb.text(info, context=5)</code> 函数用于处理 <code>info</code> (一个包含 <code>sys.exc_info()</code> 返回结果的 3 元组) 所描述的异常，将其回溯格式化为文本并将结果作为字符串返回。<ul><li>可选参数 <code>context</code> 是要在回溯中的当前源码行前后显示的上下文行数；默认为 5。</li></ul></li><li><code>cgitb.html(info, context=5)</code> 函数用于处理 <code>info</code> (一个包含 <code>sys.exc_info()</code> 返回结果的 3 元组) 所描述的异常，将其回溯格式化为 HTML 并将结果作为字符串返回。 <ul><li>可选参数 <code>context</code> 是要在回溯中的当前源码行前后显示的上下文行数；默认为 5。</li></ul></li><li><code>cgitb.handler(info=None)</code> 函数使用默认设置处理异常（即在浏览器中显示报告，但不记录到文件）。当你捕获了一个异常并希望使用 <code>cgitb</code> 来报告它时可以使用此函数。可选的 <code>info</code> 参数应为一个包含异常类型，异常值和回溯对象的 3 元组，与 <code>sys.exc_info()</code> 所返回的元组完全一致。如果未提供 <code>info</code> 参数，则会从 <code>sys.exc_info()</code> 获取当前异常。</li></ul><p>在脚本开发过程中使用此功能非常有帮助。<code>cgitb</code> 生成的报告提供的信息可以为您节省大量的时间来查找错误。测试脚本并确信其正常工作后，您随时可以在以后删除 <code>cgitb</code> 行。</p><h2 id="FieldStorage"><a href="#FieldStorage" class="headerlink" title="FieldStorage"></a>FieldStorage</h2><p>要获取提交的表单数据，请使用 <code>FieldStorage</code> 类。如果表单包含非 ASCII 字符，请使用 <code>encoding</code> 关键字参数设置为为文档定义的编码值。它通常包含在 HTML 文档的 HEAD 部分的 <code>META</code> 标记中或 <code>Content-Type</code> 标头中。这将从标准输入或环境中读取表单内容（取决于根据 CGI 标准设置的各种环境变量的值）。由于它可能消耗标准输入，因此只能实例化一次。</p><p>可以像 Python 字典一样为 <code>FieldStorage</code> 实例建立索引。它允许使用 <code>in</code> 运算符进行成员资格测试，并且还支持标准词典方法 <code>keys()</code> 和内置函数 <code>len()</code>。包含空字符串的表单字段将被忽略，并且不会出现在字典中；要保留这些值，请在创建 <code>FieldStorage</code> 实例时为可选的 <code>keep_blank_values</code> 关键字参数提供一个真值。</p><p>例如，以下代码（假定已经打印了 Content-Type 标头和空白行）检查字段 <code>name</code> 和 <code>addr</code> 都设置为非空字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">form <span class="token operator">=</span> cgi<span class="token punctuation">.</span>FieldStorage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"name"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> form <span class="token keyword">or</span> <span class="token string">"addr"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> form<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;H1&gt;Error&lt;/H1&gt;"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Please fill in the name and addr fields."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;p&gt;name:"</span><span class="token punctuation">,</span> form<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;p&gt;addr:"</span><span class="token punctuation">,</span> form<span class="token punctuation">[</span><span class="token string">"addr"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>further form processing here<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，通过 <code>form[key]</code> 访问的字段本身就是 <code>FieldStorage</code>（或 <code>MiniFieldStorage</code>，取决于 <code>form</code> 编码）的实例。实例的 <code>value</code> 属性产生字段的字符串值。<code>getvalue()</code> 方法直接返回此字符串值。它也接受可选的第二个参数作为默认值，如果请求的键不存在，则返回默认值。</p><p>如果提交的表单数据包含多个同名字段，则由 <code>form[key]</code> 检索的对象不是 <code>FieldStorage</code> 或 <code>MiniFieldStorage</code> 实例，而是此类实例的列表。同样，在这种情况下，<code>form.getvalue(key)</code> 将返回字符串列表。如果您预计会发生这种情况（当您的 HTML 表单包含多个具有相同名称的字段时），请使用 <code>getlist()</code> 方法，该方法始终返回值列表（这样就无需对单个项目的大小写进行特殊处理）。例如，此代码连接任意数量的用户名字段，并用逗号分隔：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">value <span class="token operator">=</span> form<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>usernames <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果字段表示上传的文件，则通过 <code>value</code> 属性或 <code>getvalue()</code> 方法访问该值将读取内存中的整个文件（以字节为单位）。这可能不是您想要的。您可以通过测试文件名属性或文件属性来测试上传的文件。然后，您可以从 <code>file</code> 属性读取数据，然后将其自动关闭，作为 <code>FieldStorage</code> 实例的垃圾回收的一部分（<code>read()</code> 和 <code>readline()</code> 方法将返回字节）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fileitem <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">"userfile"</span><span class="token punctuation">]</span><span class="token keyword">if</span> fileitem<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token comment"># It's an uploaded file; count lines</span>    linecount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> fileitem<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> line<span class="token punctuation">:</span> <span class="token keyword">break</span>        linecount <span class="token operator">=</span> linecount <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>FieldStorage</code> 对象还支持在 <code>with</code> 语句中使用，这将在完成后自动关闭它们。</p><p>如果在获取上载文件的内容时遇到错误（例如，当用户通过单击“上一步”或“取消”来中断表单提交时），则该字段的对象的完成属性将设置为值 <code>-1</code>。</p><p>文件上传草案标准具有从一个字段上传多个文件的可能性（使用递归 <code>multipart/*</code> 编码）。发生这种情况时，该项目将是类似于字典的 <code>FieldStorage</code> 项目。这可以通过测试其 <code>type</code> 属性来确定，该属性应该是 <code>multipart/form-data</code>（或者可能是另一个匹配 <code>multipart/*</code> 的 MIME 类型）。在这种情况下，可以像顶级表单对象一样递归地对其进行迭代。</p><p>当表单以“旧”格式（作为查询字符串或作为 <code>application/x-www-form-urlencoded</code> 类型的单个数据部分）提交时，这些项实际上将是 <code>MiniFieldStorage</code> 类的实例。在这种情况下，列表，文件和文件名属性始终为 <code>None</code>。</p><p>通过 POST 提交的还具有查询字符串的表单将同时包含 <code>FieldStorage</code> 和 <code>MiniFieldStorage</code> 项。</p><h2 id="开始编写-CGI-程序"><a href="#开始编写-CGI-程序" class="headerlink" title="开始编写 CGI 程序"></a>开始编写 CGI 程序</h2><ol><li>创建文件夹 <code>www/cgi-bin</code></li><li>编写 <code>www/cgi-bin/hello.py</code>：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html"</span><span class="token punctuation">)</span> <span class="token comment"># 发送到浏览器并告知浏览器显示的内容类型为"text/html"</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 空行，告诉服务器结束头部   </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;html lang="zh-CN"&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;head&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;title&gt;Hello Word - 我的第一个 CGI 程序！&lt;/title&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;/head&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;body&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;h2&gt;Hello Word! 我是第一个 CGI 程序&lt;/h2&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;/body&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;/html&gt;'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>进入目录 <code>www/</code>，并运行 CMD：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ python -m http.server --cgi 8001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>在浏览器输入 URL：<a href="http://localhost:8001/cgi-bin/hello.py">http://localhost:8001/cgi-bin/hello.py</a>，显示效果：</li></ol><p><img src="/dao/post/zh-CN/8a7367c4d509/cgi-hi1.png"></p><h2 id="GET-和-POST-方法"><a href="#GET-和-POST-方法" class="headerlink" title="GET 和 POST 方法"></a>GET 和 POST 方法</h2><p>浏览器客户端通过两种方法向服务器传递信息，这两种方法就是 GET 方法和 POST 方法。</p><h3 id="使用-GET-方法传输数据"><a href="#使用-GET-方法传输数据" class="headerlink" title="使用 GET 方法传输数据"></a>使用 GET 方法传输数据</h3><p>GET 方法发送编码后的用户信息到服务端，数据信息包含在请求页面的 URL上，以”<code>?</code>“号分割, 如下所示：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有关 GET 请求的其他一些信息：</p><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据</li></ul><h4 id="简单的-URL-实例：GET-方法"><a href="#简单的-URL-实例：GET-方法" class="headerlink" title="简单的 URL 实例：GET 方法"></a>简单的 URL 实例：GET 方法</h4><p>以下是一个简单的 URL，使用 GET 方法向 <code>hello_get.py</code> 程序发送两个参数：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">8001</span><span class="token operator">/</span>cgi<span class="token operator">-</span><span class="token builtin">bin</span><span class="token operator">/</span>hello_get<span class="token punctuation">.</span>py?name<span class="token operator">=</span>上善若水<span class="token operator">&amp;</span>url<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">//</span>xinetzone<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span>dao<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下为 <code>hello_get.py</code> 的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cgi<span class="token comment"># 创建 FieldStorage 的实例化</span>form <span class="token operator">=</span> cgi<span class="token punctuation">.</span>FieldStorage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取数据</span>site_name <span class="token operator">=</span> form<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>site_url <span class="token operator">=</span> form<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;html&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;head&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;title&gt;CGI 测试实例&lt;/title&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/head&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;body&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"&lt;h2&gt;</span><span class="token interpolation"><span class="token punctuation">{</span>site_name<span class="token punctuation">}</span></span><span class="token string"> 官网：</span><span class="token interpolation"><span class="token punctuation">{</span>site_url<span class="token punctuation">}</span></span><span class="token string">&lt;/h2&gt;"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/body&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/html&gt;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器请求输出结果：</p><p><img src="/dao/post/zh-CN/8a7367c4d509/GET.png"></p><h4 id="简单的表单实例：GET-方法"><a href="#简单的表单实例：GET-方法" class="headerlink" title="简单的表单实例：GET 方法"></a>简单的表单实例：GET 方法</h4><p>以下是一个通过 HTML 的表单使用 GET 方法向服务器发送两个数据，提交的服务器脚本是hello_get.py 文件，hello-get.html 代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"zh-CN"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>上善若水教程<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"/cgi-bin/hello_get.py"</span> method<span class="token operator">=</span><span class="token string">"get"</span><span class="token operator">&gt;</span>        站点名称<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>        站点 URL<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"url"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下 <code>cgi-bin</code> 目录只能存放脚本文件，我们将 <code>hello_get.html</code> 存储在 <code>test</code> 目录下。</p><p>浏览器显示：</p><p><img src="/dao/post/zh-CN/8a7367c4d509/test-get.png"></p><p>点击提交按钮将会自动跳转到 <a href="http://localhost:8001/cgi-bin/hello_get.py?name=%E4%B8%8A%E5%96%84%E8%8B%A5%E6%B0%B4&amp;url=https://xinetzone.github.io/dao/">http://localhost:8001/cgi-bin/hello_get.py?name=上善若水&amp;url=https://xinetzone.github.io/dao/</a></p><h3 id="使用-POST-方法传递数据"><a href="#使用-POST-方法传递数据" class="headerlink" title="使用 POST 方法传递数据"></a>使用 POST 方法传递数据</h3><p>使用 POST 方法向服务器传递数据是更安全可靠的，像一些敏感信息如用户密码等需要使用 POST 传输数据。</p><p>以下同样是 <code>hello_get.py</code> ，它也可以处理浏览器提交的 POST 表单数据，以下为表单通过 POST 方法（<code>method="post"</code>）向服务器脚本 <code>hello_get.py</code> 提交数据：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>上善若水教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/cgi-bin/hello_get.py<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        站点名称: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>        站点 URL: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过-CGI-程序传递-checkbox-数据"><a href="#通过-CGI-程序传递-checkbox-数据" class="headerlink" title="通过 CGI 程序传递 checkbox 数据"></a>通过 CGI 程序传递 checkbox 数据</h3><p><code>checkbox</code> 用于提交一个或者多个选项数据，HTML 代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>上善若水教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/cgi-bin/checkbox.py<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xinetzone<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> 上善若水        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baidu<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> 百度        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择站点<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为 <code>checkbox.py</code> 文件的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cgiform <span class="token operator">=</span> cgi<span class="token punctuation">.</span>FieldStorage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 接收字段数据</span><span class="token keyword">if</span> form<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token string">'baidu'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   baidu_flag <span class="token operator">=</span> <span class="token string">"是"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   baidu_flag <span class="token operator">=</span> <span class="token string">"否"</span><span class="token keyword">if</span> form<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token string">'xinetzone'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   xinetzone_flag <span class="token operator">=</span> <span class="token string">"是"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   xinetzone_flag <span class="token operator">=</span> <span class="token string">"否"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;html&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;head&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;title&gt;CGI 测试实例&lt;/title&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/head&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;body&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h2&gt;上善若水 是否选择了 : %s&lt;/h2&gt;"</span> <span class="token operator">%</span> xinetzone_flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h2&gt; 百度 是否选择了 : %s&lt;/h2&gt;"</span> <span class="token operator">%</span> baidu_flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/body&gt;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/html&gt;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多参考：<a href="https://www.runoob.com/python3/python3-cgi-programming.html">Python CGI编程</a>|<a href="https://docs.python.org/zh-cn/3.10/library/cgi.html">cgi</a></p>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> cgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML &lt;head&gt;</title>
      <link href="/dao/post/zh-CN/add4292f3151.html"/>
      <url>/dao/post/zh-CN/add4292f3151.html</url>
      
        <content type="html"><![CDATA[<p>HTML <code>&lt;head&gt;</code> 元素规定文档相关的配置信息（元数据），包括文档的标题，引用的文档样式和脚本等。HTML <code>&lt;head&gt;</code> 元素与 <code>&lt;body&gt;</code> 元素不同，它的内容不会在浏览器中显示，它的作用是保存页面的一些 <strong>元数据</strong>。</p><p>下面介绍一些常用的 <code>&lt;head&gt;</code> 元素的子元素。</p><h2 id="lt-title-gt-元素"><a href="#lt-title-gt-元素" class="headerlink" title="<title> 元素"></a>&lt;title&gt; 元素</h2><p>HTML <code>&lt;title&gt;</code> 元素定义文档的标题，显示在浏览器的标题栏或标签页上。它只可以包含文本，若是包含有标签，则它包含的任何标签都将被忽略。</p><p>页面 <code>&lt;title&gt;</code> 的内容对于搜索引擎优化（SEO）非常重要！搜索引擎算法使用页面标题来确定在搜索结果中列出页面时的顺序。用途如下：</p><ul><li>在浏览器工具栏中定义标题</li><li>将页面添加到收藏夹时为其提供标题</li><li>在搜索引擎结果中显示页面标题</li></ul><p>以下是创建优质 <code>&lt;title&gt;</code> 的一些技巧：</p><ul><li>选择更长的描述性标题（避免使用一个或两个单词的标题）</li><li>搜索引擎将显示标题的大约50至60个字符，因此请确保标题的长度不超过该字符</li><li>不要仅将单词列表用作标题（这可能会降低页面在搜索结果中的位置）</li><li>尝试确保您的标题在您自己的网站中尽可能唯一。标题重复（或几乎重复）可能会导致搜索结果不准</li></ul><p>因此，请尝试使 <code>&lt;title&gt;</code> 尽可能准确和有意义！</p><p>注意别和 <code>&lt;h1&gt;</code> 元素搞混了，<code>&lt;h1&gt;</code> 是为 <code>&lt;body&gt;</code> 添加标题的。有时候 <code>&lt;h1&gt;</code> 也叫作网页标题。但是二者并不相同。</p><ul><li><code>&lt;h1&gt;</code> 元素在页面加载完毕时显示在页面中，通常只出现一次，用来标记页面内容的标题（故事名称、新闻摘要，等等）。</li><li><code>&lt;title&gt;</code> 元素是一项元数据，用于表示整个 HTML 文档的标题（而不是文档内容）。</li></ul><h2 id="lt-link-gt-元素"><a href="#lt-link-gt-元素" class="headerlink" title="<link> 元素"></a>&lt;link&gt; 元素</h2><p>HTML外部资源链接元素 (<code>&lt;link&gt;</code>) 规定了当前文档与外部资源的关系。该元素最常用于链接样式表，此外也可以被用来创建站点图标(比如 PC 端的“favicon”图标和移动设备上用以显示在主屏幕的图标) 。</p><p>要链接一个外部的样式表，你需要在你的<code>&lt;head&gt;</code>中包含一个<code>&lt;link&gt;</code>元素：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个简单的例子中，使用了 <code>href</code> 属性设置外部资源的路径，并设置 <code>rel</code> 属性的值为“stylesheet”(样式表)。<code>rel</code> 表示“关系 (relationship) ”，它可能是 <code>&lt;link&gt;</code> 元素其中一个关键的特性——属性值表示 <code>&lt;link&gt;</code> 项的链接方式与包含它的文档之间的关系。</p><h3 id="在你的站点增加自定义图标"><a href="#在你的站点增加自定义图标" class="headerlink" title="在你的站点增加自定义图标"></a>在你的站点增加自定义图标</h3><p>为了进一步丰富你的网站设计，你可以在元数据中添加对自定义图标的引用，这些将在特定的场合中显示。</p><p>这个不起眼的图标已经存在很多很多年了，16 x 16 像素是这种图标的第一种类型。你可以看见这些图标出现在浏览器每一个打开的页面中的标签页中中以及在书签面板中的书签页面中。</p><p>页面添加图标的方式有：</p><ol><li>将其保存在与网站的索引页面相同的目录中，以 <code>.ico</code> 格式保存（大多数浏览器将支持更通用的格式，如 <code>.gif</code> 或 <code>.png</code>，但使用 ICO 格式将确保它能在如 Internet Explorer 6 一样久远的浏览器显示）</li><li>将以下行添加到 HTML <code>&lt;head&gt;</code> 中以引用它：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如今还有很多其他的图标类型可以考虑。例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- third-generation iPad with high-resolution Retina display: --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>144x144<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://developer.cdn.mozilla.net/static/img/favicon144.a6e4162070f4.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- iPhone with high-resolution Retina display: --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>114x114<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://developer.cdn.mozilla.net/static/img/favicon114.0e9fabd44f85.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- first- and second-generation iPad: --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>72x72<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://developer.cdn.mozilla.net/static/img/favicon72.8ff9d87c82a0.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- non-Retina iPhone, iPod Touch, and Android 2.1+ devices: --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://developer.cdn.mozilla.net/static/img/favicon57.a2490b9a2d76.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- basic favicon --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://developer.cdn.mozilla.net/static/img/favicon32.e02854fdcf73.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些注释解释了每个图标的用途：这些元素涵盖的东西提供一个高分辨率图标，这些高分辨率图标当网站保存到 iPad 的主屏幕时使用。</p><p>用于表示不同移动平台上特殊的图标类型，例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>114x114<span class="token punctuation">"</span></span>      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-icon-114.png<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>sizes</code> 属性表示图标大小，<code>type</code> 属性包含了链接资源的 MIME 类型。这些属性为浏览器选择最合适的图标提供了有用的提示。</p><p>你也可以提供一个媒体类型，或者在 <code>media</code> 属性内部进行查询；这种资源将只在满足媒体条件的情况下才被加载进来。例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>print.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>print<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen and (max-width: 600px)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>&lt;link&gt;</code> 也加入了一些新的有意思的性能和安全特性。举例如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFont.woff2<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font<span class="token punctuation">"</span></span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font/woff2<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 <code>rel</code> 设定为 <code>preload</code>，表示浏览器应该预加载该资源 (更多细节见<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content">使用rel=”preload”预加载内容</a>) 。<code>as</code> 属性表示获取特定的内容类。<code>crossorigin</code> 属性表示该资源是否应该使用一个 CORS 请求来获取。</p>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML &lt;base&gt; 改变网站根目录</title>
      <link href="/dao/post/zh-CN/327e2f60b422.html"/>
      <url>/dao/post/zh-CN/327e2f60b422.html</url>
      
        <content type="html"><![CDATA[<p><code>&lt;base&gt;</code> 元素为页面上的所有链接规定默认根地址（href）或默认目标（target）。通常情况下，浏览器会从当前文档的 URL 中提取相应的元素来填写相对 URL 中的空白。使用 <code>&lt;base&gt;</code> 元素可以改变这一点。浏览器随后将不再使用当前文档的 URL，而使用指定的基本 URL 来解析所有的相对 URL。这其中包括 <code>&lt;a&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;form&gt;</code> 元素中的 URL。</p><p>注意：<code>&lt;base&gt;</code> 元素必须位于 <code>&lt;head&gt;</code> 元素内部，且一个文档仅只能有一个 <code>&lt;base&gt;</code> 元素。</p><p>示例如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3school.com.cn/i/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eg_smile.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>请注意，我们已经为图像规定了一个相对地址。由于我们已经在 head 部分规定了一个基准 URL，浏览器将在如下地址寻找图片：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>"http://www.w3school.com.cn/i/eg_smile.gif"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3school.com.cn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>W3School<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>请注意，链接会在新窗口中打开，即使链接中没有 target="_blank" 属性。这是因为 `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">&gt;</span></span>` 元素的 target 属性已经被设置为 "_blank" 了。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个文档的 <code>&lt;base&gt;</code> URL, 可以通过使用&nbsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/baseURI"><code>document.baseURI</code></a>&nbsp;的 JS 脚本查询。如果文档不包含&nbsp;<code>&lt;base&gt;</code>&nbsp;元素，<code>baseURI</code>&nbsp;默认为&nbsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/location/href"><code>document.location.href</code></a>。</p><h2 id="页内跳转"><a href="#页内跳转" class="headerlink" title="页内跳转"></a>页内跳转</h2><p>指向文档中某个片段的链接，例如 <code>&lt;a href="#some-id"&gt;</code> 用 <code>&lt;base&gt;</code> 解析，触发对带有附加片段的基本 URL 的 HTTP 请求。</p><p>例如：给定 <code>&lt;base href="https://example.com"&gt;</code> 以及此链接 <code>&lt;a href="#anchor"&gt;Anker&lt;/a&gt;</code>，链接j会指向 <a href="https://example.com/#anchor">https://example.com/#anchor</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直线、圆、圆锥曲线</title>
      <link href="/dao/post/zh-CN/1cd68c1c97b2.html"/>
      <url>/dao/post/zh-CN/1cd68c1c97b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-直线"><a href="#1-直线" class="headerlink" title="1 直线"></a>1 直线</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><ol><li>直线的倾斜角：一条直线向上的方向与 $x$ 轴正方向所成的最小正角叫做这条直线的<strong>倾斜角</strong>，常用 $\alpha$ 表示，其范围为 $[0, \pi)$.</li><li>直线的斜率 $k = \tan{\alpha}$（$\alpha \ne \frac \pi 2$）。</li><li>直线方程：<ul><li>点斜式：$y - y_0 = k(x-x_0)$</li><li>倾斜式：$y = kx + b$</li><li>两点式：$\cfrac{y-y_1}{y_2-y_1}=\cfrac{x-x_1}{x_2-x_1}$</li><li>截距式：$\cfrac x a + \cfrac y b = 1$</li><li>一般式：$Ax + By + C = 0, ; (A^2+B^2\ne 0)$</li></ul></li></ol><h3 id="1-2-两条直线的位置关系"><a href="#1-2-两条直线的位置关系" class="headerlink" title="1.2 两条直线的位置关系"></a>1.2 两条直线的位置关系</h3><p>设存在斜率的两条直线分为为 $l_1: y = kx_1 + b_1, l_2: y = kx_2 + b_2$</p><ol><li>$l_1$ 与 $l_2$ 平行 $\hArr$ $k_1 = k_2, b_1 \ne b_2$</li><li>$l_1$ 与 $l_2$ 重合 $\hArr$ $k_1 = k_2, b_1 = b_2$</li><li>$l_1$ 与 $l_2$ 垂直 $\hArr$ $k_1 k_2 = -1$</li></ol><h3 id="1-3-点到直线的距离"><a href="#1-3-点到直线的距离" class="headerlink" title="1.3 点到直线的距离"></a>1.3 点到直线的距离</h3><p>点 $P(x_0,y_0)$ 到直线 $Ax + By +C=0$ 的距离为</p><p>$$\cfrac{|Ax_0 + By_0 + C|}{\sqrt{A^2+B^2}}$$</p><h3 id="1-4-直线系"><a href="#1-4-直线系" class="headerlink" title="1.4 直线系"></a>1.4 直线系</h3><ol><li>与直线 $Ax + By +C=0$ 平行的直线系方程为 $Ax + By + N=0$（$N$ 为参数，且 $N\ne C$） </li><li>与直线 $Ax + By +C=0$ 垂直的直线系方程为 $Bx - Ay + N=0$（$N$ 为参数） </li><li>过两相交直线 $A_1x + B_1y + C_1 = 0$ 与 $A_2x + B_2y + C_2 = 0$ 交点的直线系方程为 $A_1x + B_1y + C_1 + N(A_2x + B_2y + C_2) = 0$（$N$ 为参数） </li></ol><h3 id="1-5-直线的参数方程"><a href="#1-5-直线的参数方程" class="headerlink" title="1.5 直线的参数方程"></a>1.5 直线的参数方程</h3><article>$$\tag{$t$ 为参数} \begin{cases}x = x_0 + t\cos \alpha\\y = y_0 + t \sin \alpha\end{cases} $$</article><h2 id="2-圆"><a href="#2-圆" class="headerlink" title="2 圆"></a>2 圆</h2><h3 id="2-1-圆的方程"><a href="#2-1-圆的方程" class="headerlink" title="2.1 圆的方程"></a>2.1 圆的方程</h3><ol><li>标准方程：$(x-a)^2 + (y-b)^2 = r^2$，圆心坐标 $(a,b)$，半径为 $r$.</li><li>一般方程：$x^2 + y^2 + Dx + Ey + F =0;(D^2+E^2-4F &gt; 0))$</li></ol><h3 id="2-2-圆系"><a href="#2-2-圆系" class="headerlink" title="2.2 圆系"></a>2.2 圆系</h3><p>对于两个不同心的圆：$C_1: x^2 + y^2 + D_1x + E_1y + F_1 =0$ 与 $x^2 + y^2 + D_2x + E_2y + F_2 =0$，则方程 $C_1: x^2 + y^2 + D_1x + E_1y + F_1 + \lambda (x^2 + y^2 + D_2x + E_2y + F_2) =0$ 表示共轴圆系。当 $\lambda \ne -1$ 时，表示一个圆；当 $\lambda = -1$ 时，表示一条直线，叫做两圆的根轴。</p><h3 id="2-3-圆的切线"><a href="#2-3-圆的切线" class="headerlink" title="2.3 圆的切线"></a>2.3 圆的切线</h3><p>过圆 $(x-a)^2 + (y-b)^2 = r^2$ 上一点 $(x_0,y_0)$ 的切线方程为：</p><p>$$(x_0 - a)(x - a) + (y_0 - b)(y - b) = r^2$$</p><h3 id="2-4-圆的参数方程"><a href="#2-4-圆的参数方程" class="headerlink" title="2.4 圆的参数方程"></a>2.4 圆的参数方程</h3><article>$$\tag{$\theta$ 为参数}\begin{cases}x = x_0 + r\cos \theta\\y = y_0 + r \sin \theta\end{cases}$$</article><h2 id="3-圆锥曲线"><a href="#3-圆锥曲线" class="headerlink" title="3 圆锥曲线"></a>3 圆锥曲线</h2><h3 id="3-1-椭圆"><a href="#3-1-椭圆" class="headerlink" title="3.1 椭圆"></a>3.1 椭圆</h3><ol><li>椭圆的第一定义：平面内与两个定点 $F_1$ 与 $F_2$ 的距离之和等于常数（大于 $|F_1F_2|$）的点的轨迹叫做椭圆。这两个定点叫做椭圆的<strong>焦点</strong>，两焦点的距离叫做椭圆的<strong>焦距</strong>。</li><li>椭圆的第二定义：平面内与一个定点 $F$ 和定直线 $l$ 的距离比为常数 $e$ （$0&lt; e &lt;1$）的动点轨迹叫做椭圆。这两个定点叫做椭圆的<strong>焦点</strong>，两焦点的距离叫做椭圆的<strong>焦距</strong>。这条定直线叫做椭圆的<strong>准线</strong>。</li></ol><h3 id="3-2-椭圆的方程"><a href="#3-2-椭圆的方程" class="headerlink" title="3.2 椭圆的方程"></a>3.2 椭圆的方程</h3><p>标准方程：$\cfrac {x^2} {a^2} + \cfrac {y^2} {b^2} = 1 ;(a &gt; b &gt; 0)$，其中 $b^2 = a^2 - c^2$</p><ul><li>离心率：$e = \cfrac c a; (0&lt; e &lt; 1)$</li><li>准线方程：$x = \pm \cfrac {a^2} c$</li></ul><h3 id="3-3-椭圆的参数方程"><a href="#3-3-椭圆的参数方程" class="headerlink" title="3.3 椭圆的参数方程"></a>3.3 椭圆的参数方程</h3><p>椭圆 $\cfrac {x^2} {a^2} + \cfrac {y^2} {b^2} = 1 ;(a &gt; b &gt; 0)$ 的参数方程为：</p><article>$$\tag{$\varphi$ 为参数，$0 \le \varphi &lt; 2 \pi$}\begin{cases}x = a \cos \varphi\\y = b \sin \varphi\end{cases}$$</article><h3 id="3-4-双曲线"><a href="#3-4-双曲线" class="headerlink" title="3.4 双曲线"></a>3.4 双曲线</h3><ol><li>双曲线的第一定义：平面内与两个定点 $F_1$ 与 $F_2$ 的距离之差等于常数（小于 $|F_1F_2|$）的点的轨迹叫做双曲线。这两个定点叫做双曲线的<strong>焦点</strong>，两焦点的距离叫做双曲线的<strong>焦距</strong>。</li><li>双曲线的第二定义：平面内与一个定点 $F$ 和定直线 $l$ 的距离比为常数 $e$（$e &gt; 1$）的动点轨迹叫做椭圆。这两个定点叫做椭圆的<strong>焦点</strong>，两焦点的距离叫做双曲线的<strong>焦距</strong>。这条定直线叫做双曲线的<strong>准线</strong>。</li></ol><h3 id="3-5-双曲线的方程"><a href="#3-5-双曲线的方程" class="headerlink" title="3.5 双曲线的方程"></a>3.5 双曲线的方程</h3><p>标准方程：$\cfrac {x^2} {a^2} - \cfrac {y^2} {b^2} = 1 ;(a,b &gt; 0)$，其中 $b^2 = c^2 - a^2$</p><ul><li>离心率：$e = \cfrac c a; (e &gt; 1)$</li><li>准线方程：$x = \pm \cfrac {a^2} c$</li><li>渐进线方程：$y = \cfrac b a x$</li></ul><h3 id="3-6-等轴双曲线与共轭双曲线"><a href="#3-6-等轴双曲线与共轭双曲线" class="headerlink" title="3.6 等轴双曲线与共轭双曲线"></a>3.6 等轴双曲线与共轭双曲线</h3><p>方程 $x^2 - y^2 = \pm a^2; (a\ne 0)$ 表示的曲线叫做等轴双曲线；$\cfrac {x^2} {a^2} - \cfrac {y^2} {b^2} = 1$ 与 $\cfrac {y^2} {b^2} - \cfrac {x^2} {a^2} = 1$ 表示的双曲线为共轭双曲线。</p><h3 id="3-7-双曲线的参数方程"><a href="#3-7-双曲线的参数方程" class="headerlink" title="3.7 双曲线的参数方程"></a>3.7 双曲线的参数方程</h3><article>$$\tag{$\varphi$ 为参数，$0 \le \varphi &lt; 2 \pi$}\begin{cases}x = a \sec \varphi\\y = b \tan \varphi\end{cases}$$</article><h3 id="3-8-抛物线"><a href="#3-8-抛物线" class="headerlink" title="3.8 抛物线"></a>3.8 抛物线</h3><ol><li><p>抛物线的定义：平面内与一个定点 $F$ 和定直线 $l$ 的距离比为常数 $e$ （$e=1$）的动点轨迹叫做抛物线。这两个定点叫做抛物线的<strong>焦点</strong>，这条定直线叫做椭圆的<strong>准线</strong>。</p></li><li><p>抛物线的标准方程：$y^2 = 2px;(p&gt; 0)$，有</p><ul><li>焦点坐标：$F(\cfrac p 2, 0)$</li><li>准线方程：$x = - \cfrac p 2$</li></ul></li></ol><h3 id="3-9-双曲线的参数方程"><a href="#3-9-双曲线的参数方程" class="headerlink" title="3.9 双曲线的参数方程"></a>3.9 双曲线的参数方程</h3><p>双曲线 $\cfrac {x^2} {a^2} + \cfrac {y^2} {b^2} = 1 ;(a &gt; b &gt; 0)$ 的参数方程为：</p><article>$$\tag{$t$ 为参数，$t\in \mathbb{R}$}\begin{cases}x = 2pt^2\\y = 2pt\end{cases}$$</article><h2 id="圆锥曲线系"><a href="#圆锥曲线系" class="headerlink" title="圆锥曲线系"></a>圆锥曲线系</h2><ol><li>共焦点的圆锥曲线系方程：$\cfrac{x^2}{C^2 + t} + \cfrac{y^2} t = 1$.</li></ol><p>当 $t&gt; 0$ 时，表示椭圆系；<br>当 $-C^2 &lt; t &lt; 0$ 时，表示双曲线系；<br>当 $t &lt; -C^2$ 时，无轨迹。</p><ol start="2"><li>具有相同离心率的圆锥曲线系 $\cfrac{x^2}{a^2} \pm \cfrac{y^2}{b^2} = \lambda ; (\lambda \ne 0)$</li><li>共交点的二次曲线系：</li></ol><p>过 $f_1(x,y) = A_1x^2 + B_1xy + C_1y^2 + D_1x + E_1y +F_1 = 0$ 与 $f_2(x,y) = A_2x^2 + B_2xy + C_2y^2 + D_2x + E_2y +F_2 = 0$ 的四个交点的二次曲线系方程为：$f_1(x, y) + \lambda f_2(x, y)=0$，其中 $\lambda$ 为任意常数。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 圆锥曲线 </tag>
            
            <tag> 圆 </tag>
            
            <tag> 直线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角函数</title>
      <link href="/dao/post/zh-CN/0607abbe9750.html"/>
      <url>/dao/post/zh-CN/0607abbe9750.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本公式"><a href="#1-基本公式" class="headerlink" title="1 基本公式"></a>1 基本公式</h2><p>下面先介绍一些基本公式。</p><h3 id="1-1-诱导公式"><a href="#1-1-诱导公式" class="headerlink" title="1.1 诱导公式"></a>1.1 诱导公式</h3><p>可以把 7 组诱导公式归结为 $k\cdot \frac \pi 2 \pm \alpha$（$k\in \mathbb{Z}$）的三角函数，用“奇变偶不变，符号看象限”记忆和理解。即 $k$ 为奇数时的三角函数值等于 $\alpha$ 的异名（正弦与余弦互换，正切与余切互换）函数值，前面加上把 $\alpha$ 看成锐角时原函数值的符号；$k$ 为偶数时的三角函数值等于 $\alpha$ 的同名函数值，前面加上把 $\alpha$ 看成锐角时原函数值的符号。</p><h3 id="1-3-同角三角函数式的基本关系"><a href="#1-3-同角三角函数式的基本关系" class="headerlink" title="1.3 同角三角函数式的基本关系"></a>1.3 同角三角函数式的基本关系</h3><ol><li>倒数关系：$\sin{\alpha} \cdot \csc{\alpha}=1$，$\cos{\alpha} \cdot \sec{\alpha}=1$，$\tan{\alpha} \cdot \cot{\alpha}=1$.</li><li>商数关系：$\tan{\alpha} = \frac {\sin{\alpha}} {\cos{\alpha}}$.</li><li>平方关系：$\sin^2{\alpha} + \cos^2{\alpha} = 1$，$1 + \tan^2{\alpha} = \sec^2{\alpha}$，$1 + \cot^2{\alpha} = \csc^2{\alpha}$.</li></ol><h3 id="1-4-周期性"><a href="#1-4-周期性" class="headerlink" title="1.4 周期性"></a>1.4 周期性</h3><p>$y=A\sin(\omega x + \varphi)$ 与 $y=A\cos(\omega x + \varphi)$ 的最小正周期是 $T = \frac{2\pi}{|\omega|}$；</p><p>$y=A\tan(\omega x + \varphi)$ 与 $y=A\cot(\omega x + \varphi)$ 的最小正周期是 $T = \frac{\pi}{|\omega|}$.</p><h2 id="2-三角恒等式"><a href="#2-三角恒等式" class="headerlink" title="2 三角恒等式"></a>2 三角恒等式</h2><ol><li>$\sin{3\alpha} = 4\sin{\alpha} \sin(\frac{\pi} 3 - \alpha)  \sin(\frac{\pi} 3 + \alpha)$</li><li>$\cos{3\alpha} = 4\cos{\alpha} \cos(\frac{\pi} 3 - \alpha)  \cos(\frac{\pi} 3 + \alpha)$</li><li>$\tan{3\alpha} = 4\tan{\alpha} \tan(\frac{\pi} 3 - \alpha)  \tan(\frac{\pi} 3 + \alpha)$</li><li>$\tan{(\alpha + \beta + \gamma)} = \cfrac{\tan{\alpha}+ \tan{\beta} + \tan{\gamma} - \tan{\alpha} \tan{\beta} \tan{\gamma}}{1 - \tan{\alpha}\tan{\beta} - \tan{\beta}\tan{\gamma} - \tan{\gamma}\tan{\alpha}}$</li><li>$\sum_{k=0}^{n} \sin{(\alpha+ 2kd)} = \cfrac {\sin{((n+1)d)} \cdot \sin{(\alpha + nd)}} {\sin{d}}$</li><li>$\sum_{k=0}^{n} \cos{(\alpha+ 2kd)} = \cfrac {\sin{((n+1)d)} \cdot \cos{(\alpha + nd)}} {\sin{d}}$</li><li>$\arcsin(-x) = - \arcsin(x)$，$\arccos(-x) = \pi - \arccos(x)$，$x \in [-1,1]$</li><li>$\arctan(-x) = - \arctan(x)$，$arccot(-x) = \pi - arccot(x)$，$x \in \mathbb{R}$</li><li>$\arcsin{x} + \arccos{x} = \frac \pi 2$，$x\in [-1,1]$</li><li>$\arctan{x} + arccot{x} = \frac \pi 2$，$x\in \mathbb{R}$</li></ol><h2 id="3-三角形中的等式"><a href="#3-三角形中的等式" class="headerlink" title="3 三角形中的等式"></a>3 三角形中的等式</h2><p>$$\tan A + \tan B + \tan C = \tan A \cdot \tan B \cdot \tan C$$<br>$$\cot {A} \cot B + \cot B \cot C + \cot C \cot A = 1$$<br>$$\sin^2 A + \sin^2 B + \sin^2 C = 2(1+ \cos A \cos B \cos C)$$<br>$$\cos^2 A + \cos^2 B + \cos^2 C = 1 - 2 \cos A \cos B \cos C$$<br>$$\cfrac {\cot A + \cot B} {\tan A + \tan B} + \cfrac {\cot B + \cot C} {\tan B + \tan C} + \cfrac {\cot C + \cot A} {\tan C + \tan A} = 1$$</p><h2 id="4-三角形中的几个定理"><a href="#4-三角形中的几个定理" class="headerlink" title="4 三角形中的几个定理"></a>4 三角形中的几个定理</h2><p>设 $\triangle ABC$ 的边长为 $a, b, c$，所对的角为 $A, B, C$；$r, R$ 分别为其内切圆半径与外接圆半径，$p = \frac 1 2 (a + b+ c)$ 为半周长，$S$ 为其面积，则：</p><ol><li>正弦定理：</li></ol><p>$$\frac {a} {\sin{A}} = \frac {b} {\sin{B}} = \frac {c} {\sin{C}} = 2R$$</p><ol start="2"><li>余弦定理：</li></ol><p>$$a^2 = b^2 + c^2 - 2bc \cos A$$<br>$$b^2 = c^2 + a^2 - 2ca \cos B$$<br>$$c^2 = a^2 + b^2 - 2ab \cos C$$</p><ol start="3"><li>射影定理：</li></ol><p>$$a = b \cos C + c \cos B$$</p><p>$$b = c \cos A + a \cos C$$ </p><p>$$c = a \cos B + b \cos A$$</p><ol start="4"><li>欧拉（Euler）定理：</li></ol><p>$OI^2 = R^2 - 2Rr$，其中 $O, I$ 分别为 $\triangle ABC$ 的外心与内心。</p><ol start="5"><li>半角公式：</li></ol><p>$$\sin{\cfrac A 2} = \sqrt{\cfrac{(p-b)(p-c)}{bc}}$$<br>$$\cos{\cfrac A 2} = \sqrt{\cfrac{p(p-a)}{bc}}$$</p><ol start="6"><li>几个等式：</li></ol><p>$$\cfrac r R = 4 \sin{\cfrac A 2} \sin{\cfrac B 2} \sin{\cfrac C 2} = \cos A + \cos B + \cos C - 1$$</p><p>$$\cfrac {r_a} R =  4 \sin{\cfrac A 2} \cos{\cfrac B 2} \cos{\cfrac C 2}$$</p><p>其中 $r_a$ 为角 $\angle A$ 所对应的旁切圆半径。</p><ol start="7"><li>面积公式：</li></ol><p>$$S = \frac 1 2 ab \sin C = rp$$<br>$$S = \sqrt{p(p-a)(p-b)(p-c)} = 2R^2 \sin A \sin B \sin C$$</p><p>$$S = \cfrac {abc} {4R} = \frac 1 2 R^2 (\sin{2A} + \sin{2B}+ \sin{2C})$$</p><p>$$S = \cfrac{a^2 \sin B \sin C}{2 \sin(B+C)}$$</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三角函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学归纳法</title>
      <link href="/dao/post/zh-CN/5a29a75b9273.html"/>
      <url>/dao/post/zh-CN/5a29a75b9273.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-第一数学归纳法"><a href="#1-第一数学归纳法" class="headerlink" title="1. 第一数学归纳法"></a>1. 第一数学归纳法</h2><p>设 $P(n)$ 表示一个与自然数 $n$ 有关的命题，若</p><ol><li>$P(n_0)$（$n_0 \in \mathbb{N}$）成立；</li><li>假设 $P(k)$（$k\geq n_0$）成立，可推出 $P(k+1)$ 成立，</li></ol><p>则 $P(n)$ 对一切自然数 $n\ge n_0$，$n\in \mathbb{N}$ 都成立。</p><h2 id="2-第二数学归纳法"><a href="#2-第二数学归纳法" class="headerlink" title="2. 第二数学归纳法"></a>2. 第二数学归纳法</h2><p>设 $P(n)$ 表示一个与自然数 $n$ 有关的命题，若</p><ol><li>$P(n_0)$（$n_0 \in \mathbb{N}$）成立；</li><li>假设 $P(n)$ 在 $n_0 \le n \le k$ 时成立，可推出 $P(k+1)$ 成立，</li></ol><p>则 $P(n)$ 对一切自然数 $n\ge n_0$，$n\in \mathbb{N}$ 时都成立。</p><h2 id="3-逆向归纳法（亦称倒推归纳法或向前-向后归纳法）"><a href="#3-逆向归纳法（亦称倒推归纳法或向前-向后归纳法）" class="headerlink" title="3. 逆向归纳法（亦称倒推归纳法或向前-向后归纳法）"></a>3. 逆向归纳法（亦称倒推归纳法或向前-向后归纳法）</h2><ul><li>第 1 步：运用通常的归纳法证明命题 $P(n)$ 对自然数的某个子序列  ${n_k}$ 成立，即 $P(n_k)$ 成立（$n_k \to + \infty$）.</li><li>第 2 步：$P(n)$ 成立可以推出 $P(n-1)$ 成立，</li></ul><p>则对于一切自然数 $n$，$P(n)$ 成立.</p><p>例题1：设 $a_1, a_2, \cdots, a_n \in \mathbb{R}^+$，$A_n = \frac{1}{n} (a_1 + a_2 + \cdots + a_n)$，$G_n = \sqrt[^n]{(a_1a_2\cdots a_n)}$，求证：$A_n \geq G_n$ （等号成立当且仅当 $a_1=a_2=\cdots = a_n$ 时成立）。</p><p>【证明】先证对一切 $n = 2^m$（$m \in \mathbb{N}$），$A_n \geq G_n$ 成立，为此对 $m$ 使用归纳法。</p><p>当 $m=1$ 时，有：</p><p>$$A_2 = \frac{1}{2} (a_1 + a_2) = \frac{1}{2} (\sqrt{a_1} - \sqrt{a_2})^2 + \sqrt{a_1a_2} \geq \sqrt{a_1a_2} = G_2$$</p><p>等号当且仅当 $a_1 = a_2$ 时成立。即 $m=1$ 时，$A_{2^m} \geq G_{2^m}$ 成立。</p><p>假设当 $m=k \in \mathbb{N}$ 时，不等式成立，即 $A_{2^k} \geq G_{2^k}$。于是，当 $m = k+1$ 时有：</p><article>$$\begin{aligned}A_{2^{k+1}} &amp;= \frac{1}{2^{k+1}} (a_1 +a_2+\cdots + a_{2^{k+1}})\\&amp;= \frac{1}{2} \cdot \frac{1}{2^{k}}\left[(a_1 + \cdots + a_{2^k}) + (a_{2^k+1} + \cdots + a_{2^{k+1}})\right]\\&amp;\geq \frac 1 2 (\sqrt[2^k] {a_1\ldots a_{2^k}} + \sqrt[2^k] {a_{2^k+1}\ldots a_{2^{k+1}}})\\&amp;\geq \sqrt[2^{k+1}] {a_1\ldots a_{2^k}a_{2^k+1}\ldots a_{2^{k+1}}}= G_{2^{k+1}}\end{aligned}$$</article><p>$$</p><p>所以，对一切 $n=2^m$ ($m=1,2,\cdots$)，$A_{2^m} \geq G_{2^m}$ 成立。接着证明，如果对于任意的 $k \in \mathbb{N}$，$A_k \ge G_k$ 成立，那么 $A_{k-1} \ge G_{k-1}$ 也成立。</p><p>事实上，我们令 $a_k = \frac 1 {k-1} (a_1 + a_2 + \ldots + a_{k-1})$，则</p><article>$$\begin{aligned}A_{k-1} &amp;= a_k = \frac{(k-1)(a_k) + a_k}{k} \\&amp;= \frac 1 k (a_1 + a_2 + \ldots + a_k)\\&amp;\ge \sqrt[k]{a_1\ldots a_{k-1} \cdot a_k}\end{aligned}$$</article><p>故而 $A_{k-1}^k \ge (G_{k-1})^{k-1} A_{k-1}$，即 $A_{k-1} \ge G_{k-1}$ 成立。</p><p>由逆向归纳法知，命题成立。</p><h2 id="4-跳跃数学归纳法"><a href="#4-跳跃数学归纳法" class="headerlink" title="4 跳跃数学归纳法"></a>4 跳跃数学归纳法</h2><p>设 $P(n)$ 表示一个与自然数 $n$ 有关的命题，若</p><ol><li>$P(m)$（$1\le m \le t$）成立；</li><li>假设 $P(k)$ 成立，可推出 $P(k+t)$ 成立，</li></ol><p>则 $P(n)$ 对一切自然数 $n$ 都成立。</p><h2 id="5-螺旋归纳法"><a href="#5-螺旋归纳法" class="headerlink" title="5 螺旋归纳法"></a>5 螺旋归纳法</h2><p>设 $P(n)$  和 $Q(n)$ 是两串与自然数 $n$ 有关的命题，如果</p><p>(1) 命题 $P(1)$ 成立；<br>(2) 对于 $k \in \mathbb{N}$，若命题 $P(k)$ 成立，则命题 $Q(k)$ 成立，若命题 $Q(k)$ 成立，则命题 $P(k+1)$ 成立，</p><p>则对于所有自然数 $n$，命题 $P(n)$ 与 $Q(n)$ 都成立.</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学归纳法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代法求数列</title>
      <link href="/dao/post/zh-CN/bfab43ba9569.html"/>
      <url>/dao/post/zh-CN/bfab43ba9569.html</url>
      
        <content type="html"><![CDATA[<h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><p>设 $f(x): M \to M$. 记 </p><p>$$f^0(x) = x, f^1(x) = f(x), f^2(x) = f(f(x)), \cdots, f^{n+1}(x) = f(f^n(x))$$</p><p>其中的 $n$ 叫做 $f^n(x)$ 的迭代次数。</p><p>如果 $f(x)$ 有反函数，可以用 $f^{-1}(x)$ 表示。$f^n(x)$ 的反函数是 $f^{-n}(x)$.</p><p>一个十分有用的结论：</p><p>如果有一个可逆的函数 $\varphi$，取 $F(x) = \varphi^{-1} \circ f \circ \varphi(x)$，则有</p><p>$$F(F(x)) = \varphi^{-1} \circ f \circ \varphi \circ \varphi^{-1} \circ f \circ \varphi(x) = \varphi^{-1} \circ f^2 \circ \varphi(x)$$</p><p>更一般的 $F^n(x) = \varphi^{-1} \circ f^n \circ \varphi(x)$.</p><p>这样一来，便把 $F(x)$ 的 $n$ 次迭代问题转换为 $f(x)$ 的 $n$ 次迭代问题了。由于 $\varphi(x)$ 的取法千变万化，这就能够构造出一系列的函数的迭代问题与数列计算问题。</p><p>【例1】设 $F(x) = x + 2\sqrt{x} + 1$，计算 $F^n(x)$.</p><p>【解】$F(x) = (\sqrt{x} +1)^2$，取 $\varphi(x) = \sqrt{x}$，则 $\varphi^{-1}(x) = x^2, f(x) = x+1$，则 $F^n(x) = (\sqrt{x} + n)^2$.</p><p>【例2】设 $F(x) = \frac{x}{\sqrt{x^2 + c}}$，计算 $F^n(x)$.</p><p>【解】观察 $F(x)$ 形似 $f(x) = \frac{x}{x+c}$，故c^k而，我们可以设 $\varphi(x) = x^2$，有 $\varphi^{-1}(x) = \sqrt{x}$. 先求得</p><p>$$f^n(x) = \frac{x}{\sqrt{x^2\sum_{k=0}^{n-1} c^k + c^n}}$$</p><p>则 $F^n(x) = \frac{x}{\sqrt{x^2\sum_{k=0}^{n-1} c^k + c^n}}$.</p><p>【例3】有数列 ${a_n}$，满足 $a_0 = 2$，$a_{n+1} = \frac{a_n^2}{2a_n - 1}$ ($n\in \mathbb{N}$)，求 $a_n$ 的极限。</p><p>【解】令 $F(x) = \frac{x^2}{2x - 1}$，则命题转换为求 $F^n(x)$ 的极限。</p><p>$$F(x) = \frac{x^2}{x^2 - (x - 1)^2} = \frac 1 {1 - (1 - \frac 1 x)^2}$$</p><p>取 $\varphi(x) = 1 - \frac 1 x$，有 $\varphi^{-1}(x) = \frac 1 {1 - x}$，$f(x) = x^2$，于是</p><p>$$F^n(x) = \frac 1 {1 - (1 - \frac 1 x)^{2^n}}$$</p><p>最终</p><p>$$a_n = F^n(2) = \frac 1 {1 - 2^{-2n}}$$</p><p>因而 $\lim\limits_{n\to \infty} a_n = 1$.</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
            <tag> 迭代法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 之类型注解</title>
      <link href="/dao/post/zh-CN/f23f55bfddea.html"/>
      <url>/dao/post/zh-CN/f23f55bfddea.html</url>
      
        <content type="html"><![CDATA[<p>参考资料：<a href="https://docs.python.org/zh-cn/3.7/library/typing.html">typing — 类型标注支持</a> 与 <a href="https://docs.python.org/zh-cn/3.7/library/dataclasses.html">dataclasses — 数据类</a>。</p><h2 id="0-引言：定义一个线段"><a href="#0-引言：定义一个线段" class="headerlink" title="0 引言：定义一个线段"></a>0 引言：定义一个线段</h2><p>假设我们使用 Python 实现数学中的整点线段的概念，即 $L = [a,b]$, 且 $a,b \in Z$。使用 Python 可以这样写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LineSegment</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        整点线段        =======        start 和 end 均是整数        '''</span>        <span class="token keyword">assert</span> start <span class="token operator">&lt;=</span> end<span class="token punctuation">,</span> <span class="token string">"线段的方向错误"</span>        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start  <span class="token comment"># 线段的起点</span>        self<span class="token punctuation">.</span>end <span class="token operator">=</span> end  <span class="token comment"># 线段的终点</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        获取线段的长度        '''</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>end <span class="token operator">-</span> self<span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类 <code>LineSegment</code> 模拟了线段的形态与长度。但是，这样的写法是不是有点繁琐？为了更加人性化，Python 提供了 <code>typing</code> 模块，让我们可以对代码进行注解。</p><h2 id="1-typing-注解-Python"><a href="#1-typing-注解-Python" class="headerlink" title="1 typing 注解 Python"></a>1 typing 注解 Python</h2><p>如果想要声明函数参数和返回值的类型，您可以这样做：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这就是被称为 <code>function annotation</code> 的写法。使用冒号 <code>:</code> 加类型名来代表参数的类型，使用箭头 <code>-&gt;</code> 加类型表示返回值的类型。注解部分不会被 Python 解析器所解析。只是一种注解的方式，类似于：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    x: int    y: int    return int    '''</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<strong>由于 Python 是动态语言，所以注解是对函数参数和返回值的“注释”，没有强制定义的作用。</strong></p><p>比如，您像这样 <code>add(1.2, 3.0)</code> 传入参数，Python 解释器并不会报错。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"print 'add(1.2, 3.0)', result is"</span><span class="token punctuation">,</span> add<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果并没有报错：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">print <span class="token string">'add(1.2, 3.0)'</span><span class="token punctuation">,</span> result is <span class="token number">4.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1-使用-inspect-检查-python-对象的类型"><a href="#1-1-使用-inspect-检查-python-对象的类型" class="headerlink" title="1.1 使用 inspect 检查 python 对象的类型"></a>1.1 使用 <code>inspect</code> 检查 python 对象的类型</h3><p>如果您想要让 Python 对类型进行检查，可以借助模块 <code>inspect</code>。比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、类型检查</span><span class="token keyword">import</span> inspectinspect<span class="token punctuation">.</span>isfunction<span class="token punctuation">(</span>add<span class="token punctuation">)</span>  <span class="token comment"># 判断add是否是函数</span>inspect<span class="token punctuation">.</span>ismethod<span class="token punctuation">(</span>add<span class="token punctuation">)</span>  <span class="token comment"># 判断add是否是类的方法</span>inspect<span class="token punctuation">.</span>isgenerator<span class="token punctuation">(</span>add<span class="token punctuation">)</span>  <span class="token comment"># 判断add是否是生成器对象</span>inspect<span class="token punctuation">.</span>isclass<span class="token punctuation">(</span>add<span class="token punctuation">)</span>  <span class="token comment"># 判断add是否是类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果对函数的参数进行检查呢？这个需要借助 <code>sig=inspect.signature</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> inspect <span class="token keyword">import</span> signature<span class="token comment"># 获得函数的签名</span>sig <span class="token operator">=</span> signature<span class="token punctuation">(</span>add<span class="token punctuation">)</span>sig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token function">Signature</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> int<span class="token punctuation">,</span> y<span class="token operator">:</span> int <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> int<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着，可以直接获取函数的信息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">params <span class="token operator">=</span> sig<span class="token punctuation">.</span>parameters  <span class="token comment"># 获取函数的参数信息</span>params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">mappingproxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'x'</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Parameter <span class="token string">"x: int"</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Parameter <span class="token string">"y: int = 2"</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Parameter</code> 是 <code>inspect</code> 下的一个类，可以把它看做是一个有序字典，里面存放了函数的参数和参数类型，遍历 <code>params.values()</code> 的 annotation 属性会得到参数的注解类型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> v <span class="token keyword">in</span> params<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">'annotation is'</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>annotation<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">:</span> <span class="token builtin">int</span> annotation <span class="token keyword">is</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">&gt;</span>y<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">2</span> annotation <span class="token keyword">is</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可以这样定义类型检查函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> inspect <span class="token keyword">import</span> signature<span class="token keyword">def</span> <span class="token function">checkParameterType</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        sig <span class="token operator">=</span> signature<span class="token punctuation">(</span>fn<span class="token punctuation">)</span>        <span class="token comment"># 获取函数的参数信息</span>        params <span class="token operator">=</span> sig<span class="token punctuation">.</span>parameters        values <span class="token operator">=</span> params<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> p<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> v<span class="token punctuation">)</span>            <span class="token comment"># 判断传入参数的类型和参数注解类型是否相符</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> v<span class="token punctuation">.</span>annotation<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'TypeWrong'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> params<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>annotation<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'TypeWrong'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@checkParameterType</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-利用-python-对象的-annotations-属性检查类型"><a href="#1-2-利用-python-对象的-annotations-属性检查类型" class="headerlink" title="1.2 利用 python 对象的 __annotations__ 属性检查类型"></a>1.2 利用 python 对象的 <code>__annotations__</code> 属性检查类型</h3><p>下面以定义一个商品对象：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token keyword">def</span> <span class="token function">goods</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>    <span class="token keyword">return</span> goodsfish <span class="token operator">=</span> goods<span class="token punctuation">(</span><span class="token string">'fish'</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span>fish<span class="token punctuation">.</span>__annotations__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果是（<code>Any</code> 代表 Python 很难表达的形式或者类型）：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token operator">:</span> str<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token operator">:</span> float<span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token operator">:</span> typing<span class="token punctuation">.</span>Any<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看出，<code>__annotations__</code> 属性与 1.1 中的 <code>params.values()[k].annotations</code> 很相似。</p><p>这样，可以改写其类型检查函数为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">checkParameterType</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        annotations <span class="token operator">=</span> fn<span class="token punctuation">.</span>__annotations__        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>annotations<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> annotations<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'TypeWrong'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> annotations<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'TypeWrong'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-dataclass-提供强大的类型注解机制"><a href="#2-dataclass-提供强大的类型注解机制" class="headerlink" title="2 dataclass 提供强大的类型注解机制"></a>2 dataclass 提供强大的类型注解机制</h2><p><code>dataclass</code> 的定义位于 <a href="https://www.python.org/dev/peps/pep-0557/">PEP-557</a>，一个 dataclass 是指“一个带有默认值的可变的 <a href="https://docs.python.org/3/library/collections.html?highlight=namedtuple#collections.namedtuple">namedtuple</a>”，广义的定义就是有一个类，它的属性均可公开访问，可以带有默认值并能被修改，而且类中含有与这些属性相关的类方法，那么这个类就可以称为 <code>dataclass</code>，再通俗点讲，<code>dataclass</code> 就是一个含有数据及操作数据方法的容器。</p><p>我们先看看 <code>dataclass</code> 的参数：</p><table><thead><tr><th align="left">key</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>init</code></td><td align="left">指定是否自动生成<code>__init__</code>，如果已经有定义同名方法则忽略这个值，也就是指定为<code>True</code>也不会自动生成</td></tr><tr><td align="left"><code>repr</code></td><td align="left">同<code>init</code>，指定是否自动生成<code>__repr__</code>；自动生成的打印格式为<code>class_name(arrt1:value1, attr2:value2, ...)</code></td></tr><tr><td align="left"><code>eq</code></td><td align="left">同<code>init</code>，指定是否生成<code>__eq__</code>；自动生成的方法将按属性在类内定义时的顺序逐个比较，全部的值相同才会返回<code>True</code></td></tr><tr><td align="left"><code>order</code></td><td align="left">自动生成<code>__lt__</code>，<code>__le__</code>，<code>__gt__</code>，<code>__ge__</code>，比较方式与<code>eq</code>相同；如果<code>order</code>指定为<code>True</code>而<code>eq</code>指定为<code>False</code>，将引发<code>ValueError</code>；如果已经定义同名函数，将引发<code>TypeError</code></td></tr><tr><td align="left"><code>frozen</code></td><td align="left">设为<code>True</code>时对<code>field</code>赋值将会引发错误，对象将是不可变的，如果已经定义了<code>__setattr__</code>和<code>__delattr__</code>将会引发<code>TypeError</code></td></tr></tbody></table><p>参数 <code>unsafehash</code> 的使用比较复杂，当设置为<code>unsafehash=True</code>时将会根据类属性自动生成<code>__hash__</code>，然而这是不安全的，因为这些属性是默认可变的,这会导致<code>hash</code>的不一致，所以除非能保证对象属性不可随意改变，否则应该谨慎地设置该参数为<code>True</code>。对于 <code>unsafehash=False</code> 的情况将根据<code>eq</code>和<code>frozen</code>参数来生成<code>__hash__</code>，下面单独列出：</p><table><thead><tr><th align="left">参数设置</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>eq=True,frozen=True</code></td><td align="left"><code>__hash__</code>将会生成</td></tr><tr><td align="left"><code>eq=True,frozen=False</code></td><td align="left"><code>__hash__</code>将被设为<code>None</code></td></tr><tr><td align="left"><code>eq=False,frozen=True</code></td><td align="left"><code>__hash__</code>将使用超类（<code>object</code>）的同名属性（通常就是基于对象<code>id</code>的<code>hash</code>）</td></tr></tbody></table><p>注意：最好去掉了<code>__init__</code>方法，以确保 <code>dataclass</code> 装饰器可以添加它生成的对应方法。<br>如果要覆盖 <code>__init__</code>，我们将失去 <code>dataclass</code> 的优势，因此，如果要处理任何附加功能可以使用新的 dunder 方法：<code>__post_init__</code>，让我们看看<code>__post_init__</code>方法对于我们的包装类来说是什么样子的。</p><p>由于 Python 支持中文作为变量名、类名、函数名等，所以，我可以这样定义一个 Python 类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass<span class="token decorator annotation punctuation">@dataclass</span><span class="token keyword">class</span> 清单<span class="token punctuation">:</span>    名称<span class="token punctuation">:</span> <span class="token builtin">str</span>    单价<span class="token punctuation">:</span> <span class="token builtin">float</span>    数量<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__post_init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>花费成本 <span class="token operator">=</span> self<span class="token punctuation">.</span>单价 <span class="token operator">*</span> self<span class="token punctuation">.</span>数量书籍 <span class="token operator">=</span> 清单<span class="token punctuation">(</span><span class="token string">'书籍'</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>书籍<span class="token punctuation">}</span></span><span class="token string">，花费的成本</span><span class="token interpolation"><span class="token punctuation">{</span>书籍<span class="token punctuation">.</span>花费成本<span class="token punctuation">}</span></span><span class="token string">元'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">清单</span><span class="token punctuation">(</span>名称<span class="token operator">=</span><span class="token string">'书籍'</span><span class="token punctuation">,</span> 单价<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span> 数量<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>，花费的成本<span class="token number">70.0</span>元<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的代码模拟了出售商品的清单，整个代码看起来都很清爽。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typing </tag>
            
            <tag> dataclass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建属于自己的项目</title>
      <link href="/dao/post/zh-CN/5f351e8f5e4a.html"/>
      <url>/dao/post/zh-CN/5f351e8f5e4a.html</url>
      
        <content type="html"><![CDATA[<p>本章主要针对“如何构建一个属于自己的计算机视觉项目”为主题进行展开。</p><p>本章导航：</p><ul><li>在 GitHub 上创建个人项目</li><li>利用 Git 子模块组织子项目</li></ul><h2 id="1-创建个人项目"><a href="#1-创建个人项目" class="headerlink" title="1 创建个人项目"></a>1 创建个人项目</h2><p>由于构建个人或者公司的私有服务器涉及的知识点太多，本文考虑以 GitHub 作为远端服务器来构建个人项目。如果您的私有服务器已经搭建好了的话，直接把它当作 GitHub 进行操作即可。因而，本文介绍的创建项目的方法同样适用于私有服务器，区别不过是您提供的服务器的地址不同和仓库的使用权限不同而已。本节内容参考：<a href="https://opensource.guide/zh-cn/">https://opensource.guide/zh-cn/</a>。</p><h3 id="1-1-创建一个项目"><a href="#1-1-创建一个项目" class="headerlink" title="1.1 创建一个项目"></a>1.1 创建一个项目</h3><p>第 1 步：在 GitHub（<a href="https://github.com/">https://github.com/</a>）上创建一个仓库，取名为 <strong>cv-actions</strong>，接着选择一个 <strong>LICENSE</strong>（如 GNU GPL v3.0，相关介绍见：<a href="https://zhuanlan.zhihu.com/p/56759711">https://zhuanlan.zhihu.com/p/56759711</a>） 和 <strong>gitignore</strong>（选择 Python）。然后选择 <code>settings</code>：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/set.png" alt="图1 GitHub 的 settings"></p><p>往下滑动鼠标，找到 GitHub Pages，选择主题，随后便会生成一个网址：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/GithubPages.png" alt="图2 GitHub Pages"></p><p>接着，填写项目的简介：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/edit.png" alt="图 3 编写项目简介"></p><p>第 2 步：将远端的项目克隆到本地。首先，按照下图操作获取项目的远程仓库地址（<a href="https://github.com/xinetzone/cv-actions.git">https://github.com/xinetzone/cv-actions.git</a>）：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/clone.png" alt="图4 获取远程仓库地址"></p><p>第 3 步：在本地电脑端打开 vscode 并在终端输入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git clone https://github.com/xinetzone/cv-actions.git$ cd cv-actions/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样便在本地端拥有一个 cv-actions 的副本。</p><h3 id="1-2-修改-README"><a href="#1-2-修改-README" class="headerlink" title="1.2 修改 README"></a>1.2 修改 README</h3><p>对于一个项目来说，README（自述文档）是十分重要的。自述文件不仅仅是用于说明人们如何使用你的项目，还要解释你的项目为什么重要，以及它可以为你的用户做什么。在您的自述文件中，尝试回答以下问题：</p><ul><li>What：这个项目做什么？</li><li>Why：为什么这个项目有用？</li><li>How：如何开始？</li><li>Help：如果需要，我可以在哪里获得更多的帮助？</li><li>Who：谁维护和参与项目？</li></ul><p>参考<a href="https://github.com/PurpleBooth">@PurpleBooth</a> 的 <a href="https://gist.github.com/PurpleBooth/109311bb0361f32d87a2">README 模板</a> 编写自述文档 <a href="https://github.com/xinetzone/cv-actions/blob/master/README.md">README</a>（<a href="https://github.com/xinetzone/cv-actions/blob/master/README.md">https://github.com/xinetzone/cv-actions/blob/master/README.md</a>）。其中的图标可以参考 <a href="https://xinetzone.github.io/zh-CN/f7c6a6b8.html">github 编写 README 时如何获取 fork 等图标</a>（<a href="https://xinetzone.github.io/zh-CN/f7c6a6b8.html">https://xinetzone.github.io/zh-CN/f7c6a6b8.html</a>）进行设计。</p><p>接着创建一些目录，这些目录均代表不同的功能。在项目根目录打开终端并输入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mkdir data draft models outputs app notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>data/</code>: 数据的存放</li><li><code>models/</code>: 模型的参数存储</li><li><code>outputs/</code>: 模型的输出结果</li><li><code>app/</code>：存放相关的 API</li><li><code>notebook/</code>：存放 jupyter notebook 等相关的文件</li><li><code>draft/</code>：(可以放置在任何位置)存放一些不成熟的或者未开发完成的一些相关内容，不被上传到 github</li></ul><p>其中 <code>data/</code>，<code>models/</code>，<code>draft/</code> 加入到 <code>.gitignore</code> 不被 git 管理。</p><p>进入项目的 Insights 栏目，选择 Community，您可以看到图5 的结果：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/checklist.png" alt="图5 项目配置检查列表"></p><p>图5 列出了一个比较规范的项目需要满足的文件的清单。后续章节将逐渐填充检查清单。</p><h3 id="1-3-编写贡献者指南"><a href="#1-3-编写贡献者指南" class="headerlink" title="1.3 编写贡献者指南"></a>1.3 编写贡献者指南</h3><p>编写 <code>CONTRIBUTING.md</code>（贡献者指南） 文档有助于贡献者们快速了解如何加入本项目的贡献之中。下面介绍如何编写贡献者指南？</p><p>一般地，使用热情友好的语气并提供具体的贡献建议可以大大提高新人的参与度。比如，您可以在开头这样引入：</p><blockquote><p>首先，非常感谢您为 cv actions 提供新鲜血液。正是更多像您这样的人，使得 cv actions 将逐渐发展为一个强大的计算机视觉社区。</p></blockquote><h4 id="1-3-1-准备工作1：创建-Issue-与-PR-模板"><a href="#1-3-1-准备工作1：创建-Issue-与-PR-模板" class="headerlink" title="1.3.1 准备工作1：创建 Issue 与 PR 模板"></a>1.3.1 准备工作1：创建 Issue 与 PR 模板</h4><p>对于一个比较健全的社区，需要拥有一个优雅的 Issue templates（见图 5）。它可以令 Issue 的参与者有着一个统一而清晰的框架，同时，也方便其他人参与 Issue 的讨论之中。Issue templates 的创建可以直接从 GitHub 中需要选择一个模板，之后点击绿色按钮 <code>Propose changes</code> 提交修改即可：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/issue.png" alt="图6 添加 Issue templates"></p><p>当然，您也可以添加多个模板甚至自定义模板（具体细节见<a href="https://help.github.com/cn/articles/creating-a-pull-request-template-for-your-repository">https://help.github.com/cn/articles/creating-a-pull-request-template-for-your-repository</a>）。这些模板仅仅是一个雏形，还需要与后续的工作进行匹配。所以，刚开始先不用管这么多，先生成这些模板再说。如果需要创建有多个作者的<strong>提交</strong>，您可以参考 <a href="https://help.github.com/cn/articles/creating-a-commit-with-multiple-authors">https://help.github.com/cn/articles/creating-a-commit-with-multiple-authors</a>。</p><p>您还需要在 <code>/.github/</code> 下创建文档 <code>PULL_REQUEST_TEMPLATE.md</code> 用于 Pull request（拉取请求，PR）的生成。因为编写良好的 PR 说明可以加速审阅者了解代码的预期结果的进程。它们也是帮助跟踪并应对每次的 commit（如测试、添加单元测试和更新文档）应执行的工作的好方法。更多优秀模板参考：<a href="https://github.com/XNoteW/github-issue-templates">https://github.com/XNoteW/github-issue-templates</a>。下面以一个简单的例子来说明 PR 模板的样式：</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">非常感谢您参与到 cv actions 的项目中来，但为了创建一个良好的社区环境，在您提交 PR 之前，请您确保已经满足下列要求：<span class="token list punctuation">-</span> [ ] 您的 code 是否已经还存在错误或者警告信息<span class="token list punctuation">-</span> [ ] 您正在使用的术语（terminology）是否是社区约定的或者已经被公认的<span class="token list punctuation">-</span> [ ] 您是否已经做过单元测试（unit tests）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般地，一个相对优秀的 PR 应该包含如下问题：</p><ul><li>您做了什么改变？</li><li>您修复了什么问题？</li><li>你发起的是一个 bug 修复(bug fix) 还是创建了一个新的功能？对旧的版本是否有重大影响？对已经存在的函数或者模块是否进行重构？</li><li>您是如何验证它的？</li></ul><p>更多关于 PR 的细节可参考：<a href="https://github.com/embeddedartistry/templates/blob/master/oss_docs/PULL_REQUEST_TEMPLATE.md">https://github.com/embeddedartistry/templates/blob/master/oss_docs/PULL_REQUEST_TEMPLATE.md</a>。</p><h4 id="1-3-2-准备工作2：编写行为准则"><a href="#1-3-2-准备工作2：编写行为准则" class="headerlink" title="1.3.2 准备工作2：编写行为准则"></a>1.3.2 准备工作2：编写行为准则</h4><p>一个社区想要可持续地且健康地发展需要拥有一份约定的行为准则：<code>CODE_OF_CONDUCT.md</code>。顾名思义，<strong>行为准则</strong>即是参与社区时的一些礼仪、说话方式、行为等，它帮助社区形成一种友好的氛围，且在某种程度上它也是展示项目对于贡献者的友好程度。</p><p>当前已经不需要我们自己创建行为准则，在<a href="https://www.contributor-covenant.org/">贡献者公约</a>(<a href="https://www.contributor-covenant.org/">https://www.contributor-covenant.org/</a>)之中已经提供了一份行之有效的行为规范，已经被用在包括 Kubernetes，Rails，以及 Swift等<a href="https://www.contributor-covenant.org/adopters">超过 4000 个开源项目</a>(<a href="https://www.contributor-covenant.org/adopters">https://www.contributor-covenant.org/adopters</a>)之中。参考图5 点击 <code>Add</code> Code of conduct，便会弹出图7 的结果：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/CCC.png" alt="图7 添加行为准则"></p><p>选择贡献者公约（Contributor Covenant）并在右侧填写电子邮箱用于处理违反公约的行为和反馈。最后，提交修改即可。</p><h4 id="1-3-3-贡献指南编写细则"><a href="#1-3-3-贡献指南编写细则" class="headerlink" title="1.3.3 贡献指南编写细则"></a>1.3.3 贡献指南编写细则</h4><p>考虑到项目的可读性，需要设计一些贡献指南编写的细则。如果您想要获得更多有关编写贡献指南的方式，可以查阅 @nayafia 的 <a href="https://github.com/nayafia/contributing-template/blob/master/CONTRIBUTING-template.md">贡献指南模板</a> 或者 @mozilla 的 <a href="https://mozillascience.github.io/working-open-workshop/contributing/">“如何构建 CONTRIBUTION.md”</a>。下面给出 cv actions 的贡献指南：</p><pre class="line-numbers language-md" data-language="md"><code class="language-md"><span class="token title important"><span class="token punctuation">#</span> 贡献指南</span>非常感谢您乐意为 cv actions 提供新鲜血液。正是更多像您这样的人，使得 cv actions 将逐渐发展为一个强大的计算机视觉社区。为了创建一个良好的社区环境，请您遵守我们社区的《<span class="token url">[<span class="token content">行为准则</span>](<span class="token url">CODE_OF_CONDUCT.md</span>)</span>》。如果您想要发起一个 Bug report 或者 Feature request，请您遵循 Issue 的模板进行贡献。同时也欢迎您贡献新的且实用的 Issue 与 Pull request templates。请您仔细阅读这份指南，因为，如果您这样做了，既可以节省您的宝贵时间，同时也对其他贡献者或者审阅者们的极大的尊重。本项目的<span class="token bold"><span class="token punctuation">**</span><span class="token content">目标</span><span class="token punctuation">**</span></span>是<span class="token bold"><span class="token punctuation">**</span><span class="token content">打造一个健康且可持续发展的计算机视觉社区。</span><span class="token punctuation">**</span></span><span class="token title important"><span class="token punctuation">##</span> 贡献的类型</span>本项目不仅仅欢迎您贡献代码，同时也欢迎您贡献文档（请在 <span class="token code-snippet code keyword">`/docs/`</span> 中进行），教程或者本项目的使用手册等内容。<span class="token title important"><span class="token punctuation">##</span> 贡献的必要条件</span><span class="token list punctuation">1.</span> 如果您不了解如何对项目进贡献，请您参考 <span class="token url">[<span class="token content">如何为开源做贡献</span>](<span class="token url">https://opensource.guide/zh-cn/how-to-contribute/</span>)</span>。<span class="token list punctuation">2.</span> 为了方便项目的管理，请您使用 Git Flow 进行管理。当您将项目克隆到您的本地电脑后，请您运行：<span class="token code-snippet code keyword">`git flow init`</span> 并随之切换到 develop。具体是使用细节请 📖 &lt;https://xinetzone.github.io/projects/&gt;。<span class="token list punctuation">3.</span> 本项目暂定以 Python 作为代码的开发语言，而文档的编写请使用 Markdown 进行工作。<span class="token list punctuation">4.</span> 本项目在 GitHub 上维护的 master 分支作为预发布版本，而 develop 分支作为开发版本。其他功能版本请以 git flow 的规则进行管理。<span class="token list punctuation">5.</span> 您贡献的 Python 代码需要支持 pep8，数学公式最好使用 markdown 的标准语法，比如 <span class="token code-snippet code keyword">`$x^2=1$`</span>等。<span class="token title important"><span class="token punctuation">##</span> Issue 与 Pull request 的行为准则</span>考虑到可读性与可理解性，在您创建 Issue 或者 Pull request（简写为 PR） 时，请遵循如下约定：<span class="token list punctuation">1.</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">请给出您的 issue 或者 PR 的 context</span><span class="token punctuation">**</span></span>：即给出上下文语境。比如当您你运行程序时遇到一个错误，请解释你是如何操作的，并描述该错误现象是否具有再现性；当您提交一个新的idea，请您解释该 idea 您是如何想到的，并且说明您的 idea 的适用范围，是否可以将您的 idea 进行推广或者拓展。<span class="token list punctuation">2.</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">您是否已经完成准备工作</span><span class="token punctuation">**</span></span>：请确认您是否阅读了项目的 README、文档、问题（开放的和关闭的），检查您的 issue 或者 PR 是否已经有人做过或者正在做，避免提交重复的议题或者请求。<span class="token list punctuation">3.</span> 请您<span class="token bold"><span class="token punctuation">**</span><span class="token content">保持请求内容的短小而直接</span><span class="token punctuation">**</span></span>：每个人的时间和精力都是有限的，短小而直接的请求对大家都有益处。<span class="token list punctuation">4.</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">请保持您的优雅</span><span class="token punctuation">**</span></span>：本社区禁止发布不良信息，注意用语文明而优雅，杜绝各种辱骂和打口水仗的行为。<span class="token title important"><span class="token punctuation">##</span> 获得联系</span><span class="token list punctuation">-</span> 您可以在 Gitter @<span class="token url">[<span class="token content">cv-actions</span>](<span class="token url">https://gitter.im/cv-actions/community</span>)</span> 上讨论 Issue<span class="token list punctuation">-</span> 如果有疑问，请您 ✉️ xinzone@outlook.com<span class="token title important"><span class="token punctuation">##</span> TODOS</span><span class="token list punctuation">-</span> [ ] 利用 <span class="token url">[<span class="token content">pre-commit</span>](<span class="token url">https://pre-commit.com/</span>)</span> 自动部署代码的格式，使其自动化支持 pep8 等格式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们便在 GitHub 上完成了项目的构建工作。</p><h2 id="2-使用-git-submodule-管理子项目"><a href="#2-使用-git-submodule-管理子项目" class="headerlink" title="2 使用 git submodule 管理子项目"></a>2 使用 git submodule 管理子项目</h2><p>参考资料：<a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a>。</p><p>情景：在您正在维护的项目（可记为 A）中存在一些子项目或者第三方库（可记为 B）。您不想在 A 中直接维护 B，希望 B 作为一个单独的项目进行管理，这种情况下便需要借助 Git 子模块工具了。Git 子模块工具将 B 作为 A 的一个子目录进行管理，使用 <code>git submodule</code> 来实现。下面以一个例子来说明如何使用子模块的。</p><h3 id="2-1-开始使用子模块"><a href="#2-1-开始使用子模块" class="headerlink" title="2.1 开始使用子模块"></a>2.1 开始使用子模块</h3><ul><li>前提：在 Github 上单独创建一个独立的项目<a href="https://xinetzone.github.io/image/">xinetzone/image</a>(<a href="https://xinetzone.github.io/image/">https://xinetzone.github.io/image/</a>)，该项目是一个数字图像处理的工具包。</li><li>目标：在 <a href="https://xinetzone.github.io/cv-actions/">cv-actions</a> 项目中添加子项目 <a href="https://xinetzone.github.io/image/">image</a>。</li></ul><p>第 1 步：克隆 <a href="https://xinetzone.github.io/cv-actions/">cv-actions</a> 到个人电脑。即在终端输入：<code>git clone https://github.com/xinetzone/image.git</code>。<br>第 2 步：git flow 初始化，即在终端输入如下命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cd cv-actions$ git flow init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第 3 步：使用 git flow 创建并切换到新的分支 <code>feature/image</code>，即在命令行输入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git flow feature start image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第 4 步：使用 <code>git submodule</code> 添加子项目 cv-actions 到目录 <code>app/</code> 之下，即在命令行输入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cd app/$ git submodule add https://github.com/xinetzone/image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 <code>https://github.com/xinetzone/image</code> 是子项目 image 的网址。</p><p>此时，如果您运行 <code>git status</code> 查看项目 cv-actions 的状态，便看到：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/submodule.png" alt="图8 git 克隆子模块后的状态"></p><p>从图8 可以看到此时在 <code>app/</code> 下新增目录 <code>image</code>，且在根目录新增文件 <code>.gitmodules</code>。</p><p>其中 <code>.gitmodules</code> 文件记录了配置文件保存的项目 image 的 URL 与已经拉取的本地目录之间的映射：</p><pre class="line-numbers language-.gitmodules" data-language=".gitmodules"><code class="language-.gitmodules">[submodule "app/image"]  path = app/image  url = https://github.com/xinetzone/image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果您有多个子模块需要被管理，<code>.gitmodules</code> 文件中就会有多条记录。虽然 <code>image/</code> 是 cv-actions 的工作目录的一个子目录，但是，git 并不会将其视作普通文件进行管理，而是将其作为一个整体当作子模块中的某个具体的提交进行管理。</p><p>第 5 步：提交更改。为了让子模块 image 加入到 git 的历史（commit）之中，您需要将其提交：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cd .. # 回到根目录$ git commit -am '添加子模块 image'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 <code>-am</code> 是 <code>-a -m</code> 的组合。</p><p>第 6 步：推送项目到远端分支 feature/image。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git push origin feature/image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-克隆含有子模块的项目"><a href="#2-2-克隆含有子模块的项目" class="headerlink" title="2.2 克隆含有子模块的项目"></a>2.2 克隆含有子模块的项目</h3><p>克隆含有子模块的项目一般有两种方法：</p><ul><li>方法1：<code>git clone URL</code></li><li>方法2：<code>git clone --recursive URL</code></li></ul><p>下面先讨论如何使用方法1 克隆含有子模块的项目，首先使用语法 <code>git clone -b 分支名 URL</code> 克隆项目的指定分支。在终端运行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git clone -b feature/image https://github.com/xinetzone/cv-actions$ cd cv-actions/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时，您进入 <code>app/image</code> 会发现其是一个空目录，这是因为含有子模块的项目需要进行初始化。初始化需要两步，具体操作是在 <code>app/image</code> 下面运行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git submodule init$ git submodule update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 <code>git submodule init</code> 用于初始化本地配置，而 <code>git submodule update</code> 用于从项目 image 中抓取所有数据并检出（checked out）父项目中列出的合适的提交。使用 <code>git status</code> 查看当前状态：</p><p><img src="/dao/post/zh-CN/5f351e8f5e4a/9.png" alt="图9 查看 git submodule update 后的状态"></p><p>从图9 可以看出，此时 image 与其上游 <code>origin/feature/image</code> 已经同步了。</p><p>对于方法2，仅仅运行如下命令即可达到上述的同样效果：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git clone --recursive -b feature/image https://github.com/xinetzone/cv-actions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-使用子模块"><a href="#2-3-使用子模块" class="headerlink" title="2.3 使用子模块"></a>2.3 使用子模块</h3><p>如果子模块的上游有的新的提交（commit），您想要获取更新，有两种方法：</p><ol><li>直接进入子模块所在目录 <code>app/image</code> 通过运行 <code>git fetch</code> 与 <code>git merge</code>，合并上游分支来更新本地代码。</li><li>直接运行 <code>git submodule update --remote image</code> 获取上游分支来更新本地代码。</li></ol><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3 小结"></a>3 小结</h2><p>本文主要讨论了如何利用 Git 与 Github 创建属于自己的项目，同时也介绍了如何利用 <code>git submodule</code> 在大项目中管理小项目。</p><h2 id="notebook"><a href="#notebook" class="headerlink" title="notebook"></a>notebook</h2><p>笔记本</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉入门必备工具</title>
      <link href="/dao/post/zh-CN/669debb4e6fd.html"/>
      <url>/dao/post/zh-CN/669debb4e6fd.html</url>
      
        <content type="html"><![CDATA[<p>随着 GPU 和大量优质数据的出现，深度学习技术在计算机视觉任务中扮演着越来越重要的角色。深度学习技术的端到端的模式大大简化了特征工程的工作量，为提取更加有效的特征提供了一个泛化性更强的工具。故而，学习深度学习技术是计算机视觉任务的不二之选。</p><p>一般地，学习深度学习技术需要具备以下能力：</p><ul><li>编程语言：当前，大多数深度学习框架均以 Python 为主流编程语言。您可以阅读 Python 官方教程：<a href="https://docs.python.org/zh-cn/3/">中文 Python</a>。</li><li>版本控制：一个深度学习项目不是一天建成，需要不断的调试和修复，因而学习<strong>版本控制</strong>是十分重要的任务。本文仅仅介绍 Git。</li><li>解读和使用优质的 GitHub 资源：如果所有的项目都从零开始构建是完全没有必要的，将项目建立在优秀的 GitHub 项目的基础上，继续开发，将会为您节省大量的时间和经历。本文将详细介绍如何使用 GitHub 资源。</li></ul><h2 id="1-Git-基础"><a href="#1-Git-基础" class="headerlink" title="1 Git 基础"></a>1 Git 基础</h2><p><img src="/dao/post/zh-CN/669debb4e6fd/git-pretty.png" alt="git 速查表"></p><p>Git 学习资源：</p><ul><li><a href="https://git-scm.com/book/zh/v2">Git 基础：Pro Git</a></li><li><a href="https://git-scm.com/doc/ext">Git 进阶</a></li><li>PDF 版命令手册：<a href="https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf">github-git-cheat-sheet.pdf</a></li><li>Git 完整命令手册地址：<a href="http://git-scm.com/docs">http://git-scm.com/docs</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解 Git</a></li></ul><p>所谓的<strong>版本控制</strong>，就是用来记录文件内容的变动，方便未来查询和恢复文件的内容修订的一种系统。版本控制的工具有很多，但是，我比较倾向于 Git。因为 Git 是<strong>分布式的</strong>，即使服务器上的版本库坏掉了，您也可以从其他非服务器的电脑上进行版本更新。</p><blockquote><p>并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。—— 《Git Pro》</p></blockquote><p>您完全不用担心把文件玩坏，因为版本控制已经帮你准备好了时光机器，借由版本控制您可以追溯文件的前世、今生以及未来，文件的时间轴完全由您掌控，甚至于，您可以借助 Git 的<strong>分支</strong>跳跃不同的“平行宇宙”。</p><p>Git 数据库中保存的信息都是以<strong>文件内容的哈希值</strong>来索引，而不是文件名。Git 有三种状态：已提交（committed）、已修改（modified）和已暂存（staged）。</p><ul><li><strong>已提交</strong>表示数据已经安全的保存在本地<strong>Git 仓库目录</strong>（即 <code>.git</code> 目录，<em>是 Git 用来保存项目的元数据和对象数据库的地方。 供其它计算机克拷贝的数据。</em>）中。</li><li><strong>已修改</strong>表示修改了文件，但还没保存到<strong>Git 仓库目录</strong>中。</li><li><strong>已暂存</strong>表示在<strong>工作目录</strong>（即您磁盘上存储的你看到的数据）对一个已修改文件的当前版本做了标记（即记录在 <code>.git/index</code> 中，一般地，将其称为<strong>暂存区域</strong>），使之包含在下次提交的快照中。</li></ul><h3 id="1-1-配置用户信息"><a href="#1-1-配置用户信息" class="headerlink" title="1.1 配置用户信息"></a>1.1 配置用户信息</h3><p>一般情况下，安装好 Git 之后需要您配置用户信息，用于记录提交者的信息。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git config --global user.name 用户名$ git config --global user.email 邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置好了用户信息，之后您便可以使用 Git 了。如果您不知道某一个命令如何使用，您可以使用 <code>git help</code> 来获取帮助，比如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git help config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您便轻松的获取 <code>git config</code> 的离线帮助文档。</p><h3 id="1-2-创建并操作一个本地仓库"><a href="#1-2-创建并操作一个本地仓库" class="headerlink" title="1.2 创建并操作一个本地仓库"></a>1.2 创建并操作一个本地仓库</h3><p>创建一个本地仓库，只需要您在工作目录下使用命令 <code>git init</code> 即可。此命令会在工作目录的根目录下创建 <code>.git</code> 目录，即本地的 Git 仓库。但是，此时，您的 Git 本地仓库是空的，我们需要将工作目录中的文件加入 Git 的跟踪：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/init.png" alt="git init"></p><p>命令 <code>git add .</code> 将工作目录的所有文件由未跟踪状态转换为跟踪状态，并存储在暂存区（注意，这里说“存储”并不准确，应该说是将文件的内容的指针放入 <code>.git/index</code> 中进行存储），以备下次提交。如果您仅仅只需要跟踪 <code>A.md</code>，那么您可以这样：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git add A.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vscode（一个十分强大的编辑器） 可以显示追踪的状态：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/add.png" alt="git add"></p><p>为了查看文件存储的状态，您可以使用 <code>git staus -s</code>：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/modify.png" alt="git status"></p><p><code>git status</code> 仅仅可以看出文件级别的（与暂存区的）不同状态，而如果您想要获悉文件的内容之间的不同，可以使用 <code>git diff</code> 获取工作目录中当前文件和暂存区域快照之间的差异：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/diff.png" alt="git diff"></p><p><code>git diff</code> 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动，若要查看已暂存的将要添加到下次提交里的内容，可以用 <code>git diff --staged</code> 命令；命令 <code>git diff --check</code> 可以用来检测可能存在由空白符引起的问题；Git 的 <code>...</code> 语法：<code>git diff A...B</code> 用于查找分支 A 同 A 与 B 的共同跟节点的不同，可看图理解：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/diffAB.png" alt="git diff A...B"></p><p>您总会有一些文件不希望被 Git 追踪（比如一些机密文件），此时您可以创建文件 <code>.gitignore</code> 并将那些不希望被追踪的文件名称写入到 <code>.gitignore</code> 中（在 <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a> 中提供了一些 <code>.gitignore</code> 模板可供参考）。文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li>所有空行或者以 <code>#</code> 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>以（<code>/</code>）开头防止递归。</li><li>以（<code>/</code>）结尾指定目录。</li><li>惊叹号（<code>!</code>）取反要忽略指定模式以外的文件或目录。</li></ul><p>当您通过 <code>git status</code> 查看文件的状态为均已经暂存时，您便可以使用 <code>git commit -m "提交的信息"</code> 命令将所有通过 git add 暂存的文件内容在数据库中创建一个持久的快照，然后将当前分支上的分支指针（即 HEAD）移到其之上。提交时记录的是放在暂存区域的快照，并以 SHA-1 校验码进行标识方便之后的版本转换。更多命令可以由下图解读：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">(History)</span> <span class="token arrow operator">--</span>git reset <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">files</span><span class="token arrow operator">--&gt;</span></span> B<span class="token text string">(Staged)</span>B <span class="token arrow operator">--</span>git checkout <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">files</span><span class="token arrow operator">--&gt;</span></span> C<span class="token text string">(Working Directory)</span>B <span class="token arrow operator">--</span>git commit -m <span class="token arrow operator">--&gt;</span> AC <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">git add files</span><span class="token arrow operator">--&gt;</span></span> BC <span class="token arrow operator">--</span>git commit -a -m <span class="token arrow operator">--&gt;</span> AA <span class="token arrow operator">--</span>git checkout HEAD <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">files</span><span class="token arrow operator">--&gt;</span></span> C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您已经做了多次提交，那么 Git 会将您的提交的顺序进行记录，通过 <code>git log</code> 命令可以查看您的提交历史。（更多关于 <code>git log</code> 的用法请参阅 <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">https://git-scm.com/book/zh/v2/Git-基础-查看提交历史</a>）。而您的每次提交均被 Git 以 SHA-1 码记录，这样一来，您便可以依据其将工作目录恢复到某个过去的时间节点。假如，您已经回到工作目录过去的某个时间节点，而您又想回到未来（相对于当前时间节点），那么，您可以借助 <code>git reflog</code> 来查找“未来”的时间节点，然后使用 <code>git checkout ID</code> 进行穿梭（ID 指的是 SHA-1 码）。工作目录的时间节点的状态是由 HEAD 进行指示的，故而，您也可以使用 <code>git reset --hard commit_id</code> 不断的切换 HEAD 达到穿梭时间的效果。</p><p>有时候您提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行 <code>git commit -a -m</code> 提交命令尝试重新提交（其中 <code>-a</code> 表示 <code>--amend</code>）。</p><h3 id="1-3-远程仓库"><a href="#1-3-远程仓库" class="headerlink" title="1.3 远程仓库"></a>1.3 远程仓库</h3><p>上一节您已经了解了然后创建一个本地仓库，并对该本地仓库进行管理。本节我们探讨<strong>远程仓库</strong>（远程仓库是指托管在服务器或其他网络中的你的项目的版本库）。因为该仓库仅仅作为合作媒介，不需要从磁盘检查快照，所以一个远程仓库通常只是一个<strong>裸仓库</strong>（bare repository，一个没有当前工作目录的仓库，即工程目录内的 <code>.git</code> 目录）。</p><p>创建一个裸仓库，只需要：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git clone --bare my_project my_project.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令实现了将 <code>my_project/.git</code> 复制到 <code>my_project.git</code> 目录中的作用，而 <code>my_project.git</code> 便是一个裸仓库。为了让裸仓库发挥分布式的作用，需要将其放到服务器上并设置你的协议。其他拥有服务器的访问或读写权限的电脑将可以通过如下方式进行复刻：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git clone user@git.example.com:/opt/git/my_project.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中， <code>user@git.example.com</code> 代表服务器的地址，而 <code>/opt/git/my_project.git</code> 代表服务器上裸仓库所在路径。本文不展开说明如何构建服务器，如果您想要了解构建服务器的详细信息，可以查看：<a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git">服务器上的 Git - 在服务器上搭建 Git</a>（<a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git">https://git-scm.com/book/zh/v2/服务器上的-Git-在服务器上搭建-Git</a>） 或者 GitBlit（<a href="http://gitblit.com/">http://gitblit.com/</a>）。本文将使用目前最大的 Git 托管平台——GitHub 这一 Git 服务器（详细内容见 <a href="https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE">https://git-scm.com/book/zh/v2/GitHub-账户的创建和配置</a>）。</p><p>假如从 GitHub 上搜寻到一个不错的仓库，您想要将其加入到自己的项目中去，您可以这样做：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/fork.png" alt="fork"></p><p>点击右边的 <code>fork</code> 按钮，然后，选择您的用户名或者组织，将其复刻下来。这样，您便有了对该仓库的读写以及<strong>推送</strong>（将本地仓库同步到远端仓库）的权限。使用 <code>git clone</code> 的命令将远端仓库克隆到本地，克隆的网址可以这样获取：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/clone.png" alt="git clone"></p><p>当您克隆到本地后，可以使用 <code>git remote -v</code> 命令查看远程仓库使用的 Git 保存的简写与其对应的 URL，比如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">origin  https://github.com/xinetzone/xinet-matery.git (fetch)origin  https://github.com/xinetzone/xinet-matery.git (push)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 <code>origin</code> 便是别名。如果您想要拥有多个远程仓库，可以运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写。</p><p>为了方便说明我们创建两个本地仓库 <code>server/D.git</code> 与 <code>server/R.git</code>，然后在目录 <code>T</code> 中添加这两个仓库：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/remote.png" alt="git remote add"></p><p>从上图可以看出，目录 <code>T</code> 下有两个远程仓库，它们的别名分别为：<code>D</code> 与 <code>R</code>。现在您可以在命令行中使用字符串 <code>D</code> 来代替整个 URL。 例如，如果你想拉取 <code>D</code> 所指代的仓库,可以运行 <code>git fetch D</code>，这个命令会访问远程仓库，从中拉取所有你还没有的数据。执行完成后，你将会拥有那个远程仓库中所有分支的引用，接着，您运行 <code>git merge D/master</code> 命令便可以将 <code>D</code> 合并到当前目录。</p><p>如果你使用 <code>git clone</code> 命令克隆了一个仓库，该命令会自动将其添加为远程仓库并默认以 “origin” 为简写。</p><p>如果您在当前工作目录下做了修改，并且，想要将其分享，只需要执行 <code>git push [remote-name] [branch-name]</code> 命令即可。比如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git push D master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您想查看远程仓库的更多详细信息，可以运行 <code>git remote show [remote-name]</code>；如果您想要重命名引用的名称可以运行 <code>git remote rename</code>；如果您想要删除远程仓库可以运行 <code>git remote rm</code> 或者 <code>git push origin --delete branch_name</code>。</p><h3 id="1-4-标签"><a href="#1-4-标签" class="headerlink" title="1.4 标签"></a>1.4 标签</h3><p>在切换不同的时间节点时，可以借助 commit 的 ID，但是，此 ID 有点反人类，太长了并且不好记忆。为了人们可以更好的管理历史节点，我们需要给那些重要的历史节点打上标签，这样一来，人们通过这些有实际语义的标签进行管理将更加方便。</p><p>Git 主要使用两种类型的标签：轻量标签（lightweight）与附注标签（annotated）。</p><h4 id="1-4-1-附注标签"><a href="#1-4-1-附注标签" class="headerlink" title="1.4.1 附注标签"></a>1.4.1 附注标签</h4><p>附注标签的创建可以这样：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git tag -a v1.4 -m "我的版本 1.4"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用 <code>git tag</code> 或者 <code>git tag -l 'v1.4.1*'</code> 列出当前的标签。或者使用 <code>git show v1.4</code> 命令查看标签信息与其对应的提交信息。</p><h4 id="1-4-2-轻量标签"><a href="#1-4-2-轻量标签" class="headerlink" title="1.4.2 轻量标签"></a>1.4.2 轻量标签</h4><p>轻量标签不需要提供 commit 信息，只需要：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git tag v1.4-1q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您亦可以对历史提交的某个 commit ID 进行打标，比如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git tag -a v1.1 ead28ed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-3-管理标签"><a href="#1-4-3-管理标签" class="headerlink" title="1.4.3 管理标签"></a>1.4.3 管理标签</h4><p>您可以使用命令 <code>git push origin [tagname]</code> 将标签推送到远端；如果想要一次推送多个标签，可以是使用 <code>git push origin --tags</code>。</p><p>当然，您也可以使用命令 <code>git tag -d &lt;tagname&gt;</code> 删除标签。如果也要将远端的标签删除，可以使用命令 <code>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code>，比如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git push origin :refs/tags/v1.4-1q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-分支"><a href="#1-5-分支" class="headerlink" title="1.5 分支"></a>1.5 分支</h3><p><strong>分支</strong> 可以想象为不同维度的平行宇宙，在同一个时间节点可以并行的存在不同的支线来发展项目的不同功能。专业点的说法：Git 的分支仅仅是指向提交对象的可变指针，（Git 的默认分支名称为 master）每次进行 <code>git commit</code> 操作，都将会移动该指针。分支就好比河流拥有的支流，只不过在这些支流上面存在着无法移动的“指针”（git tag）与可以移动的“指针”（git branch）。</p><p>分支的创建需要使用 <code>git branch</code>，比如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git branch develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以移动？那么我们该如何判断工作目录所处的状态呢？（简单点说，我们该如何判断我们 “now” 的位置。）这个很简单，Git 中还有一个特殊的指针 <code>HEAD</code>，它总是指向当前所在的分支所在的时间节点。您可以使用 <code>git log --oneline --decorate</code> 命令查看各个分支的指针。</p><p>您若要在不同的分支之间进行跳转，可以使用 <code>git checkout [分支名]</code> 进行切换。有没有命令将创建分支与切换分支进行合并的呢？当然有了，它就是：<code>git branch -b &lt;分支名&gt;</code>。</p><p>关于分支的命令还有：</p><ul><li>合并：<code>git merge branch_name</code></li><li>删除：<code>git branch -d branch_name</code></li></ul><h3 id="1-6-vscode-与-Git-集成"><a href="#1-6-vscode-与-Git-集成" class="headerlink" title="1.6 vscode 与 Git 集成"></a>1.6 vscode 与 Git 集成</h3><p>为了让 Git 更好的与 vscode 集成，提供更丰富的 commit 信息，您可以这样：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git config --global core.editor "code --wait"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 vscode 作为 Git 的内核编辑器。</p><h2 id="2-使用-Git-管理项目"><a href="#2-使用-Git-管理项目" class="headerlink" title="2 使用 Git 管理项目"></a>2 使用 Git 管理项目</h2><p>前面介绍了 Git 的基础知识，本文剩余部分将介绍如何利用 Git 更好的管理您的项目。</p><h3 id="2-1-对-Microsoft-Office-进行版本控制"><a href="#2-1-对-Microsoft-Office-进行版本控制" class="headerlink" title="2.1 对 Microsoft Office 进行版本控制"></a>2.1 对 Microsoft Office 进行版本控制</h3><p>最新版的 Git，已经支持对 <code>.docx</code> 的控制。下面我们简单做个小测验：</p><ol><li>创建文件 <code>A.docx</code>，并写入内容：<code>这是一个测试！</code>，之后纳入 Git 管理：</li></ol><p><img src="/dao/post/zh-CN/669debb4e6fd/A.png" alt="一个测试"></p><p>接着我们修改 <code>A.docx</code> 中的内容为 <code>这是一个被修改的测试哦！</code>：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/mod_docx.png" alt="一个被修改的 word"></p><p>从上图可以看出修改的内容与之前的（对 <code>.docx</code> 进行）比较。如果您还不满足，想要使用 Git 比较 <code>.xlsx</code> 文件的话，您可以参考：<a href="http://programmaticallyspeaking.com/git-diffing-excel-files.html">http://programmaticallyspeaking.com/git-diffing-excel-files.html</a>。</p><p>对于使用命令行，大多数人都是有点抵触的，好在有需求就有市场，在 Windows 系统下使用 Git，我们可以借助一个十分强大的 GUI 软件：TortoiseGit。</p><p>首先，我们需要下载并安装 TortoiseGit。下载网址：<a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a>，我们选择 64 位进行下载，并且需要下载中文语言包：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/install_tortoisegit.png" alt="TortoiseGit 下载"></p><p>下载好之后，按照提示默认安装即可，但是，安装中文包的最后一步需要按下图选择打勾：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/S.png" alt="安装 TortoiseGit 中文包"></p><p>关于 TortoiseGit 的使用细节可参考其手册：<a href="https://tortoisegit.org/docs/">https://tortoisegit.org/docs/</a>。其实，TortoiseGit 被集成在了右键快捷键中：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/TortoiseGit.png" alt="TortoiseGit 集成于右键"></p><p>从上图可以清晰的看到 Git 的大部分功能都被集成到了右键快捷键中。使用 TortoiseGit 比较差异将比较简单：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/SS.png" alt="TortoiseGit 比较 docx"></p><p>接着，将打开 Word，界面如下：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/SSS.png" alt="TortoiseGit 比较 docx 界面"></p><p>这样的界面将会更加直观！</p><p>TortoiseGit 的强大不仅仅如此，它还可以直接比较 <code>.xlsx</code>、<code>.pptx</code> 等。换句话说，TortoiseGit 与 Microsoft office 完美的结合在了一起，为您的 office 管理提供了一个十分高大上的 Git 支持。</p><h3 id="2-2-TortoiseGit-的使用"><a href="#2-2-TortoiseGit-的使用" class="headerlink" title="2.2 TortoiseGit 的使用"></a>2.2 TortoiseGit 的使用</h3><p>下面我们演示如何使用 TortoiseGit 操作项目？首先，从服务端（如局域网架设的 Git 服务器，GitHub 等）获取远程项目的地址：<code>ssh://lxw@192.168.42.30:29418/test.git</code>（此地址是我通过 GitBlit 架设的服务器创建的一个空的裸库）。其中， <code>lxw</code> 表示远程裸库的用户名：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/Tortoiseclone.png" alt="TortoiseGit clone"></p><p>需要输入 <code>lxw</code> 对应的密码：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/mima.png" alt="TortoiseGit clone 密码"></p><p>因为是刚刚克隆（<code>git clone</code>）的仓库，其中的暂存区与工作目录均是干净的，所以，目录图标上会有蓝色的对勾：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/test.png" alt="test"></p><p>下面使用 vscode 打开工作目录 <code>test</code> 并创建一个 git bash 终端。该项目已经存在自述文档（<code>README.md</code>）与 <code>.gitignore</code>（令 Git 忽视的文件列表）。为了更好的展示 TortoiseGit 与的集成效果，下面我们将演示如何利用 TortoiseGit 管理 <code>.docx</code> 文档。</p><p>我们先创建 <code>A.docx</code> 并写入内容：我是 A。由于 <code>A.docx</code> 没有加入到 Git 管理，所以其图标为空：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/AA.png" alt="A"></p><p>接着，将 <code>A.docx</code> 纳入 Git 管理：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/git_add.png" alt="右键添加"></p><p>接着弹出一个窗口，列出所有未被加入到 Git 管理的文件（即 <code>git add</code> 操作）：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/add1.png" alt="列出未被 Git 追踪的文档"><br><img src="/dao/post/zh-CN/669debb4e6fd/add2.png" alt="追踪文档"></p><p>自此，完成了将 <code>A.docx</code> 纳入 Git 的 <code>index</code> （即暂存区）的操作，刷新目录，可以看到 <code>A.docx</code> 多了一个蓝色的 $+$ 图标：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/plus.png" alt="完成 git add"></p><p>至此，如果您没有其他需要加入到暂存区的文档，您可以将这些暂存区的信息提交（<code>git commit</code>）到本地仓库，并写上简要的说明：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/master.png" alt="提交到本地 master"></p><p><img src="/dao/post/zh-CN/669debb4e6fd/commit.png" alt="写上简要的说明"></p><p>如果您还想要与其他人共享编写 <code>A.docx</code>，您需要将其推送（<code>git push</code>）到远端服务器：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/push.png" alt="git push"></p><p>其他人只需要在他们克隆的副本进行拉取（<code>git pull</code>）便可获得您的更新：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/pull.png" alt="git pull"></p><p>如果某人 K 拉取之后对 <code>A.docx</code> 进行了修改，添加内容：</p><pre class="line-numbers language-doc" data-language="doc"><code class="language-doc">做了 test1。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而您自己也做了修改，添加内容：</p><pre class="line-numbers language-doc" data-language="doc"><code class="language-doc">学习了 M。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后，您先将变动推送到了远端。紧接着 K 也将其做的改动推送到远端，由于您们所做的改动有冲突，所以推送失败：</p><p><img src="/dao/post/zh-CN/669debb4e6fd/push_error.png" alt="存在冲突"></p><p>解决冲突的办法有两种：</p><ol><li>创建新的分支（<code>git branch</code>）与发生冲突的分支分开，解决冲突交给管理员（负责管理整个项目的人）；</li><li>先将远端的更新获取（<code>git fetch</code>）下来（见下图），之后再解决冲突。</li></ol><p><img src="/dao/post/zh-CN/669debb4e6fd/fetch.png" alt="git fetch"></p><p>更多的关于 TortoiseGit 的使用可以参考其官方文档 <a href="https://tortoisegit.org/docs/">https://tortoisegit.org/docs/</a>，本文便不再引申。</p><p>更多精彩内容可(⓿_⓿)<a href="https://www.jianshu.com/p/9e466c839a46">第 1 章 可爱的 git 勾搭上高富帅 vscode</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 编写 README 时如何获取 fork 等图标</title>
      <link href="/dao/post/zh-CN/c5633157d0cb.html"/>
      <url>/dao/post/zh-CN/c5633157d0cb.html</url>
      
        <content type="html"><![CDATA[<p>一般比较正式的开源项目会在 <code>README.md</code> 的开头添加类似如下图标：</p><p align="center"> <a href="https://xinetzone.github.io/dao" target="_blank" rel="noopener noreferrer"><img width="100" src="https://xinetzone.github.io/dao/favicon.png" alt="Blog logo"></a></p><p align="left"><a href="https://www.gnu.org/licenses/"><img src="https://img.shields.io/github/license/xinetzone/xinetzone.github.io.svg" alt="License"></a><a href="http://hits.dwyl.io/xinetzone/xinetzonegithubio"><img src="http://hits.dwyl.io/xinetzone/xinetzonegithubio.svg" alt="HitCount"></a><a href="https://github.com/xinetzone/xinetzone.github.io/network"><img src="https://img.shields.io/github/forks/xinetzone/xinetzone.github.io.svg" alt="GitHub forks"></a> <a href="https://github.com/xinetzone/xinetzone.github.io/stargazers"><img src="https://img.shields.io/github/stars/xinetzone/xinetzone.github.io.svg" alt="GitHub stars"></a></p><p>那么该如何生成上面的图标效果呢？首先，我们可以借由 <a href="http://hits.dwyl.io/">http://hits.dwyl.io/</a> 网站来获取 <code>hits</code> 数：</p><p><img src="/dao/post/zh-CN/c5633157d0cb/hits.png" alt="hits"></p><p>只需要修改</p><pre class="line-numbers language-none"><code class="language-none">[![HitCount](http://hits.dwyl.io/xinetzone/xinetzonegithubio.svg)](http://hits.dwyl.io/xinetzone/xinetzonegithubio)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href="http://hits.dwyl.io/xinetzone/xinetzonegithubio"&gt;&lt;img src="http://hits.dwyl.io/xinetzone/xinetzonegithubio.svg" alt="HitCount"&gt;&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>licenses</code> 可以这样写：</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href="https://www.gnu.org/licenses/"&gt;&lt;img src="https://img.shields.io/github/license/xinetzone/xinetzone.github.io.svg" alt="License"&gt;&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样 fork 与 star 可以这样写：</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href="https://github.com/xinetzone/xinetzone.github.io/network"&gt;&lt;img src="https://img.shields.io/github/forks/xinetzone/xinetzone.github.io.svg" alt="GitHub forks"&gt;&lt;/a&gt; &lt;a href="https://github.com/xinetzone/xinetzone.github.io/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/xinetzone/xinetzone.github.io.svg" alt="GitHub stars"&gt;&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过这里例子，大家应该看出规律了：针对 <code>fork</code>、<code>star</code> 只需要将 <code>xinetzone</code> 替换为个人 github 账户即可。而 <code>licenses</code> 只需要修改 <code>href</code> 为对应的 <code>licenses</code> 类型即可。</p><p>那最开头的图片如何得到？代码很简单：</p><pre class="line-numbers language-none"><code class="language-none">&lt;p align="center"&gt;&lt;a href="https://xinetzone.github.io" target="_blank" rel="noopener noreferrer"&gt;&lt;img width="100" src="https://xinetzone.github.io/favicon.png" alt="Blog logo"&gt;&lt;/a&gt;&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>href</code> 替换为 GitHub Pages 创建的博客 host。</p><p>最终，完整的代码为：</p><pre class="line-numbers language-none"><code class="language-none">&lt;p align="center"&gt;&lt;a href="https://xinetzone.github.io" target="_blank" rel="noopener noreferrer"&gt;&lt;img width="100" src="https://xinetzone.github.io/favicon.png" alt="Blog logo"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align="center"&gt;&lt;a href="https://www.gnu.org/licenses/"&gt;&lt;img src="https://img.shields.io/github/license/xinetzone/xinetzone.github.io.svg" alt="License"&gt;&lt;/a&gt;&lt;a href="http://hits.dwyl.io/xinetzone/xinetzonegithubio"&gt;&lt;img src="http://hits.dwyl.io/xinetzone/xinetzonegithubio.svg" alt="HitCount"&gt;&lt;/a&gt;&lt;a href="https://github.com/xinetzone/xinetzone.github.io/network"&gt;&lt;img src="https://img.shields.io/github/forks/xinetzone/xinetzone.github.io.svg" alt="GitHub forks"&gt;&lt;/a&gt; &lt;a href="https://github.com/xinetzone/xinetzone.github.io/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/xinetzone/xinetzone.github.io.svg" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> README </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开箱即用搭建 Matery 主题博客</title>
      <link href="/dao/post/zh-CN/d31489d4303c.html"/>
      <url>/dao/post/zh-CN/d31489d4303c.html</url>
      
        <content type="html"><![CDATA[<h2 id="从零开始搭建-Hexo-博客"><a href="#从零开始搭建-Hexo-博客" class="headerlink" title="从零开始搭建 Hexo 博客"></a>从零开始搭建 Hexo 博客</h2><ol><li>参考 <a href="https://hexo.io/zh-cn/docs/">Hexo 安装</a> 添加 Hexo，接着初始化项目，且命名为 <code>book</code>：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ hexo init book<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装一键部署工具 <a href="https://github.com/xinetzone/hexo-deployer-git.git">hexo-deployer-git</a>：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cd book$ npm install https://github.com/xinetzone/hexo-deployer-git.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>修改网站配置 <code>book/_config.yml</code>，以匹配所需。</p></li><li><p>生成静态网页，并部署到 GitHub Pages：</p></li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ hexo clean &amp;&amp; hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样便完成了 Hexo 博客的搭建。hexo 默认的主题你可能不太满足，下面介绍一个开箱即用的基于 Matery 的 Hexo 博客模板。</p><h2 id="直接使用-notebook-作为你的博客模板"><a href="#直接使用-notebook-作为你的博客模板" class="headerlink" title="直接使用 notebook 作为你的博客模板"></a>直接使用 <code>notebook</code> 作为你的博客模板</h2><ol><li>进入 <a href="https://github.com/xinetzone/notebook">xinetzone/notebook</a>（修改自 <a href="https://github.com/blinkfox/hexo-theme-matery">blinkfox/hexo-theme-matery</a>） 选择按钮 <code>Use this template</code> 即可直接使用。</li><li>当然，仍需要修改 <code>book/_config.yml</code> 和 <code>book/_config.matery</code>，以匹配所需。</li><li>将此仓库克隆到本地，进入 <code>book/themes</code>，添加所需要的主题插件（你也可以替换为其他主题插件）：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git clone https://github.com/xinetzone/matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>这样便可以开箱即用。</li><li>修改 <code>book/themes/matery/layout/_partial/social-link.ejs</code> 可以添加新的联系方式。</li></ol><h2 id="修改网站的内容与插件"><a href="#修改网站的内容与插件" class="headerlink" title="修改网站的内容与插件"></a>修改网站的内容与插件</h2><p>以下内容参考：<a href="https://godweiyang.com/2018/04/13/hexo-blog/">https://godweiyang.com/2018/04/13/hexo-blog/</a></p><h3 id="添加-404-页面"><a href="#添加-404-页面" class="headerlink" title="添加 404 页面"></a>添加 404 页面</h3><p>首先在 <code>/book/source/</code> 目录下新建一个 <code>404.md</code>，内容如下，当然也可以添加新的内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: 404date: 2019-09-02 13:13:10type: "404"layout: "404"description: "你来到了没有知识的荒原 :("---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="“关于”页面增加简历（可选）"><a href="#“关于”页面增加简历（可选）" class="headerlink" title="“关于”页面增加简历（可选）"></a>“关于”页面增加简历（可选）</h3><p>修改 <code>/book/themes/matery/layout/about.ejs</code>，找到 <code>&lt;div class="card"&gt;</code> 标签，然后找到它对应的 <code>&lt;/div&gt;</code> 标签，接在后面新增一个 card，语句如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content article-card-content"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-address-book"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'myCV'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"articleContent"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就会多出一张 card，然后可以在 <code>/book/source/about/index.md</code> 下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个 card。</p><h3 id="添加动漫人物"><a href="#添加动漫人物" class="headerlink" title="添加动漫人物"></a>添加动漫人物</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ npm install --save hexo-helper-live2d$ npm install live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 <code>/book/_config.yml</code> 最后添加：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">live2d:  enable: true # 默认为 false  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  log: false  model:    use: live2d-widget-model-shizuku  display:    position: left    width: 200    height: 400  mobile:    show: true # 默认 false  react:    opacity: 0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h3><p>为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。</p><p>首先新建一个 <code>/book/watermark.py</code>，代码如下：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token string">u'@godweiyang'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input&gt;'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行 <code>python watermark.py  postname</code> 添加水印，如果第一次运行要给所有文章添加水印，可以运行 <code>python3 watermark.py all</code>。</p><h3 id="修复代码块行号不显示的-bug"><a href="#修复代码块行号不显示的-bug" class="headerlink" title="修复代码块行号不显示的 bug"></a>修复代码块行号不显示的 bug</h3><p>修改 <code>/book/themes/matery/source/css/matery.css</code> 第 95 行左右的 <code>pre</code> 和 <code>code</code> 两段改为如下代码：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre</span> <span class="token punctuation">{</span>    <span class="token comment">/* padding: 3.3rem !important; */</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1.5rem 1.5rem 1.5rem 3.3rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem 0 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #272822<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">code</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1px 5px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Inconsolata<span class="token punctuation">,</span> Monaco<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> <span class="token string">'Courier New'</span><span class="token punctuation">,</span> Courier<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>    <span class="token comment">/* font-size: 0.91rem; */</span>    <span class="token property">color</span><span class="token punctuation">:</span> #e96900<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f8f8f8<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即 注释掉 <code>code</code> 的 <code>font-size: 0.91rem</code>，修改 <code>pre</code> 的 <code>padding</code>。然后在 <code>/book/_config.yml</code> 中设置 <code>prism_plugin.line_number</code> 为 <code>true</code>。</p><h2 id="上传主题到-GitHub"><a href="#上传主题到-GitHub" class="headerlink" title="上传主题到 GitHub"></a>上传主题到 GitHub</h2><p>上面的一系列操作已经配置了一个可以使用的网站了，为了更加便利的使用主题，我们需要将其备份到 GitHub：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cd .. # 切换回主项目的根目录$ git add .$ git commit -m "创建一个hexo demo"$ git push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后还需要将 origin/hexo 设置为 Github 默认仓库。</p><p>最终的效果展示可以 <span class="github-emoji"><span>📖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://xinetzone.github.io/dao">https://xinetzone.github.io/dao</a>。</p><h2 id="部署到-GitHub-时图片显示问题"><a href="#部署到-GitHub-时图片显示问题" class="headerlink" title="部署到 GitHub 时图片显示问题"></a>部署到 GitHub 时图片显示问题</h2><p>一般情况，hexo3 对于图片的显示可能会出现问题，解决方法是卸载 <code>hexo-render-marked-lazy</code>。如果还有问题，那么可能是链接出现问题，解决策略是将默认是链接方式改为永久性链接，<span class="github-emoji"><span>📖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://hexo.io/zh-cn/book/permalinks.html">永久链接（Permalinks）</a> 以及 <a href="https://post.zz173.com/detail/hexo-abbrlink-2.0.4.html">abbrlink更新2.0.4说明</a>。<code>/book/_config.yml</code> 要做两处修改：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">permalink: :lang/:abbrlink.html # :lang/:title/（多语言） 或者 :year/:month/:day/:title/abbrlink:  alg: crc32  # 算法：crc16(default) and crc32  rep: hex    # 进制：dec(default) and hexpermalink_defaults:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Writingnew_post_name: :lang/:title.md # File name of new posts，支持多语言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改首页页脚显示"><a href="#修改首页页脚显示" class="headerlink" title="修改首页页脚显示"></a>修改首页页脚显示</h2><p>下面是我修改的部分代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>footer <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-footer bg-color"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container row center-align"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s12 m8 l8 copy-right"</span><span class="token operator">&gt;</span>            本站由<span class="token operator">&amp;</span>copy<span class="token punctuation">;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://xinetzone.github.io/"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">&gt;</span>xinetzone<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>基于            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://blinkfox.github.io/"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">&gt;</span>闪烁之狐<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span> 的            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://github.com/blinkfox/hexo-theme-matery"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">&gt;</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>matery<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>主题搭建<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s12 m8 l8"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>wordCount<span class="token punctuation">.</span>enable <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>wordCount<span class="token punctuation">.</span>totalCount<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>                <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-area-chart"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>站点总字数<span class="token operator">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>                <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"white-color"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token function">totalcount</span><span class="token punctuation">(</span>site<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"sitetime"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">let</span> socialClass <span class="token operator">=</span> <span class="token string">''</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">%</span> socialClass <span class="token operator">=</span> <span class="token string">'social-statis'</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>totalTraffic<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-heart-o"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>                    本站总访问量 <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_pv"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"white-color"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>totalNumberOfvisitors<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_uv"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-users"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>                    次<span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>访客数 <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_uv"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"white-color"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> 人<span class="token punctuation">.</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s12 m4 l4 social-link &lt;%- socialClass %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/social-link'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">&gt;</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的布局方式，可以参考：<a href="http://www.materializecss.cn/grid.html">materializecss: 网格</a>。</p><h2 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h2><p>对于 Github 只需要修改其对应文件的 <code>/book/../thems/layout/_partial/social-link.ejs</code> 为：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>github<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://github.com/&lt;%= theme.socialLink.github %&gt;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以添加领英：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>Linkedin<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://www.linkedin.com/in/&lt;%= theme.socialLink.Linkedin %&gt;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"领英联系我: &lt;%= theme.socialLink.Linkedin %&gt;"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-linkedin"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h2><p>首先为了新建文章方便，建议将 <code>/book/scaffolds/post.md</code> 修改为如下代码：</p><pre class="line-numbers language-none"><code class="language-none">---title: {{ title }}date: {{ date }}top: false # 推荐文章（文章是否置顶）cover: false # 表示该文章是否需要加入到首页轮播封面中password:toc: truemathjax: falsecomments: truesummary: # 文章摘要tags: # 文章标签，一篇文章可以多个标签categories: # 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类------版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样新建文章后不用你自己补充了，修改信息就行。</p><h2 id="部署的项目主页添加-README"><a href="#部署的项目主页添加-README" class="headerlink" title="部署的项目主页添加 README"></a>部署的项目主页添加 <code>README</code></h2><p>在部署的项目到 Github 上建立自己的博客仓库的时候并没有生成 README 文件，为此，我们需要在 <code>/book/source</code>下手动新建 <code>README.md</code>。然后再在这个新建文件中写 <code>README</code> 即可。再之后 <code>hexo g</code> 会把它复制到 <code>/book/public</code> 文件夹，而不会被解析成 html 文件，发布在博客中。</p><h2 id="创建新的页面"><a href="#创建新的页面" class="headerlink" title="创建新的页面"></a>创建新的页面</h2><p>首先运行如下命令，生成 <span class="github-emoji"><span>📖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 页面：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ hexo new page board<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统会自动给你在 <code>/book/source</code> 文件夹下创建一个 <code>book</code> 文件夹，以及 <code>book</code> 文件夹中的 <code>index.md</code>，这样你访问的 <code>book</code> 对应的链接就是 <code>http://xxx.xxx/book</code>。</p><p>然后在主题配置文件的 <code>menu</code> 菜单栏添加一个 <code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和 <code>menu</code> 中默认的保持整齐。然后在 <code>languages</code> 文件夹中，找到 <code>zh-CN.yml</code>，在 <code>index</code> 中添加 <code>yourdiy: '中文意思'</code> 就可以显示中文了。</p><p>比如在 <code>zh-CN.yml</code> 中添加：<code>book: 书籍</code>，在 <code>menu</code> 菜单栏中添加：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">书籍:    url: /book    icon: fa-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果您觉得麻烦，可以直接 fork 我已经配置好的博客模板 <a href="https://github.com/xinetzone/xinetzone.github.io">xinetzone-matery</a> 并按照 README 进行操作即可。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages 搭建属于自己的博客</title>
      <link href="/dao/post/zh-CN/0cb0813c59a9.html"/>
      <url>/dao/post/zh-CN/0cb0813c59a9.html</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-1/">超详细Hexo+Github博客搭建小白教程</a></p><p>Hexo 是高效的静态站点生成框架，它基于 <code>Node.js</code>。通过 Hexo，你可以直接使用 Markdown 语法来撰写博客。本文搭建的环境是 Windows10。</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>首先下载稳定版 Node.js：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>。<br>安装选项全部默认，一路点击 <code>Next</code>。</p><p>在 Windows PowerShell 中输入：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ node -v$ npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果没有报错，便说明安装成功。</p><h2 id="安装-Git-与-vscode"><a href="#安装-Git-与-vscode" class="headerlink" title="安装 Git 与 vscode"></a>安装 Git 与 vscode</h2><p>为了把本地的网页文件上传到 github 上面去，我们需要用到分布式版本控制工具：Git<a href="https://git-scm.com/download/win">下载地址</a>。安装选项还是全部默认，只不过最后一步添加路径时选择 <code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开 git 了。安装完成后在命令提示符中输入 <code>git --version</code> 验证是否安装成功。</p><p><a href="https://code.visualstudio.com/">vscode</a> 的安装便比较简单，直接按照提示安装即可。</p><h2 id="创建-GitHub-Pages"><a href="#创建-GitHub-Pages" class="headerlink" title="创建 GitHub Pages"></a>创建 GitHub Pages</h2><p>在你的 GitHub 主页打开如下界面：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-aa71be3d8b914371.png" alt="创建 repo"></p><p>然后如下图所示，输入自己的项目名字，后面一定要加 <code>.github.io</code> 后缀，<code>README</code>初始化也要勾上。名称一定要和你的github名字完全一样，比如你 <code>github</code> 名字叫<code>abc</code>，那么仓库名字一定要是 <code>abc.github.io</code>。</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-f796295247fb7aba.png"></p><p>然后项目就建成了，点击 <code>Settings</code>，向下拉到最后有个 <code>GitHub Pages</code>，点击 <code>Choose a theme</code> 选择一个主题。将 <code>GitHub Pages</code> 生成的网址复制到如下位置：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-ae9a9d173799c870.png"></p><p>点击网址 <a href="https://xinetzone.github.io/">https://xinetzone.github.io/</a>，便会显示：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-93636579128421e5.png"></p><p>此页面的内容是由 <a href="https://github.com/xinetzone">xinetzone</a>/<strong><a href="https://github.com/xinetzone/xinetzone.github.io">xinetzone.github.io</a></strong> 根目录的 <code>README.md</code> 提供的。</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-97cfccb76ec79543.png"></p><p>使用 vscode 打开本地的一个文件夹：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-2126a847e377b804.png"></p><p>选择 Git Bash 作为默认：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-f0f238bc6f947912.png"></p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-a3e18c31da2eeb5a.png"></p><p>为了提高 npm 运行速度需要添加淘宝源：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ npm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行如下命令安装 hexo：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ npm i hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入 <code>hexo -v</code> 验证是否安装成功。将你在 GitHub 上的 reop 克隆至本地，并切换到 hexo 分支（用于存放网站的源代码）：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git clone https://github.com/xinetzone/xinetzone.github.io.git$ cd xinetzone.github.io/$ git checkout hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个目录用于存储博客文件，切换目录并初始化网站：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ mkdir docs$ cd docs/$ hexo init$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>hexo init</code> 为网站初始化环境，<code>npm install</code> 安装必备的组件，我们可以看到 <code>blog</code> 目录下生成如下目录：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-f1260417e24c3632.png"></p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面，运行 <code>hexo g</code> 便会生成，而 <code>hexo clean</code> 便会删除</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题</li><li><code>_config.yml</code>: 博客的配置文件</li></ul><p>这样本地的网站配置也弄好啦，输入 <code>hexo g</code> 生成静态网页，然后输入 <code>hexo s</code> （hexo serve）打开本地服务器：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-77606c3fdfd2f043.png"></p><p>这样便可以在 <code>http://localhost:4000</code> 预览网站了：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-3de8c569ca663fec.png"></p><p>使用 <code>Ctrl + C</code> 可以把服务关掉。</p><h2 id="将-hexo-与-github-关联起来"><a href="#将-hexo-与-github-关联起来" class="headerlink" title="将 hexo 与 github 关联起来"></a>将 hexo 与 github 关联起来</h2><p>首先输入如下命令，配置 Git 的环境：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git config --global user.name  xinetzone$ git config --global user.email xinzone@outlook.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户名和邮箱根据你注册 github 的信息自行修改。然后生成密钥 SSH key：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ ssh-keygen -t rsa -C "xinzone@outlook.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 <code>id_rsa.pub</code>：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cat ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开你自己的 github，在头像下面点击 <code>settings</code>，再点击 <code>SSH and GPG keys</code>，新建一个SSH，名字随便，然后将 <code>id_rsa.pub</code> 复制粘贴到指定位置。在 git bash中，查看是否成功：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开博客根目录下的 <code>_config.yml</code> 文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>将 hexo 部署到 GitHub 修改最后一行的配置：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">deploy:  type: git  repository: https://github.com/xinetzone/xinetzone.github.io.git  branch: master <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中  <code>repository</code> 可以通过如下方法获取：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-890059e5643e50f7.png"></p><p><code>repository</code> 修改为你自己的 github 项目地址。接着需要先安装 <code>deploy-git</code>，也就是部署的命令，这样你才能用命令部署到 GitHub。接着 <code>hexo clean</code> 清除了你之前生成的东西，也可以不加。 <code>hexo g</code> 顾名思义，生成静态文章是 <code>hexo generate</code> 的缩写 <code>hexo deploy</code> 部署文章，可以用 <code>hexo d</code> 缩写：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ npm install hexo-deployer-git --save$ hexo clean | hexo g | hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时打开你的 github.io（<a href="https://xinetzone.github.io/">https://xinetzone.github.io/</a>） 主页就能看到发布的文章：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/1114626-761726a5770eea11.png"></p><p>为了添加博客，需要：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ hexo new post "博客名"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开 <code>blog\source\_posts</code> 的目录，可以发现下面多了一个文件夹和一个 <code>.md</code> 文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>将本地的 <code>hexo</code> 分支推送到远程：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git add .$ git commit -m "hexo init"$ git push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="自定义博客的个人信息"><a href="#自定义博客的个人信息" class="headerlink" title="自定义博客的个人信息"></a>自定义博客的个人信息</h2><p>首先删除 hexo 自动生成的 <code>docs/source/_posts/hello-world.md</code> 文档，然后使用如下命令创建属于自己的博客，比如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cd docs$ hexo new post "Hexo + vscode + github pages 搭建属于自己的博客"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样便会在目录 <code>docs/source/_posts/</code> 下面生成 <code>Hexo-vscode-github-pages-搭建属于自己的博客.md</code> 文档，接着只需要在此文档中填充内容即可。在文章开头可以配置文档的布局：</p><pre class="line-numbers language-none"><code class="language-none">---title: Hexo + vscode + github pages 搭建属于自己的博客date: 2019-09-01 19:37:09categories: 教程 #文章文类tags: [hexo, github] #文章标签，多于一项时用这种格式---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改-config-yml-匹配个人需求"><a href="#修改-config-yml-匹配个人需求" class="headerlink" title="修改 _config.yml 匹配个人需求"></a>修改 <code>_config.yml</code> 匹配个人需求</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Sitetitle: 刘新伟的技术博客专栏 # 标题subtitle: # 子标题description: # 站点描述，给搜索引擎看的keywords: # 关键字author: 刘新伟language: zh-CNtimezone: Asia/Shanghai # 时区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>description</code> 主要用于 SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code> 参数用于主题显示文章的作者。</p><p>为了博客可以支持图片的上传需要修改 <code>_config.yml</code>：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">post_asset_folder: true # true 支持图片本地上传<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你的 Hexo 项目中只有少量图片，那最简单的方法就是将它们放在 <code>/docs/source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code>的方法访问它们，详细内容参考<a href="https://hexo.io/zh-cn/docs/asset-folders.html">资源文件夹</a>。</p><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。随着 Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">{% asset_path slug %}{% asset_img slug [title] %}{% asset_link slug [title] %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置好之后便可以正常显示结果：</p><p><img src="/dao/post/zh-CN/0cb0813c59a9/2019-09-01-170438.png"></p><p>可以看出，此时的标题与字体均发生了改变。</p><p><strong>注意</strong>：<code>{% asset_img slug [title] %}</code> 中的 <code>title</code> 不可以为空值，如果想要省略，可以这样：<code>{% asset_img slug  %}</code>，即使用空格代替 <code>title</code>（注意 <code>slug</code> 后面有两个空格）。</p><p>如果在执行 <code>hexo deploy</code> 后,出现 error deployer not found:github 的错误，请执行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您觉得麻烦，可以直接 fork 我已经配置好的博客模板 <a href="https://github.com/xinetzone/notebook">notebook</a> 并按照 README 进行操作即可。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
