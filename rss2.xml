<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>上善若水</title>
    <link>https://xinetzone.github.io/</link>
    
    <atom:link href="https://xinetzone.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>利用 AI 开发一切有意思的东西</description>
    <pubDate>Thu, 20 May 2021 08:49:23 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>深度学习基础：线性回归</title>
      <link>https://xinetzone.github.io/xint/zh-CN/9eb2d01bc089.html</link>
      <guid>https://xinetzone.github.io/xint/zh-CN/9eb2d01bc089.html</guid>
      <pubDate>Thu, 20 May 2021 08:49:23 GMT</pubDate>
      
      <description>使用 TensorFlow，MXNet，PyTorch 实现线性回归</description>
      
      
      
      <content:encoded><![CDATA[<p>对 <span class="w3-yellow">样本</span> 做如下约定：</p><article>$$\tag{1} \mathbf{X} = \begin{bmatrix}\mathbf{x}_1^T \\ \mathbf{x}_2^T \\ \vdots \\ \mathbf{x}_m^T\end{bmatrix} \in \mathbb{R}^{m \times n} $$$$\begin{matrix}\tag{2}\mathbf{x}_i = \begin{bmatrix}x_{i1} \\ x_{i2} \\ \vdots \\ x_{in}\end{bmatrix} \in \mathbb{R}^n, &amp; i \in \{1, \cdots, m\}\end{matrix}$$</article><h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><p>若有权重 $\mathbf{w} = (w_1, w_2, \cdots, w_n)^T \in \mathbb{R}^n$，偏置 $b \in \mathbb{R}$，则<span class="w3-yellow">线性模型</span>可以表示为：</p><article>$$\tag{3} \hat{\mathbf{y}} = \mathbf{Xw} + b \in \mathbb{R}^m$$</article><p>展开公式 (3)，即：</p><article>$$\begin{cases}\tag{4} \hat{\mathbf{y}} = (\hat{y}_1, \hat{y}_2, \cdots, \hat{y}_m)^T\\\hat{y}_i = \mathbf{x}_i^T \mathbf{w} + b = \langle \mathbf{x}_i, \mathbf{w} \rangle + b,&amp;i \in \{1, \cdots, m\}\end{cases}$$</article><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>已知样本 $(\mathbf{x}_i, y_i) _{i=1}^{m}$，且 $\mathbf{x}_i$ 的预测值为 $\hat{y_i}$，则定义可单个样本是损失函数：</p><article>$$\tag{5}l^{(i)}(\mathbf{w}, b) = \frac 1 2 (\hat{y}_i - y_i)^2, i \in \{1, \cdots, m\}$$</article><p>总损失函数定义为：</p><article>$$\tag{6}L(\mathbf{w}, b) = {\frac 1 m} \sum_{i=1}^m l^{(i)}(\mathbf{w}, b) = {\frac 1 {2m}} \lVert \mathbf{Xw} + b - \mathbf{y} \rVert ^2$$</article><p>在训练模型时，我们希望寻找一组参数 $(\mathbf{w}^*, b^*)$，这组参数能最小化在所有训练样本上的总损失。如下式：</p><article>$$\tag{7}\mathbf{w}^{\ast}, b^{\ast} = \argmax_{\mathbf{w}^{\ast}, b^{\ast}} L(\mathbf{w}, b)$$</article><p>可以求得解析解：</p><p>将 $\mathbf{w}$ 与 $b$ 合并为 $\overline{\mathbf{w}}$，$\overline{\mathbf{X}} = (\mathbf{X}, \mathbf{1})$，则公式 (6)，可以写作：</p><article>$$\tag{8}L(\mathbf{w}, b) = {\frac 1 {2m}} \lVert \overline{\mathbf{X}} \overline{\mathbf{w}} - \mathbf{y} \rVert ^2$$</article><p>这很容易求得解析解：</p><article>$$\tag{9}\overline{\mathbf{w}}^{\ast} = (\overline{\mathbf{X}}^T \overline{\mathbf{X}})^{-1} \overline{\mathbf{X}}^T \mathbf{y}$$</article><p>对于实际问题，往往模型很复杂很难求得解析解，大都仅仅求得其近似解。</p><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>由计算梯度得：</p><article>$$\tag{10}\nabla_{\overline{\mathbf{w}}} L = {\cfrac 1 m} \overline{\mathbf{X}}^T (\overline{\mathbf{X}} \overline{\mathbf{w}} - y)$$</article><p>所以，参数更新：</p><article>$$\tag{11}\begin{cases}\mathbf{w} \leftarrow \mathbf{w} - {\cfrac \eta m} \mathbf{X}^T (\mathbf{Xw} + b - \mathbf{y}) \\b \leftarrow b - {\frac \eta m} \mathbf{1}^T (\mathbf{Xw} + b - \mathbf{y})\end{cases}$$</article><p>其中 $\eta$ 表示学习率。</p>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/xint/">xint</category>
      
      
      <category domain="https://xinetzone.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/">线性回归</category>
      
      
      <comments>https://xinetzone.github.io/xint/zh-CN/9eb2d01bc089.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://xinetzone.github.io/post/en-US/484bfad6eaff.html</link>
      <guid>https://xinetzone.github.io/post/en-US/484bfad6eaff.html</guid>
      <pubDate>Thu, 20 May 2021 08:49:23 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/%E6%95%99%E7%A8%8B/">教程</category>
      
      
      <category domain="https://xinetzone.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://xinetzone.github.io/post/en-US/484bfad6eaff.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数学符号</title>
      <link>https://xinetzone.github.io/post/zh-CN/ebc6eb95e7c8.html</link>
      <guid>https://xinetzone.github.io/post/zh-CN/ebc6eb95e7c8.html</guid>
      <pubDate>Thu, 20 May 2021 08:49:23 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;数字&quot;&gt;&lt;a href=&quot;#数字&quot; class=&quot;headerlink&quot; title=&quot;数字&quot;&gt;&lt;/a&gt;数字&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;$x$：标量&lt;/li&gt;
&lt;li&gt;$\mathbf{x}$：向量&lt;/li&gt;
&lt;li&gt;$\mathbf{X}$：矩阵&lt;/li&gt;
&lt;l</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><ul><li>$x$：标量</li><li>$\mathbf{x}$：向量</li><li>$\mathbf{X}$：矩阵</li><li>$\mathsf{X}$：张量</li><li>$\mathbf{I}$：单位矩阵</li><li>$x_i$, $[\mathbf{x}]_i$：向量$\mathbf{x}$第$i$个元素</li><li>$x_{ij}$, $[\mathbf{X}]_{ij}$：矩阵$\mathbf{X}$第$i$行第$j$列的元素</li></ul><div class="w3-pale-green">向量、矩阵使用 <code>\mathbf</code>，张量使用 <code>\mathsf</code>。</div><h1 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h1><ul><li>$\mathcal{X}$: 集合</li><li>$\mathbb{Z}$: 整数集合</li><li>$\mathbb{R}$ 实数集合</li><li>$\mathbb{R}^n$: $n$维实数向量</li><li>$\mathbb{R}^{a\times b}$: 包含$a$行和$b$列的实数矩阵</li><li>$\mathcal{A}\cup\mathcal{B}$: 集合$\mathcal{A}$和$\mathcal{B}$的并集（<code>\cup</code>）</li><li>$\mathcal{A}\cap\mathcal{B}$：集合$\mathcal{A}$和$\mathcal{B}$的交集（<code>\cap</code>）</li><li>$\mathcal{A}\setminus\mathcal{B}$：集合$\mathcal{B}$与集合$\mathcal{A}$相减（<code>\setminus</code>）</li></ul><div class="w3-pale-green">集合使用 <code>\mathbb</code>，集合族使用 <code>\mathcal</code>。</div><h1 id="函数和运算符"><a href="#函数和运算符" class="headerlink" title="函数和运算符"></a>函数和运算符</h1><ul><li>$f(\cdot)$：函数</li><li>$\log(\cdot)$：自然对数</li><li>$\exp(\cdot)$: 指数函数</li><li>$\mathbf{1}_\mathcal{X}$: 指示函数</li><li>$\mathbf{(\cdot)}^\top$: 向量或矩阵的转置</li><li>$\mathbf{X}^{-1}$: 矩阵的逆</li><li>$\odot$: 按元素相乘</li><li>$[\cdot, \cdot]$：连结</li><li>$\lvert \mathcal{X} \rvert$：集合的基数</li><li>$|\cdot|_p$: ：$L_p$ 正则</li><li>$|\cdot|$: $L_2$ 正则</li><li>$\langle \mathbf{x}, \mathbf{y} \rangle$：向量$\mathbf{x}$和$\mathbf{y}$的点积</li><li>$\sum$: 连加</li><li>$\prod$: 连乘</li><li>$\stackrel{\mathrm{def}}{=}$：定义</li><li>$\ast$: 例如，$a^{\ast}$</li></ul><h1 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h1><ul><li>$\frac{dy}{dx}$：$y$关于$x$的导数</li><li>$\frac{\partial y}{\partial x}$：$y$关于$x$的偏导数</li><li>$\nabla_{\mathbf{x}} y$：$y$关于$\mathbf{x}$的梯度</li><li>$\int_a^b f(x) ;dx$: $f$在$a$到$b$区间上关于$x$的定积分</li><li>$\int f(x) ;dx$: $f$关于$x$的不定积分</li></ul><h1 id="概率与信息论"><a href="#概率与信息论" class="headerlink" title="概率与信息论"></a>概率与信息论</h1><ul><li>$P(\cdot)$：概率分布</li><li>$z \sim P$: 随机变量$z$具有概率分布$P$</li><li>$P(X \mid Y)$：$X\mid Y$的条件概率</li><li>$p(x)$: 概率密度函数</li><li>$\mathbb{E}_{x} [f(x)]$: 函数$f$对$x$的数学期望</li><li>$X \perp Y$: 随机变量$X$和$Y$是独立的</li><li>$X \perp Y \mid Z$: 随机变量$X$和$Y$在给定随机变量$Z$的条件下是独立的</li><li>$\mathrm{Var}(X)$: 随机变量$X$的方差</li><li>$\sigma_X$: 随机变量$X$的标准差</li><li>$\mathrm{Cov}(X, Y)$: 随机变量$X$和$Y$的协方差</li><li>$\rho(X, Y)$: 随机变量$X$和$Y$的相关性</li><li>$H(X)$: 随机变量$X$的熵</li><li>$D_{\mathrm{KL}}(P|Q)$: $P$和$Q$的KL-散度</li></ul><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li>$\mathcal{O}$：大O标记</li></ul>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/%E6%95%B0%E5%AD%A6/">数学</category>
      
      
      <category domain="https://xinetzone.github.io/tags/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/">数学符号</category>
      
      
      <comments>https://xinetzone.github.io/post/zh-CN/ebc6eb95e7c8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>scheduler</title>
      <link>https://xinetzone.github.io/event/zh-CN/099cf7229b3b.html</link>
      <guid>https://xinetzone.github.io/event/zh-CN/099cf7229b3b.html</guid>
      <pubDate>Mon, 17 May 2021 03:17:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;sched&lt;/code&gt; 模块实现了一个通用事件调度程序，用于在特定时间运行任务。&lt;code&gt;scheduler&lt;/code&gt; 类使用 &lt;code&gt;time&lt;/code&gt; 函数来学习当前时间，使用  &lt;code&gt;delay&lt;/code&gt; 函数等待特定的一段时间。</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>sched</code> 模块实现了一个通用事件调度程序，用于在特定时间运行任务。<code>scheduler</code> 类使用 <code>time</code> 函数来学习当前时间，使用  <code>delay</code> 函数等待特定的一段时间。实际的时间单位并不重要，这使得接口足够灵活，可以用于许多目的。</p><h2 id="运行有延迟的事件"><a href="#运行有延迟的事件" class="headerlink" title="运行有延迟的事件"></a>运行有延迟的事件</h2><p>事件可以计划在延迟之后运行，或在特定时间运行。要使用延迟调度它们，可以使用<code>scheduler.enter(delay, priority, action, argument=(), kwargs={})</code>方法，该方法有四个主要参数。</p><ul><li>表示延迟的数字</li><li>优先级值</li><li>要调用的函数</li><li>函数的参数元组</li></ul><p>这个示例分别安排两个不同的事件在 $2$ 秒和 $3$ 秒后运行。当事件的时间出现时，将调用 <code>print_event()</code> 并打印当前时间和传递给事件的 <code>name</code> 参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sched_basic.py</span><span class="token keyword">import</span> sched<span class="token keyword">import</span> timescheduler <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_event</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    elapsed <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>now <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'EVENT: </span><span class="token interpolation"><span class="token punctuation">{</span>now<span class="token punctuation">}</span></span><span class="token string"> elapsed=</span><span class="token interpolation"><span class="token punctuation">{</span>elapsed<span class="token punctuation">}</span></span><span class="token string"> name=</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> print_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> print_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><output>START: Mon May 17 13:34:28 2021EVENT: Mon May 17 13:34:30 2021 elapsed=2 name=firstEVENT: Mon May 17 13:34:31 2021 elapsed=3 name=second</output><p>为第一个事件打印的时间是在开始后 $2$ 秒，为第二个事件打印的时间是在开始后 $3$ 秒。</p><h2 id="重叠的事件"><a href="#重叠的事件" class="headerlink" title="重叠的事件"></a>重叠的事件</h2><p>对<code>run()</code>的调用会阻塞，直到所有事件都被处理完。每个事件都在同一个线程中运行，所以如果一个事件的运行时间比事件之间的延迟时间长，就会出现重叠。通过推迟后面的事件来解决重叠问题。事件不会丢失，但是有些事件可能会在计划时间之后被调用。在下一个例子中，<code>long_event()</code> 会休眠，但它可以通过执行长时间的计算或阻塞I/O来轻易地延迟。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sched_overlap.py</span><span class="token keyword">import</span> sched<span class="token keyword">import</span> timescheduler <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">long_event</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'BEGIN EVENT :'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FINISH EVENT:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> long_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> long_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><output>START: Mon May 17 13:43:54 2021BEGIN EVENT : Mon May 17 13:43:56 2021 firstFINISH EVENT: Mon May 17 13:43:58 2021 firstBEGIN EVENT : Mon May 17 13:43:58 2021 secondFINISH EVENT: Mon May 17 13:44:00 2021 second</output><p>结果是在第一个事件结束后立即运行第二个事件，因为第一个事件花费了足够长的时间来推动时钟超过第二个事件的期望开始时间。</p><h2 id="事件优先级"><a href="#事件优先级" class="headerlink" title="事件优先级"></a>事件优先级</h2><p>如果计划在同一时间调度多个事件，则将使用它们的优先级值来确定它们的运行顺序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sched_priority.py</span><span class="token keyword">import</span> sched<span class="token keyword">import</span> timescheduler <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_event</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'EVENT:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enterabs<span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> print_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>enterabs<span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> print_event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><output>START: Mon May 17 13:50:50 2021EVENT: Mon May 17 13:50:52 2021 secondEVENT: Mon May 17 13:50:52 2021 first</output><p>这个示例需要确保它们被安排在完全相同的时间，因此使用 <code>enterabs()</code> 方法而不是 <code>enter()</code>。<code>enterabs()</code> 的第一个参数是运行事件的时间，而不是延迟的时间。</p><h2 id="取消事件"><a href="#取消事件" class="headerlink" title="取消事件"></a>取消事件</h2><p><code>enter()</code> 和 <code>enterabs()</code> 都返回一个对事件的引用，可以在以后用来取消该事件。因为 <code>run()</code> 会阻塞，所以必须在不同的线程中取消该事件。对于本例，将启动一个线程来运行调度程序，并使用主处理线程来取消事件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sched_cancel.py</span><span class="token keyword">import</span> sched<span class="token keyword">import</span> threading<span class="token keyword">import</span> timescheduler <span class="token operator">=</span> sched<span class="token punctuation">.</span>scheduler<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span><span class="token comment"># Set up a global to be modified by the threads</span>counter <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">increment_counter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> counter    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'EVENT:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    counter <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'NOW:'</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>e1 <span class="token operator">=</span> scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> increment_counter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'E1'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>e2 <span class="token operator">=</span> scheduler<span class="token punctuation">.</span>enter<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> increment_counter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'E2'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Start a thread to run the events</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>scheduler<span class="token punctuation">.</span>run<span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Back in the main thread, cancel the first scheduled event.</span>scheduler<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token comment"># Wait for the scheduler to finish running in the thread</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FINAL:'</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原定有两项活动，但第一项后来被取消。只有第二个事件运行，因此计数器变量只增加一次。</p><output>START: Mon May 17 13:55:10 2021EVENT: Mon May 17 13:55:13 2021 E2NOW: 1FINAL: 1</output>]]></content:encoded>
      
      
      
      <category domain="https://xinetzone.github.io/tags/sched/">sched</category>
      
      
      <comments>https://xinetzone.github.io/event/zh-CN/099cf7229b3b.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>start</title>
      <link>https://xinetzone.github.io/airflow/zh-CN/35c01ec92e42.html</link>
      <guid>https://xinetzone.github.io/airflow/zh-CN/35c01ec92e42.html</guid>
      <pubDate>Mon, 17 May 2021 02:54:31 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;参考：&lt;a href=&quot;https://airflow.apache.org/&quot;&gt;airflow&lt;/a&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>参考：<a href="https://airflow.apache.org/">airflow</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://xinetzone.github.io/airflow/zh-CN/35c01ec92e42.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Dash 创建上位机界面</title>
      <link>https://xinetzone.github.io/dash/zh-CN/74799cf285db.html</link>
      <guid>https://xinetzone.github.io/dash/zh-CN/74799cf285db.html</guid>
      <pubDate>Mon, 17 May 2021 00:30:30 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;Dash&lt;/code&gt; 是建立在 &lt;code&gt;Flask&lt;/code&gt;、&lt;code&gt;Poltly.js&lt;/code&gt; 以及 &lt;code&gt;React.js&lt;/code&gt; 之上的 Python 框架，它降低了前端入门的门槛，帮助你快速搭建网站、数据可视化工具、上位机</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>Dash</code> 是建立在 <code>Flask</code>、<code>Poltly.js</code> 以及 <code>React.js</code> 之上的 Python 框架，它降低了前端入门的门槛，帮助你快速搭建网站、数据可视化工具、上位机界面等应用。</p><p>为了更加方便使用 <code>Dash</code>，需要安装一些包：</p><ul><li><code>numpy</code>，<code>pandas</code>，<code>matplotlib</code></li><li><code>dash</code>，<code>jupyter_dash</code></li></ul><p>其中 <a href="https://github.com/plotly/jupyter-dash">jupyter_dash</a> 用于支持在 Jupyter Notebook 中运行 Dash。为了提供可以同时在 CMD 和 Jupyter 运行的 Dash 环境，在 <a href="https://github.com/xinetzone/aispace">aispace</a> 维护了一个代码库。</p><h2 id="创建服务器主接口"><a href="#创建服务器主接口" class="headerlink" title="创建服务器主接口"></a>创建服务器主接口</h2><p>关于 <code>aispace.server</code> 的细节可参考：<a href="https://xinetzone.github.io/dao/dash/zh-CN/ef498434c4c8.html">添加 CSS 和 JS，覆盖页面加载模板</a>。</p><p>运行 Dash：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">Jupyter Notebook</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">from</span> aispace<span class="token punctuation">.</span>server <span class="token keyword">import</span> create_app<span class="token punctuation">,</span> run_serverapp <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>H1<span class="token punctuation">(</span><span class="token string">'第一个 Dash 应用！'</span><span class="token punctuation">)</span><span class="token keyword">await</span> run_server<span class="token punctuation">(</span>app<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">CMD</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">from</span> aispace<span class="token punctuation">.</span>server <span class="token keyword">import</span> create_app<span class="token punctuation">,</span> run_serverapp <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>H1<span class="token punctuation">(</span><span class="token string">'第一个 Dash 应用！'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>run_server<span class="token punctuation">(</span>app<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        </div>    </div></article><p>由于 Jupyter 十分便利，所以后面均以 Jupyter 作为运行环境。</p><p>本例便是一个完整的 Dash 应用，<code>app</code> 是 Dash 的应用主接口，<code>layout</code> 是 UI 的布局，<code>run_server</code> 启动服务器。</p><p>本例仅仅定义了 <code>&lt;h1&gt;</code> 元素，效果如下：</p><p><img src="/dao/dash/zh-CN/74799cf285db/first.png"></p><div class="w3-yellow"><code>aispace.server</code> 提供了 <a href="https://www.w3schools.com/w3css/default.asp">W3.CSS</a> 与 <a href="https://xinetzone.github.io/Font-Awesome/css/all.css">Font Awesome</a> 支持。</div><p>为了便利，先载入一些必需包和模块（此处先不深入，后续会一一展开）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dcc<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>express <span class="token keyword">as</span> px<span class="token keyword">from</span> dash<span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Output<span class="token punctuation">,</span> State<span class="token punctuation">,</span> MATCH<span class="token punctuation">,</span> ALL<span class="token comment"># 自定义</span><span class="token keyword">from</span> aispace<span class="token punctuation">.</span>server <span class="token keyword">import</span> create_app<span class="token punctuation">,</span> run_server<span class="token keyword">from</span> aispace<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>nav <span class="token keyword">import</span> create_nav<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本文将探讨如何使用 Dash 创建一个可交互的上位机界面。</p><h2 id="与外部软件交互（待更）"><a href="#与外部软件交互（待更）" class="headerlink" title="与外部软件交互（待更）"></a>与外部软件交互（待更）</h2><p>从零开发一个产品难度很大，往往可以借助其他成熟的软件与自己的产品交互。下面以打开音乐播放器为例进行介绍。</p><p>首先，下载并安装一个音乐播放器，比如 <a href="https://music.163.com/">网易云音乐</a>，然后，找到运行它的可执行性文件，即 “C:\Program Files (x86)\Netease\CloudMusic\cloudmusic.exe”。</p><p><img src="/dao/dash/zh-CN/74799cf285db/wyy.png"></p><h2 id="Multi-Page-Apps-and-URL-Support"><a href="#Multi-Page-Apps-and-URL-Support" class="headerlink" title="Multi-Page Apps and URL Support"></a>Multi-Page Apps and URL Support</h2><p>Dash 将 web 应用渲染为“单页应用”。这意味着当用户导航应用程序时，应用程序不会完全重新加载，从而使浏览速度非常快。</p><p>有两个组件可以帮助页面导航：<code>dash_core_components.Location</code> 和 <code>dash_core_components.Link</code>。</p><p><code>dash_core_components.Location</code> 通过 <code>pathname</code> 属性表示 web 浏览器中的位置栏。这里有一个简单的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token comment"># 表示 URL栏，不作任何渲染</span>    dcc<span class="token punctuation">.</span>Location<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span> refresh<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/page-2"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># content will be rendered in this element</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-content'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'page-content'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span>Input<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'pathname'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_page</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>        html<span class="token punctuation">.</span>H3<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'You are on page </span><span class="token interpolation"><span class="token punctuation">{</span>pathname<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">await</span> run_server<span class="token punctuation">(</span>app<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8050</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/dao/dash/zh-CN/74799cf285db/url-support.gif"></p><p>在这个例子中，回调<code>display_page</code>接收页面的当前路径名(URL 的最后一部分)。回调只是在页面上显示 <code>pathname</code>，但是它可以使用路径名来显示不同的内容。<code>Link</code> 元素更新浏览器的路径名，而不刷新页面。如果你使用 <code>html.A</code> 元素，那么路径名更新，页面也会刷新。具体细节见下图：请注意，尽管点击链接会更新 URL，但它不会刷新页面。</p><p><code>Link</code> 允许你在一个多页面应用程序中创建一个可点击的链接。对于当前应用程序之外的目的地链接，<code>html.A</code> 是一个更好的组件选择。</p><p><code>dcc.Location</code> 组件表示 web 浏览器中的位置或地址栏。通过它的 <code>href</code>, <code>pathname</code>, <code>search</code> 和 <code>hash</code> 属性，你可以访问应用程序加载的 url 的不同部分。</p><p>例如，给定 url <code>http://127.0.0.1:8050/page-2?a=test#quiz</code>，有：</p><ul><li><code>href</code> = <code>"http://127.0.0.1:8050/page-2?a=test#quiz"</code></li><li><code>pathname</code> = <code>"/page-2"</code></li><li><code>search</code> = <code>"?a=test"</code></li><li><code>hash</code> = <code>"#quiz"</code></li></ul><p>你可以修改上面的例子来根据 URL 显示不同的页面：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 因为我们给app.layout中不存在的元素添加了回调，</span><span class="token comment"># Dash会提出一个异常来警告我们，我们可能做错了什么。</span><span class="token comment"># 在本例中，我们通过回调添加元素，因此可以忽略异常。</span>app <span class="token operator">=</span> create_app<span class="token punctuation">(</span>suppress_callback_exceptions<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    dcc<span class="token punctuation">.</span>Location<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span> refresh<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-content'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>index_page <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go to Page 1'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go to Page 2'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>page_1_layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>H1<span class="token punctuation">(</span><span class="token string">'Page 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Dropdown<span class="token punctuation">(</span>        <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-1-dropdown'</span><span class="token punctuation">,</span>        options<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> i<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> i<span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'LA'</span><span class="token punctuation">,</span> <span class="token string">'NYC'</span><span class="token punctuation">,</span> <span class="token string">'MTL'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        value<span class="token operator">=</span><span class="token string">'LA'</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-1-content'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go to Page 2'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go back to home'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'page-1-content'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span>Input<span class="token punctuation">(</span><span class="token string">'page-1-dropdown'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">page_1_dropdown</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'You have selected "</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">"'</span></span>page_2_layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>H1<span class="token punctuation">(</span><span class="token string">'Page 2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>RadioItems<span class="token punctuation">(</span>        <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-2-radios'</span><span class="token punctuation">,</span>        options<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> i<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> i<span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Orange'</span><span class="token punctuation">,</span> <span class="token string">'Blue'</span><span class="token punctuation">,</span> <span class="token string">'Red'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        value<span class="token operator">=</span><span class="token string">'Orange'</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-2-content'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go to Page 1'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go back to home'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'page-2-content'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span>Input<span class="token punctuation">(</span><span class="token string">'page-2-radios'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">page_2_radios</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'You have selected "</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">"'</span></span><span class="token comment"># Update the index</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'page-content'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span>Input<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'pathname'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_page</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pathname <span class="token operator">==</span> <span class="token string">'/page-1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> page_1_layout    <span class="token keyword">elif</span> pathname <span class="token operator">==</span> <span class="token string">'/page-2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> page_2_layout    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> index_page    <span class="token comment"># You could also return a 404 "URL not found" page here</span><span class="token keyword">await</span> run_server<span class="token punctuation">(</span>app<span class="token punctuation">,</span> layout<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8050</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/dao/dash/zh-CN/74799cf285db/url-support-pages.gif"></p><p>在这个例子中，我们通过 <code>display_page</code> 函数显示不同的布局。</p><ul><li>每个页面都可以有交互元素，即使这些元素可能不在初始视图中。Dash 优雅地处理这些“动态生成”的组件：当它们被渲染时，它们会用它们的初始值触发回调。</li><li>因为我们给app.layout中不存在的元素添加回调，Dash 会引发异常，警告我们可能做错了什么。在本例中，我们通过回调添加元素，因此可以通过设置<code>suppress_callback_exceptions=True</code>忽略异常。在不抑制回调异常的情况下也可以做到这一点。详细信息请参见下面的示例。</li><li>您可以修改此示例，以在不同的文件中导入不同页面的布局。</li><li>你看到的这个 Dash 用户指南本身就是一个多页的 Dash 应用程序，使用了相同的原则。</li></ul><h3 id="动态创建多页面应用验证的布局"><a href="#动态创建多页面应用验证的布局" class="headerlink" title="动态创建多页面应用验证的布局"></a>动态创建多页面应用验证的布局</h3><p>Dash 将验证应用于回调，它将执行检查，例如验证回调参数的类型，检查指定的 <code>Input</code> 和 <code>Output</code> 组件是否具有指定的属性。</p><p>对于完全验证，回调中的所有组件都必须出现在应用程序的初始布局中，如果它们没有出现，你将看到一个错误。然而，在更复杂的 Dash 应用中，需要动态修改布局(如多页应用)，并非回调中出现的每个组件都包含在初始布局中。</p><p> Dash 1.12 你可以设置<code>app.validation_layout</code>为一个<code>"complete"</code>布局，包含你将在任何页面 <code>/</code> 部分中使用的所有组件。<code>app.validation_layout</code> 必须是一个 Dash 组件，而不是一个函数。然后将 <code>app.layout</code> 设置为索引布局。在以前的 Dash 版本中，你可以使用一个技巧来实现相同的结果，检查布局函数中的<code>flask.has_request_context</code>—仍然可以工作，但不再推荐。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span>url_bar_and_content_div <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    dcc<span class="token punctuation">.</span>Location<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span> refresh<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-content'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>layout_index <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/page-1"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/page-2"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>layout_page_1 <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>H2<span class="token punctuation">(</span><span class="token string">'Page 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Input<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'input-1-state'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'Montreal'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Input<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'input-2-state'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'Canada'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'submit-button'</span><span class="token punctuation">,</span> n_clicks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> children<span class="token operator">=</span><span class="token string">'Submit'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'output-state'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/page-2"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>layout_page_2 <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>H2<span class="token punctuation">(</span><span class="token string">'Page 2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Dropdown<span class="token punctuation">(</span>        <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-2-dropdown'</span><span class="token punctuation">,</span>        options<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> i<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> i<span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'LA'</span><span class="token punctuation">,</span> <span class="token string">'NYC'</span><span class="token punctuation">,</span> <span class="token string">'MTL'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        value<span class="token operator">=</span><span class="token string">'LA'</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-2-display-value'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/page-1"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/page-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># index layout</span>layout <span class="token operator">=</span> url_bar_and_content_div<span class="token comment"># "complete" layout</span>app<span class="token punctuation">.</span>validation_layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    url_bar_and_content_div<span class="token punctuation">,</span>    layout_index<span class="token punctuation">,</span>    layout_page_1<span class="token punctuation">,</span>    layout_page_2<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Index callbacks</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'page-content'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              Input<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'pathname'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_page</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pathname <span class="token operator">==</span> <span class="token string">"/page-1"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> layout_page_1    <span class="token keyword">elif</span> pathname <span class="token operator">==</span> <span class="token string">"/page-2"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> layout_page_2    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> layout_index<span class="token comment"># Page 1 callbacks</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'output-state'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              Input<span class="token punctuation">(</span><span class="token string">'submit-button'</span><span class="token punctuation">,</span> <span class="token string">'n_clicks'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              State<span class="token punctuation">(</span><span class="token string">'input-1-state'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              State<span class="token punctuation">(</span><span class="token string">'input-2-state'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update_output</span><span class="token punctuation">(</span>n_clicks<span class="token punctuation">,</span> input1<span class="token punctuation">,</span> input2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The Button has been pressed </span><span class="token interpolation"><span class="token punctuation">{</span>n_clicks<span class="token punctuation">}</span></span><span class="token string"> times,'</span></span>            <span class="token string-interpolation"><span class="token string">f'Input 1 is "</span><span class="token interpolation"><span class="token punctuation">{</span>input1<span class="token punctuation">}</span></span><span class="token string">",'</span></span>            <span class="token string-interpolation"><span class="token string">f'and Input 2 is "</span><span class="token interpolation"><span class="token punctuation">{</span>input2<span class="token punctuation">}</span></span><span class="token string">"'</span></span><span class="token punctuation">)</span><span class="token comment"># Page 2 callbacks</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'page-2-display-value'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              Input<span class="token punctuation">(</span><span class="token string">'page-2-dropdown'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_value</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'display_value'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'You have selected "</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">"'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构化多页面应用程序"><a href="#结构化多页面应用程序" class="headerlink" title="结构化多页面应用程序"></a>结构化多页面应用程序</h3><p>下面是如何构建一个多页面应用程序，每个应用程序都包含在一个单独的文件中。文件结构：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span> app<span class="token punctuation">.</span>py<span class="token operator">-</span> index<span class="token punctuation">.</span>py<span class="token operator">-</span> apps   <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span> __init__<span class="token punctuation">.</span>py   <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span> app1<span class="token punctuation">.</span>py   <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span> app2<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dashapp <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> suppress_callback_exceptions<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>server <span class="token operator">=</span> app<span class="token punctuation">.</span>server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>apps/app1.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dcc<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">from</span> dash<span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Output<span class="token keyword">from</span> app <span class="token keyword">import</span> applayout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>H3<span class="token punctuation">(</span><span class="token string">'App 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Dropdown<span class="token punctuation">(</span>        <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'app-1-dropdown'</span><span class="token punctuation">,</span>        options<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'App 1 - </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> i<span class="token punctuation">}</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'NYC'</span><span class="token punctuation">,</span> <span class="token string">'MTL'</span><span class="token punctuation">,</span> <span class="token string">'LA'</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'app-1-display-value'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go to App 2'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/apps/app2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>    Output<span class="token punctuation">(</span><span class="token string">'app-1-display-value'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Input<span class="token punctuation">(</span><span class="token string">'app-1-dropdown'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_value</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'You have selected "</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">"'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>apps/app2.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dcc<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">from</span> dash<span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Output<span class="token punctuation">,</span> State<span class="token keyword">from</span> app <span class="token keyword">import</span> applayout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>H2<span class="token punctuation">(</span><span class="token string">'App 2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Input<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'input-1-state'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'Montreal'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Input<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'input-2-state'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'Canada'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'submit-button'</span><span class="token punctuation">,</span> n_clicks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> children<span class="token operator">=</span><span class="token string">'Submit'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'output-state'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Br<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Navigate to "/apps/app1"'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/apps/app1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'output-state'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              Input<span class="token punctuation">(</span><span class="token string">'submit-button'</span><span class="token punctuation">,</span> <span class="token string">'n_clicks'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              State<span class="token punctuation">(</span><span class="token string">'input-1-state'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              State<span class="token punctuation">(</span><span class="token string">'input-2-state'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update_output</span><span class="token punctuation">(</span>n_clicks<span class="token punctuation">,</span> input1<span class="token punctuation">,</span> input2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The Button has been pressed </span><span class="token interpolation"><span class="token punctuation">{</span>n_clicks<span class="token punctuation">}</span></span><span class="token string"> times,'</span></span>            <span class="token string-interpolation"><span class="token string">f'Input 1 is "</span><span class="token interpolation"><span class="token punctuation">{</span>input1<span class="token punctuation">}</span></span><span class="token string">",'</span></span>            <span class="token string-interpolation"><span class="token string">f'and Input 2 is "</span><span class="token interpolation"><span class="token punctuation">{</span>input2<span class="token punctuation">}</span></span><span class="token string">"'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>index.py</code></p><p><code>index.py</code> 在不同的 url 上加载不同的应用，就像这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dcc<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">from</span> dash<span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Output<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token keyword">from</span> apps <span class="token keyword">import</span> app1<span class="token punctuation">,</span> app2app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    dcc<span class="token punctuation">.</span>Location<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span> refresh<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-content'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'page-content'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              Input<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'pathname'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_page</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pathname <span class="token operator">==</span> <span class="token string">'/apps/app1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> app1<span class="token punctuation">.</span>layout    <span class="token keyword">elif</span> pathname <span class="token operator">==</span> <span class="token string">'/apps/app2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> app2<span class="token punctuation">.</span>layout    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'404'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，你可能更喜欢一个平面的项目布局，将回调和布局分开到不同的文件中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">- app.py- index.py- callbacks.py- layouts.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dashapp <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> suppress_callback_exceptions<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>server <span class="token operator">=</span> app<span class="token punctuation">.</span>server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>callbacks.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dash<span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Output<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>    Output<span class="token punctuation">(</span><span class="token string">'app-1-display-value'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Input<span class="token punctuation">(</span><span class="token string">'app-1-dropdown'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_value</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'You have selected "{}"'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>    Output<span class="token punctuation">(</span><span class="token string">'app-2-display-value'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Input<span class="token punctuation">(</span><span class="token string">'app-2-dropdown'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_value</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'You have selected "{}"'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>layouts.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dcc<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> htmllayout1 <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>H3<span class="token punctuation">(</span><span class="token string">'App 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Dropdown<span class="token punctuation">(</span>        <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'app-1-dropdown'</span><span class="token punctuation">,</span>        options<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> <span class="token string">'App 1 - {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> i<span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>                <span class="token string">'NYC'</span><span class="token punctuation">,</span> <span class="token string">'MTL'</span><span class="token punctuation">,</span> <span class="token string">'LA'</span>            <span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'app-1-display-value'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go to App 2'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/apps/app2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>layout2 <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>H3<span class="token punctuation">(</span><span class="token string">'App 2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Dropdown<span class="token punctuation">(</span>        <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'app-2-dropdown'</span><span class="token punctuation">,</span>        options<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> <span class="token string">'App 2 - {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> i<span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>                <span class="token string">'NYC'</span><span class="token punctuation">,</span> <span class="token string">'MTL'</span><span class="token punctuation">,</span> <span class="token string">'LA'</span>            <span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'app-2-display-value'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Link<span class="token punctuation">(</span><span class="token string">'Go to App 1'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'/apps/app1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>index.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dcc<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">from</span> dash<span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Output<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token keyword">from</span> layouts <span class="token keyword">import</span> layout1<span class="token punctuation">,</span> layout2<span class="token keyword">import</span> callbacksapp<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    dcc<span class="token punctuation">.</span>Location<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span> refresh<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'page-content'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>callback</span><span class="token punctuation">(</span>Output<span class="token punctuation">(</span><span class="token string">'page-content'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              Input<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'pathname'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display_page</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pathname <span class="token operator">==</span> <span class="token string">'/apps/app1'</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> layout1    <span class="token keyword">elif</span> pathname <span class="token operator">==</span> <span class="token string">'/apps/app2'</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> layout2    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'404'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，在这两个项目结构中，Dash 实例是在单独的 <code>app.py</code> 中定义的，而运行应用的入口点是 <code>index.py</code>。这种分离是为了避免循环导入：包含回调定义的文件需要访问 Dash 应用程序实例，但是如果是从 <code>index.py</code> 导入的，<code>index.py</code> 的初始加载最终会要求自己已经导入，这是不能满足的。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/notebook/">notebook</category>
      
      
      <category domain="https://xinetzone.github.io/tags/dash/">dash</category>
      
      <category domain="https://xinetzone.github.io/tags/aispace/">aispace</category>
      
      
      <comments>https://xinetzone.github.io/dash/zh-CN/74799cf285db.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Dash  创建菜单栏</title>
      <link>https://xinetzone.github.io/dash/zh-CN/cafc15d265ce.html</link>
      <guid>https://xinetzone.github.io/dash/zh-CN/cafc15d265ce.html</guid>
      <pubDate>Tue, 11 May 2021 08:07:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;本文部分代码见：&lt;a href=&quot;https://github.com/xinetzone/aispace&quot;&gt;aispace&lt;/a&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>本文部分代码见：<a href="https://github.com/xinetzone/aispace">aispace</a></p>]]></content:encoded>
      
      
      
      <category domain="https://xinetzone.github.io/tags/dash-menus/">dash-menus</category>
      
      
      <comments>https://xinetzone.github.io/dash/zh-CN/cafc15d265ce.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>添加 CSS 和 JS，覆盖页面加载模板</title>
      <link>https://xinetzone.github.io/dash/zh-CN/ef498434c4c8.html</link>
      <guid>https://xinetzone.github.io/dash/zh-CN/ef498434c4c8.html</guid>
      <pubDate>Tue, 11 May 2021 05:03:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Dash 应用程序通过 CSS 和 JavaScript 在 web 浏览器中呈现。在页面加载时，Dash 提供一个小的 HTML 模板，其中包括渲染应用程序所需的 CSS 和 JavaScript 引用。这一章涵盖了你需要知道的关于配置这个 HTML 文件以及关于在 Da</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Dash 应用程序通过 CSS 和 JavaScript 在 web 浏览器中呈现。在页面加载时，Dash 提供一个小的 HTML 模板，其中包括渲染应用程序所需的 CSS 和 JavaScript 引用。这一章涵盖了你需要知道的关于配置这个 HTML 文件以及关于在 Dash 应用程序中包括外部 CSS 和 JavaScript 的一切。</p><h2 id="添加自己的-CSS-和-JavaScript-到-Dash-应用程序"><a href="#添加自己的-CSS-和-JavaScript-到-Dash-应用程序" class="headerlink" title="添加自己的 CSS 和 JavaScript 到 Dash 应用程序"></a>添加自己的 CSS 和 JavaScript 到 Dash 应用程序</h2><p>在你的 Dash 应用程序中包含自定义 CSS 或 JavaScript 是很简单的。你只需在 <code>app</code> 目录的根目录下创建一个名为 <code>assets</code> 的文件夹，并在该文件夹中包含你的 CSS 和 JavaScript 文件。Dash 会自动提供这个文件夹中包含的所有文件。默认情况下，请求资产的 <code>url</code> 是 <code>/assets</code>，但是你可以用 <code>assets_url_path</code> 参数将其自定义为 <code>dash.Dash</code>。</p><p class="w3-yellow">建议：你需要在 Dash 构造函数中包含 <code>__name__</code>。</p><p>也就是说，<code>app = dash.Dash(__name__)</code> 而不是 <code>app = dash.Dash()</code>。理由见 <a href="https://community.plotly.com/t/dash-app-does-not-load-assets-and-app-index-string/12178/10?u=chriddyp">dash-app-does-not-load-assets-and-app-index-string</a>。</p><h2 id="示例：包含本地-CSS-和-JavaScript"><a href="#示例：包含本地-CSS-和-JavaScript" class="headerlink" title="示例：包含本地 CSS 和 JavaScript"></a>示例：包含本地 CSS 和 JavaScript</h2><p>我们将创建几个文件：<code>app.py</code>，一个名为 <code>assets</code> 的文件夹，以及该文件夹中的三个文件：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">- app.py- assets/    |-- typography.css    |-- header.css    |-- custom-script.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="w3-yellow">app.py</div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash<span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dcc<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> htmlapp <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span>        className<span class="token operator">=</span><span class="token string">"app-header"</span><span class="token punctuation">,</span>        children<span class="token operator">=</span><span class="token punctuation">[</span>            html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token string">'Plotly Dash'</span><span class="token punctuation">,</span> className<span class="token operator">=</span><span class="token string">"app-header--title"</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span>        children<span class="token operator">=</span>html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>            html<span class="token punctuation">.</span>H5<span class="token punctuation">(</span><span class="token string">'Overview'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''                This is an example of a simple Dash app with                local, customized CSS.            '''</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="w3-yellow">typography.css</div><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1, h2, h3, h4, h5, h6</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="w3-yellow">header.css</div><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.app-header</span> <span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> thin lightgrey solid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.app-header .app-header--title</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="w3-yellow">custom-script.js</div><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'If you see this alert, then your custom JavaScript script has run!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你运行 <code>app.py</code> 时，你的应用看起来应该是这样的：</p><p><img src="/dao/dash/zh-CN/ef498434c4c8/aa.png"></p><p>在自动添加<code>assets</code>时，你需要牢记以下几点:</p><ol><li>以下文件类型将自动包括:<br> a. CSS文件后缀为 <code>.css</code><br> b. 以 <code>.js</code> 作为后缀的 JavaScript 文件<br> c. 一个名为 <code>favicon.ico</code> 的文件(页面标签的图标)</li><li>Dash 将包括文件在字母数字顺序的文件名。因此，如果你需要确保文件名的顺序(例如 <code>10_typography.css</code>, <code>20_header.css</code>)，我们建议你在文件名前加上数字前缀。</li><li>你可以使用正则过滤器<code>app = dash.Dash(assets_ignore='.*ignored.*')</code>来忽略<code>assets</code>文件夹中的某些文件。这将阻止 Dash 加载包含上述模式的文件。</li><li>如果你想包含来自远程 URL 的CSS，请参阅下一节。</li><li>你的自定义 CSS 将包含在 Dash 组件 CSS 之后。</li><li>建议在 dash init 中添加<code>__name__</code>，以确保加载 <code>assets</code> 文件夹中的资源，例如：<code>app = dash.Dash(__name__, meta_tags=[...])</code>。当您通过其他命令行运行应用程序时(如 <code>flask</code> 命令或 <code>gunicorn/waitress</code>)，<code>__main__</code> 模块将不再位于 <code>app.py</code> 所在的位置。通过明确设置 <code>__name__</code>， <code>Dash</code> 将能够正确地找到相对 <code>assets</code> 文件夹。</li></ol><h2 id="添加外部-CSS-Javascript"><a href="#添加外部-CSS-Javascript" class="headerlink" title="添加外部 CSS / Javascript"></a>添加外部 CSS / Javascript</h2><p>你可以通过<code>external_stylesheets</code>和<code>external_scripts</code> init 关键字将托管在你的 Dash 应用程序上的资源添加到外部。</p><p>资源可以是字符串，也可以是包含标签属性(<code>src</code>、<code>integrity</code>、<code>crossorigin</code>等)的字典。你可以两者混合。</p><p>外部 css/js 文件在<code>assets</code>之前被加载。</p><p>例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token comment"># external JavaScript files</span>external_scripts <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.google-analytics.com/analytics.js'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'src'</span><span class="token punctuation">:</span> <span class="token string">'https://cdn.polyfill.io/v2/polyfill.min.js'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'src'</span><span class="token punctuation">:</span> <span class="token string">'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.10/lodash.core.js'</span><span class="token punctuation">,</span>        <span class="token string">'integrity'</span><span class="token punctuation">:</span> <span class="token string">'sha256-Qqd/EfdABZUcAxjOkMi8eGEivtdTkh3b65xCZL4qAQA='</span><span class="token punctuation">,</span>        <span class="token string">'crossorigin'</span><span class="token punctuation">:</span> <span class="token string">'anonymous'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment"># external CSS stylesheets</span>external_stylesheets <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://codepen.io/chriddyp/pen/bWLwgP.css'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'href'</span><span class="token punctuation">:</span> <span class="token string">'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css'</span><span class="token punctuation">,</span>        <span class="token string">'rel'</span><span class="token punctuation">:</span> <span class="token string">'stylesheet'</span><span class="token punctuation">,</span>        <span class="token string">'integrity'</span><span class="token punctuation">:</span> <span class="token string">'sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO'</span><span class="token punctuation">,</span>        <span class="token string">'crossorigin'</span><span class="token punctuation">:</span> <span class="token string">'anonymous'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>app <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>                external_scripts<span class="token operator">=</span>external_scripts<span class="token punctuation">,</span>                external_stylesheets<span class="token operator">=</span>external_stylesheets<span class="token punctuation">)</span>app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义-Dash-的文件或浏览器标签标题"><a href="#自定义-Dash-的文件或浏览器标签标题" class="headerlink" title="自定义 Dash 的文件或浏览器标签标题"></a>自定义 Dash 的文件或浏览器标签标题</h2><p>文档标题是出现在网页浏览器选项卡中的网页名称。</p><p>默认值是 <code>Dash</code>。</p><p>在 Dash 1.14.0 中，你可以使用 <code>title=</code> 关键字来定制这个标题:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Weekly Analytics'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="根据-URL-或选项卡动态更新文档标题"><a href="#根据-URL-或选项卡动态更新文档标题" class="headerlink" title="根据 URL 或选项卡动态更新文档标题"></a>根据 URL 或选项卡动态更新文档标题</h2><p>要动态设置文档标题，可以使用<code>clientside callback</code> 作为一个副作用更新 <code>document.title</code>。下面的示例设置 <code>document.title</code>的基础上，当前选择的选项卡。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash<span class="token keyword">from</span> dash<span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Output<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">import</span> dash_core_components <span class="token keyword">as</span> dccapp <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token punctuation">[</span>    html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'blank-output'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dcc<span class="token punctuation">.</span>Tabs<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'tabs-example'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'tab-1'</span><span class="token punctuation">,</span> children<span class="token operator">=</span><span class="token punctuation">[</span>        dcc<span class="token punctuation">.</span>Tab<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Tab one'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'tab-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        dcc<span class="token punctuation">.</span>Tab<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Tab two'</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'tab-2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>clientside_callback<span class="token punctuation">(</span>    <span class="token triple-quoted-string string">"""    function(tab_value) {        if (tab_value === 'tab-1') {            document.title = 'Tab 1'        } else if (tab_value === 'tab-2') {            document.title = 'Tab 2'        }    }    """</span><span class="token punctuation">,</span>    Output<span class="token punctuation">(</span><span class="token string">'blank-output'</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Input<span class="token punctuation">(</span><span class="token string">'tabs-example'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于 URL 更新页面将是类似的：回调的输入将是 <code>dcc.Location</code> 的 <code>pathname</code> 属性。关于 <code>dcc.Location</code>，请参阅 <a href="https://dash.plotly.com/urls">url 和多页应用程序</a>章节。</p><h2 id="定制或删除-Dash-的-quot-Updating-quot-消息"><a href="#定制或删除-Dash-的-quot-Updating-quot-消息" class="headerlink" title="定制或删除 Dash 的&quot;Updating...&quot;消息"></a>定制或删除 Dash 的<code>"Updating..."</code>消息</h2><p>当一个回调运行时，Dash 更新文档标题(出现在你的浏览器标签)与<code>"Updating..."</code>消息。</p><p>使用 <code>update_title=属性</code> 定制此消息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> update_title<span class="token operator">=</span><span class="token string">'Loading...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，通过设置<code>update_title=None</code>来阻止此消息的出现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> update_title<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自定义-Dash-的-HTML-index-模板"><a href="#自定义-Dash-的-HTML-index-模板" class="headerlink" title="自定义 Dash 的 HTML index 模板"></a>自定义 Dash 的 HTML index 模板</h2><p>Dash 的 UI 是通过 Dash 的 <code>React.js</code> 前端动态生成的。因此，在页面加载时，Dash提 供一个非常小的 HTML 模板字符串，其中包括渲染页面所需的 CSS 和 JavaScript 以及一些简单的 HTML 元标记。</p><p>这个简单的 HTML 字符串是可定制的。如果你想自定义这个字符串:</p><ul><li>定制页面中包含 CSS 或 JavaScript 的方式。例如，如果您想包含远程脚本，或者如果您想在 Dash 组件 CSS 之前包含 CSS</li><li>在你的应用程序中包含自定义元标记。注意，元标记也可以通过 <code>meta_tags</code> 参数添加(下面的例子)。</li><li>通过自己实例化 <code>DashRenderer</code> 类，包含一个自定义版本的<code>dash-renderer</code>。你可以通过下面的例子提供一个<code>hooks</code>配置对象来添加请求钩子。</li></ul><h3 id="Option-1-index-string"><a href="#Option-1-index-string" class="headerlink" title="Option 1 - index_string"></a>Option 1 - index_string</h3><p>添加一个<code>index_string</code>来修改默认的 HTML 索引模板：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> htmlexternal_stylesheets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://codepen.io/chriddyp/pen/bWLwgP.css'</span><span class="token punctuation">]</span>app <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> external_stylesheets<span class="token operator">=</span>external_stylesheets<span class="token punctuation">)</span>app<span class="token punctuation">.</span>index_string <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        {%metas%}        &lt;title&gt;{%title%}&lt;/title&gt;        {%favicon%}        {%css%}    &lt;/head&gt;    &lt;body&gt;        &lt;div&gt;My Custom header&lt;/div&gt;        {%app_entry%}        &lt;footer&gt;            {%config%}            {%scripts%}            {%renderer%}        &lt;/footer&gt;        &lt;div&gt;My Custom footer&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;'''</span>app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token string">'Simple Dash App'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>{%key%}</code>是模板变量，Dash 会用默认属性自动填充。可用的<code>key</code>是：</p><ul><li><code>{%metas%}</code> (optional)：注册的<code>meta</code>标签包含在<code>dash.Dash</code>中的<code>meta_tags</code>参数中。</li><li><code>{%favicon%}</code> (optional)：如果在<code>assets</code>文件夹中找到<code>favicon</code>链接标签。</li><li><code>{%css%}</code> (optional)：&lt;link&gt; CSS 资源的标签。这些资源包括 Dash 组件库CSS资源以及在<code>assets</code>文件夹中找到的任何 CSS 资源。</li><li><code>{%title%}</code> (optional)：页面内容 &lt;title&gt;标签。了解更多关于<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title">&lt;title/&gt;</a></li><li><code>{%config%}</code> (required)：一个自动生成的标签，包括从 Dash 的后端到前端的配置设置(<code>dash-renderer</code>)。</li><li><code>{%app_entry%}</code> (required)：渲染 Dash 布局的容器。</li><li><code>{%scripts%}</code> (required)：渲染 Dash 应用所需的 JavaScript 脚本集。这包括 Dash 组件的 JavaScript 文件以及在 <code>assets</code> 文件夹中找到的任何 JavaScript 文件。</li><li><code>{%renderer%}</code> (required)：通过调用<code>new DashRenderer()</code>实例化<code>dash-renderer</code>的<code>JavaScript</code>脚本</li></ul><h3 id="Option-2-interpolate-index"><a href="#Option-2-interpolate-index" class="headerlink" title="Option 2 - interpolate_index"></a>Option 2 - interpolate_index</h3><p>如果你的 HTML 内容不是静态的，或者你想 introspect 或修改模板变量，那么你可以覆盖 <code>Dash.interpolate_index</code> 方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> html<span class="token keyword">class</span> <span class="token class-name">CustomDash</span><span class="token punctuation">(</span>dash<span class="token punctuation">.</span>Dash<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">interpolate_index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Inspect the arguments by printing them</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token triple-quoted-string string">'''        &lt;!DOCTYPE html&gt;        &lt;html&gt;            &lt;head&gt;                &lt;title&gt;My App&lt;/title&gt;            &lt;/head&gt;            &lt;body&gt;                &lt;div id="custom-header"&gt;My custom header&lt;/div&gt;                {app_entry}                {config}                {scripts}                {renderer}                &lt;div id="custom-footer"&gt;My custom footer&lt;/div&gt;            &lt;/body&gt;        &lt;/html&gt;        '''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            app_entry<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'app_entry'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            config<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            scripts<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'scripts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            renderer<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'renderer'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>app <span class="token operator">=</span> CustomDash<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token string">'Simple Dash App'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不像<code>index_string</code>方法，我们使用模板字符串变量，传递到<code>interpolate_index</code>的关键字变量已经被求值了。</p><p>在上面的例子中，当我们打印<code>interpolate_index</code>的输入参数时，应该会看到这样的输出：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    'title'<span class="token operator">:</span> 'Dash'<span class="token punctuation">,</span>    'app_entry'<span class="token operator">:</span> '\n&lt;div id=<span class="token string">"react-entry-point"</span>&gt;\n    &lt;div class=<span class="token string">"_dash-loading"</span>&gt;\n        Loading...\n    &lt;/div&gt;\n&lt;/div&gt;\n'<span class="token punctuation">,</span>    'favicon'<span class="token operator">:</span> ''<span class="token punctuation">,</span>    'metas'<span class="token operator">:</span> '&lt;meta charset=<span class="token string">"UTF-8"</span>/&gt;'<span class="token punctuation">,</span>    'scripts'<span class="token operator">:</span> '&lt;script src=<span class="token string">"https://unpkg.com/react@15.4.2/dist/react.min.js"</span>&gt;&lt;/script&gt;\n&lt;script src=<span class="token string">"https://unpkg.com/react-dom@15.4.2/dist/react-dom.min.js"</span>&gt;&lt;/script&gt;\n&lt;script src=<span class="token string">"https://unpkg.com/dash-html-components@0.14.0/dash_html_components/bundle.js"</span>&gt;&lt;/script&gt;\n&lt;script src=<span class="token string">"https://unpkg.com/dash-renderer@0.20.0/dash_renderer/bundle.js"</span>&gt;&lt;/script&gt;'<span class="token punctuation">,</span>    'renderer'<span class="token operator">:</span> '&lt;script id=<span class="token string">"_dash-renderer"</span> type=<span class="token string">"application/javascript"</span>&gt;var renderer = new DashRenderer();&lt;/script&gt;'<span class="token punctuation">,</span>    'config'<span class="token operator">:</span> '&lt;script id=<span class="token string">"_dash-config"</span> type=<span class="token string">"application/json"</span>&gt;<span class="token punctuation">{</span><span class="token property">"requests_pathname_prefix"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token property">"url_base_pathname"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">}</span>&lt;/script&gt;'<span class="token punctuation">,</span>    'css'<span class="token operator">:</span> ''<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>scripts</code>和<code>css</code>键的值可能会不同，这取决于您包含的组件库或<code>assets</code>文件夹中的文件。</p><h3 id="使用请求钩子定制-dash-renderer"><a href="#使用请求钩子定制-dash-renderer" class="headerlink" title="使用请求钩子定制 dash-renderer"></a>使用请求钩子定制 dash-renderer</h3><p>为了实例化你自己的<code>dash-renderer</code>版本，你可以覆盖 Dash 的HTML Index Template，并提供你自己的脚本来代替标准脚本。这个脚本应该在某处调用<code>var renderer = new DashRenderer();</code>，它实例化了<code>DashRenderer</code>类。当你设置<code>app.index_string</code>时，你可以将这个脚本添加到你的 index HTML 中，或者你可以像这样简单地覆盖<code>app.renderer</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> htmlexternal_stylesheets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://codepen.io/chriddyp/pen/bWLwgP.css'</span><span class="token punctuation">]</span>app <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> external_stylesheets<span class="token operator">=</span>external_stylesheets<span class="token punctuation">)</span>app<span class="token punctuation">.</span>renderer <span class="token operator">=</span> <span class="token string">'var renderer = new DashRenderer();'</span>app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token string">'Simple Dash App'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你提供你自己的<code>DashRenderer</code>时，你也可以传入一个钩子对象来保存<code>request_pre</code>和<code>request_post</code>函数。这些请求钩子将在<code>Dash</code>向其后端发出请求之前和之后被触发。这里有一个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> htmlexternal_stylesheets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://codepen.io/chriddyp/pen/bWLwgP.css'</span><span class="token punctuation">]</span>app <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> external_stylesheets<span class="token operator">=</span>external_stylesheets<span class="token punctuation">)</span>app<span class="token punctuation">.</span>renderer <span class="token operator">=</span> <span class="token triple-quoted-string string">'''var renderer = new DashRenderer({    request_pre: (payload) =&gt; {        // print out payload parameter        console.log(payload);    },    request_post: (payload, response) =&gt; {        // print out payload and response parameter        console.log(payload);        console.log(response);    }})'''</span>app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token string">'Simple Dash App'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，<code>request_pre</code>函数将正在发送的请求的有效负载作为其参数，而<code>request_post</code>函数将有效负载和服务器的响应同时作为参数。这些可以在我们的功能中改变，允许你修改<code>Dash</code>发送给服务器的响应和请求对象。在上面的例子中，<code>request_pre</code>函数在每次服务器调用之前被触发，在这个例子中，它将<code>console.log()</code>请求参数。<code>request_post</code>函数将在每次服务器调用后触发，在我们的示例中还将打印出响应参数。</p><h2 id="定制-Meta-标记"><a href="#定制-Meta-标记" class="headerlink" title="定制 Meta 标记"></a>定制 Meta 标记</h2><p>要在你的应用程序中添加自定义元标签，你可以覆盖<code>Dash</code>的 HTML 索引模板。另外，<code>Dash</code> 提供了一个快捷方式：你可以直接在 <code>Dash</code> 构造函数中指定 <code>meta</code> 标签：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dash<span class="token keyword">import</span> dash_html_components <span class="token keyword">as</span> htmlapp <span class="token operator">=</span> dash<span class="token punctuation">.</span>Dash<span class="token punctuation">(</span>meta_tags<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token comment"># A description of the app, used by e.g.</span>    <span class="token comment"># search engines when displaying search results.</span>    <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'description'</span><span class="token punctuation">,</span>        <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'My description'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment"># A tag that tells Internet Explorer (IE)</span>    <span class="token comment"># to use the latest renderer version available</span>    <span class="token comment"># to that browser (e.g. Edge)</span>    <span class="token punctuation">{</span>        <span class="token string">'http-equiv'</span><span class="token punctuation">:</span> <span class="token string">'X-UA-Compatible'</span><span class="token punctuation">,</span>        <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'IE=edge'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment"># A tag that tells the browser not to scale</span>    <span class="token comment"># desktop widths to fit mobile screens.</span>    <span class="token comment"># Sets the width of the viewport (browser)</span>    <span class="token comment"># to the width of the device, and the zoom level</span>    <span class="token comment"># (initial scale) to 1.</span>    <span class="token comment">#</span>    <span class="token comment"># Necessary for "true" mobile support.</span>    <span class="token punctuation">{</span>      <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'viewport'</span><span class="token punctuation">,</span>      <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'width=device-width, initial-scale=1.0'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>layout <span class="token operator">=</span> html<span class="token punctuation">.</span>Div<span class="token punctuation">(</span><span class="token string">'Simple Dash App'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run_server<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      
      <category domain="https://xinetzone.github.io/tags/dash/">dash</category>
      
      
      <comments>https://xinetzone.github.io/dash/zh-CN/ef498434c4c8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Faculty 基础</title>
      <link>https://xinetzone.github.io/faculty/zh-CN/802ec9bb8beb.html</link>
      <guid>https://xinetzone.github.io/faculty/zh-CN/802ec9bb8beb.html</guid>
      <pubDate>Tue, 11 May 2021 03:06:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://docs.faculty.ai/#&quot;&gt;Faculty 文档&lt;/a&gt;|&lt;a href=&quot;https://faculty.ai/platform/&quot;&gt;平台&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Faculty 是为需要强大计算、快速配置、安全协作和易于部署的数</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://docs.faculty.ai/#">Faculty 文档</a>|<a href="https://faculty.ai/platform/">平台</a></p><p>Faculty 是为需要强大计算、快速配置、安全协作和易于部署的数据科学家提供的云平台。Faculty 允许您与团队成员安全地共享数据和代码，发布版本控制的分析报告，并通过触摸按钮访问 Jupyter 环境。无限文件上传、自动数据探索和可伸缩计算能力等功能意味着更少的时间访问和清理数据，更多的时间构建模型。然而，当你需要它的时候，你可以打开一个终端不受限制地访问你的服务器。Faculty 环境预先安装了用于数据科学的 Python 库，包括 Pandas 和 NumPy 等公共库，以及 <a href="https://docs.faculty.ai/libraries/lens.html#lens-library">Lens</a> 和 <a href="https://docs.faculty.ai/libraries/customer_intelligence/getting_started.html">Customer Intelligence</a> 等仅在 Faculty 可用的库。</p><h2 id="快速开发模型"><a href="#快速开发模型" class="headerlink" title="快速开发模型"></a>快速开发模型</h2><p>无论您的数据科学团队是为决策者带来见解、开发人工智能产品还是在研究前沿开辟新领域，Faculty 平台都将为您提供完成工作所需的生产力特性、开源工具的灵活性和弹性计算资源的可伸缩性。</p><p>。。。</p>]]></content:encoded>
      
      
      
      
      <comments>https://xinetzone.github.io/faculty/zh-CN/802ec9bb8beb.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PyTorch 讨论</title>
      <link>https://xinetzone.github.io/pytorch/zh-CN/83b18c7171db.html</link>
      <guid>https://xinetzone.github.io/pytorch/zh-CN/83b18c7171db.html</guid>
      <pubDate>Mon, 10 May 2021 15:07:12 GMT</pubDate>
      
        
        
      <description>&lt;ol&gt;
&lt;li&gt;可以认为 &lt;code&gt;a.reshape = a.view() + a.contiguous().view()&lt;/code&gt;，所以建议仅仅使用 &lt;code&gt;reshape&lt;/code&gt; 即可。（参考&lt;a href=&quot;https://blog.csdn.net/F</description>
        
      
      
      
      <content:encoded><![CDATA[<ol><li>可以认为 <code>a.reshape = a.view() + a.contiguous().view()</code>，所以建议仅仅使用 <code>reshape</code> 即可。（参考<a href="https://blog.csdn.net/Flag_ing/article/details/109129752">PyTorch：view() 与 reshape() 区别详解</a>）</li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://xinetzone.github.io/pytorch/zh-CN/83b18c7171db.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>简单的梯度运算</title>
      <link>https://xinetzone.github.io/xint/zh-CN/9d900d55bcfe.html</link>
      <guid>https://xinetzone.github.io/xint/zh-CN/9d900d55bcfe.html</guid>
      <pubDate>Tue, 04 May 2021 08:44:49 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h2&gt;&lt;p&gt;有矩阵 $\mathbf{A} = [\mathbf{a}_1, \mathbf{a}_2, \cdots, \mathbf{a}_m]^T</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>有矩阵 $\mathbf{A} = [\mathbf{a}_1, \mathbf{a}_2, \cdots, \mathbf{a}_m]^T \in \mathbb{R}^{m \times n}$，和向量 $\mathbf{x} = [x_1, x_2, \cdots, x_n]^T \in \mathbb{R}^{n}$，则有：</p><div>$$$$\mathbf{Ax} = \begin{bmatrix}   \mathbf{a}_1^T \mathbf{x} \\   \mathbf{a}_2^T \mathbf{x} \\   \vdots \\   \mathbf{a}_m^T \mathbf{x}\end{bmatrix}$$</div><p>又有：</p><div>$$\nabla_{\mathbf{x}} \mathbf{a}_i^T \mathbf{x} = \mathbf{a}_i$$$$ \mathbf{1}^T \mathbf{A} \mathbf{x} = \langle \mathbf{1}, \mathbf{Ax} \rangle = \langle \mathbf{A}^T \mathbf{1}, \mathbf{x} \rangle$$</div><p>所以，</p><div>$$\nabla_{\mathbf{x}} \mathbf{1}^T \mathbf{A} \mathbf{x} = \nabla_{\mathbf{x}} \sum_{i=1}^m \mathbf{a}_i^T \mathbf{x} = \sum_{i=1}^m \mathbf{a}_i = \mathbf{A}^T \mathbf{1}_{m \times 1} = \mathbf{A}^T \mathbf{1}$$</div><p>这样，有：</p><div>$$\nabla_{\mathbf{x}} \mathbf{Ax} = \nabla_{\mathbf{x}} \langle  \mathbf{A}^T, \mathbf{x} \mathbf{1}^T \rangle = \mathbf{A}^T$$$$\nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{A} = \mathbf{A}$$$$\nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{A} \mathbf{x} = (\mathbf{A} + \mathbf{A}^\top)\mathbf{x}$$$$\nabla_{\mathbf{x}} \|\mathbf{x} \|^2 = \nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{x} = 2\mathbf{x}$$$$\nabla_{\mathbf{X}} \|\mathbf{X} \|_F^2 = 2\mathbf{X}$$</div><p>即：</p><div>$$\nabla_{\mathbf{x}} \langle f(\mathbf{x}), g(\mathbf{x}) \rangle = \langle \nabla{_\mathbf{x}} f(\mathbf{x}), g(\mathbf{x}) \rangle + \langle f(\mathbf{x}), \nabla_{\mathbf{x}} g(\mathbf{x}) \rangle$$</div><p>下面看一个例子：</p><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> mxnet <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--3" name="tab-set--0" type="radio">        <label for="tab-set--0-input--3">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> torch <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>    </div></article><p>创建张量 $\mathbf{x}$：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算函数 $y = 2\mathbf{x}^{\top}\mathbf{x}$ 的梯度：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--1-input--1" name="tab-set--1" type="radio">        <label for="tab-set--1-input--1">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 我们通过调用`attach_grad`来为一个张量的梯度分配内存</span>x<span class="token punctuation">.</span>attach_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 在我们计算关于`x`的梯度后，我们将能够通过'grad'属性访问它，它的值被初始化为0</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--1-input--2" name="tab-set--1" type="radio">        <label for="tab-set--1-input--2">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        </div>        <input id="tab-set--1-input--3" name="tab-set--1" type="radio">        <label for="tab-set--1-input--3">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 等价于 `x = torch.arange(4.0, requires_grad=True)`</span>x<span class="token punctuation">.</span>grad  <span class="token comment"># 默认值是None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        </div>    </div></article><p>现在让计算 $y$：</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--2-input--1" name="tab-set--2" type="radio">    <label for="tab-set--2-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> mxnet <span class="token keyword">import</span> autograd<span class="token comment"># 把代码放到`autograd.record`内，以建立计算图</span><span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>T @ x<span class="token builtin">float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--2-input--2" name="tab-set--2" type="radio">    <label for="tab-set--2-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 把所有计算记录在磁带上</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> tf<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>x<span class="token punctuation">)</span> @ x<span class="token builtin">float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--2-input--3" name="tab-set--2" type="radio">    <label for="tab-set--2-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>T @ x<span class="token builtin">float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>    </div></div><p><output>28.0</output></p><p>接下来，我们可以通过调用反向传播函数来自动计算 $y$ 关于 $\mathbf{x}$ 每个分量的梯度，并打印这些梯度：</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--3-input--1" name="tab-set--3" type="radio">    <label for="tab-set--3-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python">y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>    <output>    array([[ 0.],       [ 4.],       [ 8.],       [12.]])</output>    </div>    <input id="tab-set--3-input--2" name="tab-set--3" type="radio">    <label for="tab-set--3-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 把所有计算记录在磁带上</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> tf<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>x<span class="token punctuation">)</span> @ x<span class="token builtin">float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>    <output>    &lt;tf.Tensor: shape=(4, 1), dtype=float64, numpy=    array([[ 0.],        [ 4.],        [ 8.],        [12.]])&gt;</output>    </div>    <input id="tab-set--3-input--3" name="tab-set--3" type="radio">    <label for="tab-set--3-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python">y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>    <output>    tensor([[ 0.],        [ 8.],        [16.],        [24.]])</output>    </div></div><p>可以计算 $\mathbf{x}$ 的另一个函数：</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--4-input--1" name="tab-set--4" type="radio">    <label for="tab-set--4-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad  <span class="token comment"># 被新计算的梯度覆盖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>    <output>    array([[1.],       [1.],       [1.],       [1.]])    </output>    </div>    <input id="tab-set--4-input--2" name="tab-set--4" type="radio">    <label for="tab-set--4-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>x<span class="token punctuation">)</span>t<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment"># 被新计算的梯度覆盖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>    <output>    &lt;tf.Tensor: shape=(4, 1), dtype=float64, numpy=    array([[1.],        [1.],        [1.],        [1.]])&gt;    </output>    </div>    <input id="tab-set--4-input--3" name="tab-set--4" type="radio">    <label for="tab-set--4-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在默认情况下，PyTorch会累积梯度，我们需要清除之前的值</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>    <output>    tensor([[1.],        [1.],        [1.],        [1.]])    </output>    </div></div><p>注意：对于非标量变量的反向传播，MXNet/TensorFlow 直接调用相应的函数即可获得梯度，但是 Pytorch 不支持直接对非标量进行反向传播，故而需要先对其求和，再求梯度。比如：</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--5-input--1" name="tab-set--5" type="radio">    <label for="tab-set--5-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 当我们对向量值变量`y`（关于`x`的函数）调用`backward`时，</span><span class="token comment"># 将通过对`y`中的元素求和来创建一个新的标量变量。然后计算这个标量变量相对于`x`的梯度</span><span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">*</span> x  <span class="token comment"># `y`是一个向量</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad  <span class="token comment"># 等价于y = sum(x * x)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--5-input--2" name="tab-set--5" type="radio">    <label for="tab-set--5-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">*</span> xt<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment"># 等价于 `y = tf.reduce_sum(x * x)`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--5-input--3" name="tab-set--5" type="radio">    <label for="tab-set--5-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对非标量调用`backward`需要传入一个`gradient`参数，该参数指定微分函数关于`self`的梯度。</span><span class="token comment">## 在我们的例子中，我们只想求偏导数的和，所以传递一个1的梯度是合适的</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token comment"># 等价于y.backward(torch.ones(len(x)))</span>y<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div></div><h2 id="分离计算"><a href="#分离计算" class="headerlink" title="分离计算"></a>分离计算</h2><p>有时，我们希望将某些计算移动到记录的计算图之外。例如，假设 $\mathbf{y}$ 是作为 $\mathbf{x}$ 的函数计算的，而 $\mathbf{z}$ 则是作为 $\mathbf{y}$ 和 $\mathbf{x}$ 的函数计算的。现在，想象一下，我们想计算 $\mathbf{z}$ 关于 $\mathbf{x}$ 的梯度，但由于某种原因，我们希望将 $\mathbf{y}$ 视为一个常数，并且只考虑到 $\mathbf{x}$ 在 $\mathbf{y}$ 被计算后发挥的作用。</p><p>在这里，我们可以分离 $\mathbf{y}$ 来返回一个新变量 $u$，该变量与 $\mathbf{y}$ 具有相同的值，但截断计算图中关于如何计算 $\mathbf{y}$ 的任何信息。换句话说，梯度不会向后流经 $u$ 到 $\mathbf{x}$。因此，下面的反向传播函数计算 $\mathbf{z} = u * \mathbf{x}$ 关于 $\mathbf{x}$ 的偏导数，同时将 $u$ 作为常数处理，而不是 $\mathbf{z} = \mathbf{x} * \mathbf{x} * \mathbf{x}$ 关于 $\mathbf{x}$ 的偏导数。</p><div class="tab-set w3-light-grey">    <input checked="True" id="tab-set--6-input--1" name="tab-set--6" type="radio">    <label for="tab-set--6-input--1">MXNet</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">*</span> x    u <span class="token operator">=</span> y<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>    z <span class="token operator">=</span> u <span class="token operator">*</span> xz<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad <span class="token operator">==</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--6-input--2" name="tab-set--6" type="radio">    <label for="tab-set--6-input--2">TensorFlow</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置 `persistent=True` 来运行 `t.gradient`多次</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span>persistent<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">*</span> x    u <span class="token operator">=</span> tf<span class="token punctuation">.</span>stop_gradient<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    z <span class="token operator">=</span> u <span class="token operator">*</span> xx_grad <span class="token operator">=</span> t<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>z<span class="token punctuation">,</span> x<span class="token punctuation">)</span>x_grad <span class="token operator">==</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div>    <input id="tab-set--6-input--3" name="tab-set--6" type="radio">    <label for="tab-set--6-input--3">PyTorch</label>    <div class="tab-content w3-padding">    <pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">*</span> xu <span class="token operator">=</span> y<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>z <span class="token operator">=</span> u <span class="token operator">*</span> xz<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad <span class="token operator">==</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    </div></div><h2 id="通用微分函数"><a href="#通用微分函数" class="headerlink" title="通用微分函数"></a>通用微分函数</h2><p>令 $f: \mathbb{R}^n \rightarrow \mathbb{R}$，$\mathbf{x} = [x_1, x_2, \ldots, x_n]^\top$，有</p><div>$$\nabla_{\mathbf{x}} f(\mathbf{x}) = \bigg[\frac{\partial f(\mathbf{x})}{\partial x_1}, \frac{\partial f(\mathbf{x})}{\partial x_2}, \ldots, \frac{\partial f(\mathbf{x})}{\partial x_n}\bigg]^\top$$</div><p>若有 $\mathbf{y} = [y_1, y_2, \ldots, y_m]^\top$，$x \in \mathbb{R}$，则：</p><div>$$\frac{\partial \mathbf{y}}{\partial x} = \bigg[\frac{\partial y_1}{\partial x}, \frac{\partial y_2}{\partial x}, \ldots, \frac{\partial y_m}{\partial x}\bigg]^\top$$</div><p>还有，</p><div>$$\frac{\partial \mathbf{y}}{\partial \mathbf{x}} = \bigg[\frac{\partial y_1}{\partial \mathbf{x}}, \frac{\partial y_2}{\partial \mathbf{x}}, \ldots, \frac{\partial y_m}{\partial \mathbf{x}}\bigg]^\top = \begin{bmatrix} \frac{\partial y_1}{\partial x_1} &amp; \frac{\partial y_1}{\partial x_2} &amp;\cdots &amp;\frac{\partial y_1}{\partial x_n} \\\frac{\partial y_2}{\partial x_1} &amp; \frac{\partial y_2}{\partial x_2} &amp; \cdots &amp; \frac{\partial y_2}{\partial x_n}\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\\frac{\partial y_m}{\partial x_1} &amp; \frac{\partial y_m}{\partial x_2} &amp; \cdots &amp; \frac{\partial y_m}{\partial x_n}\end{bmatrix}$$</div>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/xint/">xint</category>
      
      
      <category domain="https://xinetzone.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      <comments>https://xinetzone.github.io/xint/zh-CN/9d900d55bcfe.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>统一 MXNet，PyTorch，TensorFlow 接口</title>
      <link>https://xinetzone.github.io/xint/zh-CN/7a4a91cc735e.html</link>
      <guid>https://xinetzone.github.io/xint/zh-CN/7a4a91cc735e.html</guid>
      <pubDate>Tue, 04 May 2021 02:44:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;为了提供一个统一的接口，我在 GitHub 上维护了一个通用 API：&lt;a href=&quot;https://github.com/xinetzone/atom&quot;&gt;atom&lt;/a&gt;。可以使用 &lt;code&gt;pip&lt;/code&gt; 安装。本仓库借鉴了 &lt;a href=&quot;https://</description>
        
      
      
      
      <content:encoded><![CDATA[<p>为了提供一个统一的接口，我在 GitHub 上维护了一个通用 API：<a href="https://github.com/xinetzone/atom">atom</a>。可以使用 <code>pip</code> 安装。本仓库借鉴了 <a href="https://zh-v2.d2l.ai/">d2l</a> 和 <a href="https://tf.wiki/zh_hans/">简单粗暴 TensorFlow 2</a>。</p><p>首先导入一些库：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--1" name="tab-set--0" type="radio">        <label for="tab-set--0-input--1">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> mxnet <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--2" name="tab-set--0" type="radio">        <label for="tab-set--0-input--2">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>        <input id="tab-set--0-input--3" name="tab-set--0" type="radio">        <label for="tab-set--0-input--3">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xint <span class="token keyword">import</span> utils<span class="token keyword">from</span> xint <span class="token keyword">import</span> torch <span class="token keyword">as</span> xintnp <span class="token operator">=</span> xint<span class="token punctuation">.</span>np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        </div>    </div></article><h2 id="简单的使用-atom"><a href="#简单的使用-atom" class="headerlink" title="简单的使用 atom"></a>简单的使用 atom</h2><p>由于 <code>np</code> 已经绑定了各自的深度学习环境，且三种框架及其相似，所以，下文如果框架之间没有分歧，统一使用没有指示环境的模式，比如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">10000</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n<span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你可以分别查看各自环境的数据：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--4" name="tab-set--1" type="radio">        <label for="tab-set--0-input--4">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>            <output>array([1., 1., 1., ..., 1., 1., 1.])</output>        </div>        <input id="tab-set--0-input--5" name="tab-set--1" type="radio">        <label for="tab-set--0-input--5">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>            <output>&lt;ndarray&lt;&lt;tf.Tensor: shape=(10000,), dtype=float64, numpy=array([1., 1., 1., ..., 1., 1., 1.])&gt;&gt;</output>        </div>        <input id="tab-set--0-input--6" name="tab-set--1" type="radio">        <label for="tab-set--0-input--6">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>            <output>tensor([1., 1., 1.,  ..., 1., 1., 1.])</output>        </div>    </div></article><p>可以看到不同环境表示的不同的 <code>np</code>，可以无缝的使用它。</p><p><code>atom</code> 定义了一个计时器 <code>Timer</code>，下面测试矢量化的好处。</p><ol><li>使用 <code>for</code> 循环：</li></ol><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--7" name="tab-set--2" type="radio">        <label for="tab-set--0-input--7">MXNet</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span>timer <span class="token operator">=</span> utils<span class="token punctuation">.</span>Timer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> sec'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>            <output>'2.83601 sec'</output>        </div>        <input id="tab-set--0-input--8" name="tab-set--2" type="radio">        <label for="tab-set--0-input--8">TensorFlow</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfc <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>timer <span class="token operator">=</span> utils<span class="token punctuation">.</span>Timer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>assign<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> sec'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>            <output>'3.42657 sec'</output>        </div>        <input id="tab-set--0-input--9" name="tab-set--2" type="radio">        <label for="tab-set--0-input--9">PyTorch</label>        <div class="tab-content w3-padding">            <pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span>timer <span class="token operator">=</span> utils<span class="token punctuation">.</span>Timer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> sec'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>            <output>'0.13695 sec'</output>        </div>    </div></article><ol start="2"><li>使用重载的 <code>+</code> 运算符来计算按张量的和。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">timer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>d <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.9f</span><span class="token punctuation">}</span></span><span class="token string"> sec'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出的时间有点差异，但是都很快：</p><article>    <div class="tab-set w3-light-grey">        <input checked="True" id="tab-set--0-input--10" name="tab-set--3" type="radio">        <label for="tab-set--0-input--10">MXNet</label>        <div class="tab-content w3-padding">            <output>'0.0009992 sec'</output>        </div>        <input id="tab-set--0-input--11" name="tab-set--3" type="radio">        <label for="tab-set--0-input--11">TensorFlow</label>        <div class="tab-content w3-padding">            <output>'0.000999451 sec'</output>        </div>        <input id="tab-set--0-input--12" name="tab-set--3" type="radio">        <label for="tab-set--0-input--12">PyTorch</label>        <div class="tab-content w3-padding">            <output>'0.000944614 sec'</output>        </div>    </div></article><p>可以看出矢量化对运算速度的提升是数量级的。</p><h2 id="正态分布与平方损失"><a href="#正态分布与平方损失" class="headerlink" title="正态分布与平方损失"></a>正态分布与平方损失</h2><p><strong>正态分布</strong>（normal distribution），也被称为 <strong>高斯分布</strong>（Gaussian distribution），最早由德国数学家高斯（Gauss）应用于天文学研究。简单的说，若随机变量 $x$ 具有均值 $\mu$ 和方差 $\sigma^2$（标准差 $\sigma$），其正态分布概率密度函数如下：</p><section>$$p(x) = \frac{1}{\sqrt{2 \pi \sigma^2}} \exp\left(-\frac{1}{2 \sigma^2} (x - \mu)^2\right).$$</section><p>使用 <code>np</code> 可以实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> sigma<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> sigma<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p <span class="token operator">*</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">/</span> sigma<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mu<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可视化正态分布：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token comment"># 均值和标准差对</span>params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>utils<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span>normal<span class="token punctuation">(</span>x<span class="token punctuation">,</span> mu<span class="token punctuation">,</span> sigma<span class="token punctuation">)</span> <span class="token keyword">for</span> mu<span class="token punctuation">,</span> sigma <span class="token keyword">in</span> params<span class="token punctuation">]</span><span class="token punctuation">,</span> xlabel<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span>           ylabel<span class="token operator">=</span><span class="token string">'p(x)'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           legend<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'mean </span><span class="token interpolation"><span class="token punctuation">{</span>mu<span class="token punctuation">}</span></span><span class="token string">, std </span><span class="token interpolation"><span class="token punctuation">{</span>sigma<span class="token punctuation">}</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> mu<span class="token punctuation">,</span> sigma <span class="token keyword">in</span> params<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><output></output><img src="/dao/xint/zh-CN/7a4a91cc735e/output_2_0.svg"></p><p>改变均值会产生沿 $x$ 轴的偏移，增加方差将会分散分布、降低其峰值。</p><p>利用<strong>均方误差损失</strong>函数（简称<strong>均方损失</strong>）可以用于线性回归的一个原因是：假设观测 $\mathbf{x}$ 中包含噪声，其中噪声服从正态分布。噪声正态分布如下式:</p><section>$$\tag{1.1} y = \mathbf{w}^\top \mathbf{x} + b + \epsilon \text{ where } \epsilon \sim \mathcal{N}(0, \sigma^2).$$</section><p>因此，我们现在可以写出通过给定的观测 $\mathbf{x}$  到特定 $y$ 的似然（likelihood）：</p><section>$$\tag{1.2} P(y \mid \mathbf{x}) = \frac{1}{\sqrt{2 \pi \sigma^2}} \exp\left(-\frac{1}{2 \sigma^2} (y - \mathbf{w}^\top \mathbf{x} - b)^2\right).$$</section><p>根据最大似然估计法，参数 $\mathbf{w}$ 和 $b$ 的最优值是使整个数据集的似然最大的值：</p><section>$$\tag{1.3} P(\mathbf y \mid \mathbf X) = \prod_{i=1}^{n} p(y^{(i)}|\mathbf{x}^{(i)}).$$</section><p>根据最大似然估计法选择的估计量称为<strong>最大似然估计量</strong> 。为了更好的计算，可以<strong>最小化负对数似然</strong> $-\log P(\mathbf y \mid \mathbf X)$。由此可以得到的数学公式是：</p><section>$$\tag{1.4} -\log P(\mathbf y \mid \mathbf X) = \sum_{i=1}^n \frac{1}{2} \log(2 \pi \sigma^2) + \frac{1}{2 \sigma^2} \left(y^{(i)} - \mathbf{w}^\top \mathbf{x}^{(i)} - b\right)^2.$$</section><p>现在我们只需要假设 $\sigma$ 是某个固定常数就可以忽略第一项，因为第一项不依赖于 $\mathbf{w}$ 和 $b$。现在第二项除了常数 $\frac{1}{\sigma^2}$ 外，其余部分和前面介绍的平方误差损失是一样的。因此，<span class="w3-card w3-pale-blue">在高斯噪声的假设下，最小化均方误差等价于对线性模型的最大似然估计</span>。</p>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/xint/">xint</category>
      
      
      <category domain="https://xinetzone.github.io/tags/Python/">Python</category>
      
      <category domain="https://xinetzone.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      <comments>https://xinetzone.github.io/xint/zh-CN/7a4a91cc735e.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-github-pages</title>
      <link>https://xinetzone.github.io/post/zh-CN/23dd9200e1e9.html</link>
      <guid>https://xinetzone.github.io/post/zh-CN/23dd9200e1e9.html</guid>
      <pubDate>Fri, 30 Apr 2021 15:23:54 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;参考 &lt;a href=&quot;https://hexo.io/docs/github-pages&quot;&gt;GitHub Pages | Hexo&lt;/a&gt; 配置。&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>参考 <a href="https://hexo.io/docs/github-pages">GitHub Pages | Hexo</a> 配置。</p>]]></content:encoded>
      
      
      
      
      <comments>https://xinetzone.github.io/post/zh-CN/23dd9200e1e9.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>微精通</title>
      <link>https://xinetzone.github.io/mircromastery/zh-CN/f0e28335bb89.html</link>
      <guid>https://xinetzone.github.io/mircromastery/zh-CN/f0e28335bb89.html</guid>
      <pubDate>Fri, 30 Apr 2021 00:09:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;发掘兴趣+识别重心+立体学习+内行经验=无限可能&lt;/p&gt;
&lt;p&gt;《微精通》 作者：罗伯特．特威格尔&lt;/p&gt;
&lt;h2 id=&quot;什么是“微精通”&quot;&gt;&lt;a href=&quot;#什么是“微精通”&quot; class=&quot;headerlink&quot; title=&quot;什么是“微精通”&quot;&gt;&lt;/a&gt;什么是“微</description>
        
      
      
      
      <content:encoded><![CDATA[<p>发掘兴趣+识别重心+立体学习+内行经验=无限可能</p><p>《微精通》 作者：罗伯特．特威格尔</p><h2 id="什么是“微精通”"><a href="#什么是“微精通”" class="headerlink" title="什么是“微精通”"></a>什么是“微精通”</h2><p><dfn class="xin-term">微精通</dfn> 是一种完整、独立的<strong>实践体系</strong>，但也可以扩展到更大的领域中。</p><p>你可以先精通一件小事儿，然后把它做大，也可以二者都做。</p><p><dfn class="xin-term">微精通</dfn> 可被<strong>复验</strong>，且往往<strong>能够取得成功</strong>。它的实践本身就是令人愉悦的过程。你可以试着去实践。<br><dfn class="xin-term">微精通</dfn>，它有一定的弹性，可以对其进行调整。同时，当你用一种三维立体的方法开展学习时，大脑中的各种感觉神经元也会被调动起来，变得活跃。</p><div class="w3-pale-yellow w3-card-4">心理学家米哈里·契克森米哈赖定义 <dfn class="xin-term">心流</dfn> 为一种将个体注意力完全投注在某活动上的感觉；心流产生时同时会有高度的兴奋及充实感。</div><div class="w3-pale-yellow w3-margin-top w3-card-4"><p><dfn class="xin-term">精神熵</dfn>（psychic entropy）：参考物理学中的熵，精神熵是用于衡量意识的无序程度的。每当资讯对意识本身的信息构成威胁，就会发生内在失序的现象，这种失序会造成意识的混乱和无序。为了衡量这种意识的混乱程度，米哈里提出了精神熵的概念。</p><p>对于我们个人而言，如果长期的意识混乱和精力不集中，并且自身没有对于意识和注意力的管理。那么如果这种情况维持过久，意识会越来越无序，越来越无法集中注意力，势必会对自己的工作与生活产生不小的影响。</p><p>而精神熵的反面就是有序的意识，米哈里把这种有序的意识称之为“最优体验”，也应用于用户体验和交互设计领域。在最优体验种，意识形成良性的循环，注意力得到集中，工作效率得到提升，对外干扰事物的感知降低，甚至达到忘我的境界。</p></div><p>米哈里提出了<strong>构成心流的要素</strong>：</p><ol class="w3-pale-yellow w3-margin-top w3-card-4"><li><span class="w3-pale-blue">一个可量化的目标</span>：目标是明确可以衡量的，或者说无法完成的目标是无法提供乐趣的，只有挫折和无望。目标是符合 SMART 原则的：明确（Specific）, 可衡量（Measurable）, 可达成（Achievable）, 相关（Relevant）, 时限（Time-bound）。</li><li><span class="w3-pale-blue">目标具有挑战性</span>：不具有挑战性的目标只消耗极少的注意力资源，无法使人专注其中。</li><li><span class="w3-pale-blue">自身具备一定能力</span>：在挑战的过程中，自身应当具备可能完成目标的能力，同时目标难度应当适当高出自身所具备的能力。当能力与挑战难度不相匹配，容易产生轻易感或是失落感。对于能力和挑战难度的关系如下图所示。</li><li><span class="w3-pale-blue">集中注意力</span>：达到最优体验状态需要集中注意力，而且深沉的快乐是严格的自律和集中注意力换来的。</li><li><span class="w3-pale-blue">挑战的过程反馈及时</span>：缺少反馈的过程是茫然的、无助的、也是无趣的。反馈作为用户体验闭环中的重要环节，既给用户带来信息的感知和内心的感受，同时也可以作为奖励而存在。</li></ol><p><img src="/dao/mircromastery/zh-CN/f0e28335bb89/aa.png"></p><p>既然精神熵代表意识的混乱程度，而心流则表示意识的有序，那么我们追寻心流的过程可以认为是“管理意识”的过程，也是“降熵”的过程。</p><p>微精通并不是让你遵循让人失去活力的方法（比如购买入门教科书），也并不意味着你必须做那些似乎永远做不完的事情。它的<strong>有限性</strong>能够让你对这个世界保持兴趣，同时消除焦虑，不会让你觉得浪费了很多时间。</p><p>微精通的结构以一种关键方法，在更广泛的领域中与诸多重要元素想关联。（建立联系）</p><div class="w3-pale-green w3-card-4 w3-padding">在一项微精通中，仅用少量的文字就能揭示各个元素间的关联和平衡关系。</div><p>微精通具有可<strong>复验性</strong>，<strong>游戏性</strong>，<strong>人人可为性</strong>。</p><p>如果在学习过程中不能获得一系列微小的成功，你将失去信心，甚至放弃，特别是在完全自学的情况下。</p><h2 id="微精通内核"><a href="#微精通内核" class="headerlink" title="微精通内核"></a>微精通内核</h2><p>依据必要的（微精通）结构来管理学习进程，并最终实现目标。</p><p>每一种微精通都有精确的结构：</p><ol><li>入门技巧</li><li>协同障碍</li><li>背景支持</li><li>成功回报</li><li>可复验性</li><li>可实验性</li></ol><h3 id="入门技巧"><a href="#入门技巧" class="headerlink" title="入门技巧"></a>入门技巧</h3><p>入门技巧是<strong>如何使你迈开步子走上微精通之路的</strong>。入门技巧可以为你克服微精通实践初期存在的障碍，比如增强自信心和熟悉程度，或者，让你针对学习过程中的每一部分分配合适的重视程度。</p><p>入门技巧能够让你快速地对事物有个基本的把握，虽然到最后阶段时你可能就不需要它了，不过在最初阶段，它是你最好的朋友。</p><p>入门技巧可以有很多的形式。比如：</p><ul><li>一些简单的改进方法</li><li>专注训练某一方面</li><li>对某些事情加以特别关注</li></ul><p>入门技巧的益处：</p><ul><li>使你能够很投入地做事情，你安心地告诉自己，知道技巧就能做了。</li><li>即使不能很快做好，起码可以提高速度，让你有耐心忍受长达几个小时的练习。</li></ul><p>随着学习的推进，或许到某个节点时，你会发现自己不再需要这些技巧了，这说明它们已经完成助你走向完美微精通的光荣使命。</p><h3 id="协同障碍"><a href="#协同障碍" class="headerlink" title="协同障碍"></a>协同障碍</h3>]]></content:encoded>
      
      
      
      <category domain="https://xinetzone.github.io/tags/mircromastery/">mircromastery</category>
      
      
      <comments>https://xinetzone.github.io/mircromastery/zh-CN/f0e28335bb89.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>网络编程基础：socket</title>
      <link>https://xinetzone.github.io/python/zh-CN/31ee077c5c0f.html</link>
      <guid>https://xinetzone.github.io/python/zh-CN/31ee077c5c0f.html</guid>
      <pubDate>Thu, 22 Apr 2021 05:52:25 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;socket&lt;/code&gt;模块（底层网络接口）提供了访问 BSD 套接字 的接口。在所有现代 Unix 系统、Windows、macOS 和其他一些平台上可用。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; t</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>socket</code>模块（底层网络接口）提供了访问 BSD 套接字 的接口。在所有现代 Unix 系统、Windows、macOS 和其他一些平台上可用。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Socket 又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。这个 Python 接口是用 Python 的面向对象风格对 Unix 系统调用和套接字库接口的直译：函数 <code>socket()</code> 返回一个 <strong>套接字对象</strong>，其方法是对各种套接字系统调用的实现。形参类型一般与 C 接口相比更高级：例如在 Python 文件 <code>read()</code> 和 <code>write()</code> 操作中，接收操作的缓冲区分配是自动的，发送操作的缓冲区长度是隐式的。</p><ul><li>模块 <a href="https://docs.python.org/zh-cn/3.10/library/socketserver.html#module-socketserver">socketserver</a>：用于简化网络服务端编写的类。</li><li>模块 <a href="https://docs.python.org/zh-cn/3.10/library/ssl.html#module-ssl">ssl</a>：套接字对象的TLS/SSL封装。</li></ul><h2 id="套接字协议族"><a href="#套接字协议族" class="headerlink" title="套接字协议族"></a>套接字协议族</h2><p>根据系统以及构建选项，<code>socket</code>模块提供了各种套接字协议簇。</p><p><strong>协议</strong>（Protocol）就是网络通信过程中的约定或者合同，通信的双方必须都遵守才能正常收发数据。协议有很多种，例如 TCP、UDP、IP 等，通信的双方必须使用同一协议才能通信。协议是一种规范，由计算机组织制定，规定了很多细节，例如，如何建立连接，如何相互识别等。</p><blockquote><p>协议仅仅是一种规范，必须由计算机软件来实现。例如 IP 协议规定了如何找到目标计算机，那么各个开发商在开发自己的软件时就必须遵守该协议，不能另起炉灶。</p></blockquote><p>TCP/IP 模型包含了 TCP、IP、UDP、Telnet、FTP、SMTP 等上百个互为关联的协议，其中 TCP 和 IP 是最常用的两种底层协议，所以把它们统称为“TCP/IP 协议族”。它们的层级关系如下图所示：</p><p><img src="/dao/python/zh-CN/31ee077c5c0f/q.gif"></p><p>我们平常使用的程序（或者说软件）一般都是通过应用层来访问网络的，程序产生的数据会一层一层地往下传输，直到最后的网络接口层，就通过网线发送到互联网上去了。数据每往下走一层，就会被这一层的协议增加一层包装，等到发送到互联网上时，已经比原始数据多了四层包装。整个数据封装的过程就像俄罗斯套娃。</p><p>当另一台计算机接收到数据包时，会从网络接口层再一层一层往上传输，每传输一层就拆开一层包装，直到最后的应用层，就得到了最原始的数据，这才是程序要使用的数据。</p><p>给数据加包装的过程，实际上就是在数据的头部增加一个标志（一个数据块），表示数据经过了这一层，我已经处理过了。给数据拆包装的过程正好相反，就是去掉数据头部的标志，让它逐渐现出原形。</p><p>两台计算机进行通信时，必须遵守以下原则：</p><ul><li>必须是同一层次进行通信，比如，A 计算机的应用层和 B 计算机的传输层就不能通信，因为它们不在一个层次，数据的拆包会遇到问题。</li><li>每一层的功能都必须相同，也就是拥有完全相同的网络模型。如果网络模型都不同，那不就乱套了，谁都不认识谁。</li><li>数据只能逐层传输，不能跃层。</li><li>每一层可以使用下层提供的服务，并向上层提供服务。</li></ul><p>路由器用来完成 IP 层的交互任务。某个网络原来使用 A 公司的路由器，现要将其替换成 B 公司的，是否可行？这并非难事，并不一定要换成同一公司的同一型号路由器，因为所有生产商都会按照 IP 层标准制造。再举个例子。大家的计算机是否装有网络接口卡，也就是所谓的网卡？尚未安装也无妨，其实很容易买到，因为所有网卡制造商都会遵守链路层的协议标准。这就是开放式系统的优点。</p><h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>IP 地址是 Internet Protocol Address 的缩写，译为“网际协议地址”。一台计算机可以拥有一个独立的 IP 地址，一个局域网也可以拥有一个独立的 IP 地址（对外就好像只有一台计算机）。对于目前广泛使用 IPv4 地址，它的资源是非常有限的，一台计算机一个 IP 地址是不现实的，往往是一个局域网才拥有一个 IP 地址。</p><p>在因特网上进行通信时，必须要知道对方的 IP 地址。实际上数据包中已经附带了 IP 地址，把数据包发送给路由器以后，路由器会根据 IP 地址找到对方的地里位置，完成一次数据的传递。路由器有非常高效和智能的算法，很快就会找到目标计算机。</p><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><p>现实的情况是，一个局域网往往才能拥有一个独立的 IP；换句话说，IP 地址只能定位到一个局域网，无法定位到具体的一台计算机。这可怎么办呀？这样也没法通信啊。</p><p>其实，真正能唯一标识一台计算机的是 MAC 地址，每个网卡的 MAC 地址在全世界都是独一无二的。计算机出厂时，MAC 地址已经被写死到网卡里面了（当然通过某些“奇巧淫技”也是可以修改的）。局域网中的路由器/交换机会记录每台计算机的 MAC 地址。</p><blockquote><p>MAC 地址是 Media Access Control Address 的缩写，直译为“媒体访问控制地址”，也称为局域网地址（LAN Address），以太网地址（Ethernet Address）或物理地址（Physical Address）。</p></blockquote><p>数据包中除了会附带对方的 IP 地址，还会附带对方的 MAC 地址，当数据包达到局域网以后，路由器/交换机会根据数据包中的 MAC 地址找到对应的计算机，然后把数据包转交给它，这样就完成了数据的传递。</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>有了 IP 地址和 MAC 地址，虽然可以找到目标计算机，但仍然不能进行通信。一台计算机可以同时提供多种网络服务，例如 Web 服务（网站）、FTP 服务（文件传输服务）、SMTP 服务（邮箱服务）等，仅有 IP 地址和 MAC 地址，计算机虽然可以正确接收到数据包，但是却不知道要将数据包交给哪个网络程序来处理，所以通信失败。</p><p>为了区分不同的网络程序，计算机会为每个网络程序分配一个独一无二的端口号（Port Number），例如，Web 服务的端口号是 80，FTP 服务的端口号是 21，SMTP 服务的端口号是 25。</p><p>端口（Port）是一个虚拟的、逻辑上的概念。可以将端口理解为一道门，数据通过这道门流入流出，每道门有不同的编号，就是端口号。</p>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/Python-%E7%BC%96%E7%A8%8B/">Python 编程</category>
      
      
      <category domain="https://xinetzone.github.io/tags/web/">web</category>
      
      
      <comments>https://xinetzone.github.io/python/zh-CN/31ee077c5c0f.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>高级 I/O 复用库</title>
      <link>https://xinetzone.github.io/python/zh-CN/c7565b5b6ae3.html</link>
      <guid>https://xinetzone.github.io/python/zh-CN/c7565b5b6ae3.html</guid>
      <pubDate>Thu, 22 Apr 2021 04:57:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;参考自：&lt;a href=&quot;https://docs.python.org/3.10/library/selectors.html&quot;&gt;selectors — High-level I/O multiplexing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;selectors&lt;/cod</description>
        
      
      
      
      <content:encoded><![CDATA[<p>参考自：<a href="https://docs.python.org/3.10/library/selectors.html">selectors — High-level I/O multiplexing</a></p><p><code>selectors</code> 模块允许高层级且高效率的 I/O 复用，它建立在 <code>select</code> 模块原型的基础之上，提供基于 <code>select</code> 模块的 I/O 复用的平台无关的抽象。推荐使用 <code>selectors</code> 模块，除非希望对所使用的 OS 层级原型进行精确控制。它定义了一个 <code>BaseSelector</code> 抽象基类，以及多个实际的实现 (<a href="https://docs.python.org/zh-cn/3.10/library/selectors.html#selectors.KqueueSelector" title="selectors.KqueueSelector"><code>KqueueSelector</code></a>,&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/selectors.html#selectors.EpollSelector" title="selectors.EpollSelector"><code>EpollSelector</code></a>…)，它们可被用于在多个文件对象上等待 I/O 就绪通知。 在下文中，”文件对象” 是指任何具有 <code>fileno()</code> 方法的对象，或是一个原始文件描述器。参见 <a href="https://docs.python.org/3.10/glossary.html#term-file-object">file object</a>。</p><div class="w3-pale-green w3-card w3-padding"><p><dfn class="xin-term">文件对象</dfn>（file object）：对外提供面向文件 API 以使用下层资源的对象（带有 <code>read()</code> 或 <code>write()</code> 这样的方法）。根据其创建方式的不同，文件对象可以处理对真实磁盘文件，对其他类型存储，或是对通讯设备的访问（例如标准输入/输出、内存缓冲区、套接字、管道等等）。文件对象也被称为 <strong>file-like objects</strong> 或 <strong>流</strong>（streams）。</p><p>实际上共有三种类别的文件对象: 原始 <a href="https://docs.python.org/3.10/glossary.html#term-binary-file">二进制文件</a>, 被缓冲的 <a href="https://docs.python.org/3.10/glossary.html#term-binary-file">二进制文件</a> 以及 <a href="https://docs.python.org/3.10/glossary.html#term-text-file">文本文件</a>。它们的接口定义均在 <code>io</code> 模块中。创建文件对象的规范方式是使用 <code><a href="https://docs.python.org/3.10/library/functions.html#open">open()</a></code> 函数。</p></div><p><code>DefaultSelector</code> 是一个指向当前平台上可用的最高效实现的别名：这应为大多数用户的默认选择。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> _can_use<span class="token punctuation">(</span><span class="token string">'kqueue'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> KqueueSelector<span class="token keyword">elif</span> _can_use<span class="token punctuation">(</span><span class="token string">'epoll'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> EpollSelector<span class="token keyword">elif</span> _can_use<span class="token punctuation">(</span><span class="token string">'devpoll'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> DevpollSelector<span class="token keyword">elif</span> _can_use<span class="token punctuation">(</span><span class="token string">'poll'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> PollSelector<span class="token keyword">else</span><span class="token punctuation">:</span>    DefaultSelector <span class="token operator">=</span> SelectSelector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下文中，<code>events</code> 一个位掩码，指明哪些 I/O 事件要在给定的文件对象上执行等待。它可以是以下模块级常量的组合:</p><table><thead><tr><th align="center">常量</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">EVENT_READ</td><td align="center">可读</td></tr><tr><td align="center">EVENT_WRITE</td><td align="center">可写</td></tr></tbody></table><h2 id="class-selectors-SelectorKey"><a href="#class-selectors-SelectorKey" class="headerlink" title="class selectors.SelectorKey"></a>class selectors.SelectorKey</h2><p><code>SelectorKey</code> 是一个 <a href="https://docs.python.org/zh-cn/3.10/library/collections.html#collections.namedtuple">namedtuple</a>，用来将文件对象关联到其隐含的文件描述器、选定事件掩码和附加数据等。它会被某些 <code>BaseSelector</code> 方法返回。</p><dl class="w3-pale-yellow w3-card-4 w3-padding"> <dt class="w3-pale-green w3-card-4">fileobj</dt> <dd>已注册的文件对象</dd> <dt class="w3-pale-green w3-card-4">fd</dt> <dd>隐含的的文件描述器（Underlying file descriptor）</dd> <dt class="w3-pale-green w3-card-4">events</dt> <dd>必须在此文件对象上被等待的事件</dd> <dt class="w3-pale-green w3-card-4">data</dt> <dd>可选的关联到此文件对象的不透明数据：例如，这可被用来存储各个客户端的会话 ID</dd></dl><h2 id="class-selectors-BaseSelector"><a href="#class-selectors-BaseSelector" class="headerlink" title="class selectors.BaseSelector"></a>class selectors.BaseSelector</h2><p>一个 <code>BaseSelector</code>，用来在多个文件对象上等待 I/O 事件就绪。它支持文件流注册、注销，以及在这些流上等待 I/O 事件的方法。它是一个抽象基类，因此不能被实例化。请改用 <code>DefaultSelector</code>，或者 <code>SelectSelector</code>, <code>KqueueSelector</code> 等。如果你想要指明使用某个实现，并且你的平台支持它的话。<code>BaseSelector</code> 及其具体实现支持 <a href="https://docs.python.org/3.10/glossary.html#term-context-manager">context manager</a> 协议。</p><dl class="w3-pale-yellow w3-card-4 w3-padding"> <dt class="w3-pale-green w3-card-4">abstractmethod register(fileobj, events, data=None)</dt> <dd>注册一个用于选择的文件对象，在其上监视 I/O 事件。</dd> <dd><code>fileobj</code> 是要监视的文件对象。它可以是整数形式的文件描述符或者具有 <code>fileno()</code> 方法的对象。<code>events</code> 是要监视的事件的位掩码。<code>data</code> 是一个不透明对象。</dd> <dd>这将返回一个新的 <code>SelectorKey</code> 实例，或在出现无效事件掩码或文件描述符时引发 <code>ValueError</code>，或在文件对象已被注册时引发 <code>KeyError</code>。</dd> <dt class="w3-pale-green w3-card-4">abstractmethod unregister(fileobj)</dt> <dd>注销对一个文件对象的选择，移除对它的监视。在文件对象被关闭之前应当先将其注销。</dd> <dd><code>fileobj</code>必须是之前已注册的文件对象。</dd> <dd>这将返回已关联的 <code>SelectorKey</code> 实例，或者如果 <code>fileobj</code> 未注册则会引发 <code>KeyError</code>。 如果 <code>fileobj</code> 无效（例如它没有 <code>fileobj()</code> 方法或其 <code>fileobj()</code> 方法返回无效值），则返回 <code>ValueError</code></dd>  <dt class="w3-pale-green w3-card-4">modify(fileobj, events, data=None)(fileobj)</dt> <dd>更改已注册文件对象所监视的事件或所附带的数据。</dd> <dd>这等价于 <code>BaseSelector.unregister(fileobj)()</code> 加 <code>BaseSelector.register(fileobj, events, data)()</code>，区别在于它可以被更高效地实现。</dd> <dd>这将返回一个新的 <code>SelectorKey</code> 实例，或在出现无效事件掩码或文件描述符时引发 <code>ValueError</code>，或在文件对象未被注册时引发 <code>KeyError</code>。</dd> <dt class="w3-pale-green w3-card-4">abstractmethod select(timeout=None)</dt> <dd>等待直到有已注册的文件对象就绪，或是超过时限。</dd> <dd>如果 <code>timeout &gt; 0</code>，这指定以秒数表示的最大等待时间。如果 <code>timeout &lt;= 0</code>，调用将不会阻塞，并将报告当前就绪的文件对象。如果 <code>timeout</code> 为 <code>None</code>，调用将阻塞直到某个被监视的文件对象就绪。</dd> <dd>返回由 <code>(key, events)</code> 元组构成的列表，每项各表示一个就绪的文件对象。</dd> <dd><code>key</code> 是对应于就绪文件对象的 <code>SelectorKey</code> 实例。<code>events</code> 是在此文件对象上等待的事件位掩码。</dd> <dd class="w3-card-4 w3-light-grey w3-padding"><span class="w3-text-blue">注解</span>：如果当前进程收到一个信号（<code>signal</code>），此方法可在任何文件对象就绪之前或超出时限时返回：在此情况下，将返回一个空列表。</dd><dd> </dd><dd>在 3.5 版更改: 现在当被某个信号中断时，如果信号处理程序没有引发异常，选择器会用重新计算的超时值进行重试（理由请查看 <a href="https://www.python.org/dev/peps/pep-0475">PEP 475</a> ），而不是在超时之前返回空的事件列表。</dd> <dt class="w3-pale-green w3-card-4">close()</dt> <dd>关闭选择器（selector）。</dd> <dd>必须调用这个方法以确保下层资源会被释放。选择器被关闭后将不可再使用。</dd> <dt class="w3-pale-green w3-card-4">get_key(fileobj)</dt> <dd>返回关联到某个已注册文件对象的键。</dd> <dd>此方法将返回关联到文件对象的 <code>SelectorKey</code> 实例，或在文件对象未注册时引发 <code>KeyError</code>。</dd> <dt class="w3-pale-green w3-card-4">abstractmethod get_map()</dt> <dd>返回从文件对象到选择器键的映射。</dd> <dd>返回一个将已注册文件对象映射到与其相关联的<code>SelectorKey</code> 实例的 <a href="https://docs.python.org/zh-cn/3.10/library/collections.abc.html#collections.abc.Mapping">Mapping</a> 实例。</dd></dl><h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><p>下面是一个简单的<code>echo</code>服务器实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> selectors<span class="token keyword">import</span> socket<span class="token comment"># 生成一个 select 对象</span>sel <span class="token operator">=</span> selectors<span class="token punctuation">.</span>DefaultSelector<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">accept</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Should be ready</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'accepted'</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 设定非阻塞</span>    <span class="token comment"># 新连接注册 read 回调函数</span>    sel<span class="token punctuation">.</span>register<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> selectors<span class="token punctuation">.</span>EVENT_READ<span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment"># Should be ready</span>    <span class="token keyword">if</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'echoing'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># Hope it won't block</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing'</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span>        sel<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 把刚生成的sock连接对象注册到select连接列表中，并交给accept函数处理</span>sel<span class="token punctuation">.</span>register<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> selectors<span class="token punctuation">.</span>EVENT_READ<span class="token punctuation">,</span> accept<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    events <span class="token operator">=</span> sel<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 默认是阻塞，有活动连接就返回活动的连接列表</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> mask <span class="token keyword">in</span> events<span class="token punctuation">:</span>        callback <span class="token operator">=</span> key<span class="token punctuation">.</span>data <span class="token comment"># 去调accept函数</span>        callback<span class="token punctuation">(</span>key<span class="token punctuation">.</span>fileobj<span class="token punctuation">,</span> mask<span class="token punctuation">)</span>  <span class="token comment"># key.fileobj就是readable中的一个socket连接对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://pymotw.com/3/selectors/">https://pymotw.com/3/selectors/</a></p>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/Python-%E7%BC%96%E7%A8%8B/">Python 编程</category>
      
      
      <category domain="https://xinetzone.github.io/tags/asyncio/">asyncio</category>
      
      
      <comments>https://xinetzone.github.io/python/zh-CN/c7565b5b6ae3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 异步编程技巧</title>
      <link>https://xinetzone.github.io/python/zh-CN/59343b396510.html</link>
      <guid>https://xinetzone.github.io/python/zh-CN/59343b396510.html</guid>
      <pubDate>Thu, 22 Apr 2021 00:04:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;经验告诉我们永远不要面向用户的接口暴露 &lt;code&gt;Future&lt;/code&gt; 对象，同时建议使用&amp;nbsp;&lt;a href=&quot;https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio</description>
        
      
      
      
      <content:encoded><![CDATA[<p>经验告诉我们永远不要面向用户的接口暴露 <code>Future</code> 对象，同时建议使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.create_future" title="asyncio.loop.create_future"><code>loop.create_future()</code></a>&nbsp;来创建 <code>Future</code> 对象。这种方法可以让 <code>Future</code> 对象使用其它的事件循环实现，它可以注入自己的优化实现。</p>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/Python-%E7%BC%96%E7%A8%8B/">Python 编程</category>
      
      
      <category domain="https://xinetzone.github.io/tags/asyncio/">asyncio</category>
      
      
      <comments>https://xinetzone.github.io/python/zh-CN/59343b396510.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>并发执行任务</title>
      <link>https://xinetzone.github.io/post/zh-CN/99261320ee2d.html</link>
      <guid>https://xinetzone.github.io/post/zh-CN/99261320ee2d.html</guid>
      <pubDate>Wed, 21 Apr 2021 04:42:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;任务（&lt;code&gt;Task&lt;/code&gt;）是与事件循环进行交互的主要方式之一。任务包装协程并跟踪它们何时完成。任务是 &lt;code&gt;Future&lt;/code&gt; 的子类，因此其他协程可以等待它们，并且每个协程都有可以在任务完成后检索的结果。&lt;/p&gt;
&lt;h2 id=&quot;创建任务&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>任务（<code>Task</code>）是与事件循环进行交互的主要方式之一。任务包装协程并跟踪它们何时完成。任务是 <code>Future</code> 的子类，因此其他协程可以等待它们，并且每个协程都有可以在任务完成后检索的结果。</p><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p>要启动任务，请使用 <code>create_task()</code> 创建一个 <code>Task</code> 实例。只要循环正在运行且协程不返回，结果任务将作为事件循环管理的并发操作的一部分运行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_create_task.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in task_func'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'the result'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'creating task'</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'waiting for </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    return_value <span class="token operator">=</span> <span class="token keyword">await</span> task    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'task completed </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'return value: </span><span class="token interpolation"><span class="token punctuation">{</span>return_value<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本示例在 <code>main()</code> 函数退出之前等待任务返回结果。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_create_task.pycreating taskwaiting <span class="token keyword">for</span> <span class="token operator">&lt;</span>Task pending <span class="token assign-left variable">coro</span><span class="token operator">=</span><span class="token operator">&lt;</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span> running atasyncio_create_task.py:1<span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span><span class="token keyword">in</span> task_functask completed <span class="token operator">&lt;</span>Task finished <span class="token assign-left variable">coro</span><span class="token operator">=</span><span class="token operator">&lt;</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span> done, defined atasyncio_create_task.py:1<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token string">'the result'</span><span class="token operator">&gt;</span><span class="token builtin class-name">return</span> value: <span class="token string">'the result'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取消任务"><a href="#取消任务" class="headerlink" title="取消任务"></a>取消任务</h2><p>通过保留从 <code>create_task()</code> 返回的 <code>Task</code> 对象，可以在任务完成之前取消其操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_cancel_task.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in task_func'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'the result'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'creating task'</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'canceling task'</span><span class="token punctuation">)</span>    task<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'canceled task </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> task    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>CancelledError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'caught error from canceled task'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'task result: </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本示例在启动事件循环之前创建并取消任务。结果是来自 <code>run_until_complete()</code> 的 <code>CancelledError</code> 异常。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_cancel_task.pycreating taskcanceling taskcanceled task <span class="token operator">&lt;</span>Task cancelling <span class="token assign-left variable">coro</span><span class="token operator">=</span><span class="token operator">&lt;</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span> running atasyncio_cancel_task.py:1<span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span>caught error from canceled task<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果任务在等待另一个并发操作时被取消，则通过在任务等待时引发 <code>CancelledError</code> 异常来通知该任务已取消。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_cancel_task2.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in task_func, sleeping'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>CancelledError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task_func was canceled'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span>    <span class="token keyword">return</span> <span class="token string">'the result'</span><span class="token keyword">def</span> <span class="token function">task_canceller</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in task_canceller'</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'canceled the task'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'creating task'</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>task_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>task_canceller<span class="token punctuation">,</span> task<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> task    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>CancelledError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main() also sees task as canceled'</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如有必要，捕获异常可提供清理已完成工作的机会。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_cancel_task2.pycreating task<span class="token keyword">in</span> task_func, sleeping<span class="token keyword">in</span> task_cancellercanceled the tasktask_func was canceledmain<span class="token punctuation">(</span><span class="token punctuation">)</span> also sees task as canceled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从协程中创建任务"><a href="#从协程中创建任务" class="headerlink" title="从协程中创建任务"></a>从协程中创建任务</h2><p><code>ensure_future()</code> 函数返回与协程的执行相关的 <code>Task</code>。然后可以将该 <code>Task</code> 实例传递给其他代码，后者可以在不知道原始协程如何构造或调用的情况下等待它。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_ensure_future.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">wrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wrapped'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'result'</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'inner: starting'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'inner: waiting for </span><span class="token interpolation"><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> task    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'inner: task returned </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">starter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starter: creating task'</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>wrapped<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starter: waiting for inner'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> inner<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starter: inner returned'</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>starter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，直到有某种使用 <code>await</code> 执行的协程才启动给 <code>ensure_future()</code> 的协程。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_ensure_future.pyentering event loopstarter: creating taskstarter: waiting <span class="token keyword">for</span> innerinner: startinginner: waiting <span class="token keyword">for</span> <span class="token operator">&lt;</span>Task pending <span class="token assign-left variable">coro</span><span class="token operator">=</span><span class="token operator">&lt;</span>wrapped<span class="token punctuation">(</span><span class="token punctuation">)</span> running atasyncio_ensure_future.py:1<span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span>wrappedinner: task returned <span class="token string">'result'</span>starter: inner returned<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/Python-%E7%BC%96%E7%A8%8B/">Python 编程</category>
      
      
      <category domain="https://xinetzone.github.io/tags/asyncio/">asyncio</category>
      
      
      <comments>https://xinetzone.github.io/post/zh-CN/99261320ee2d.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future 以异步方式生成数据</title>
      <link>https://xinetzone.github.io/post/zh-CN/3cef5935d457.html</link>
      <guid>https://xinetzone.github.io/post/zh-CN/3cef5935d457.html</guid>
      <pubDate>Wed, 21 Apr 2021 03:21:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;Future&lt;/code&gt; 对象用来链接 &lt;strong&gt;底层回调式代码&lt;/strong&gt; 和高层异步/等待式代码。&lt;/p&gt;
&lt;h2 id=&quot;Future-对象&quot;&gt;&lt;a href=&quot;#Future-对象&quot; class=&quot;headerlink&quot; title=&quot;Fu</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>Future</code> 对象用来链接 <strong>底层回调式代码</strong> 和高层异步/等待式代码。</p><h2 id="Future-对象"><a href="#Future-对象" class="headerlink" title="Future 对象"></a>Future 对象</h2><p>class <code>asyncio.Future(*, loop=None)</code>：一个 <code>Future</code> 代表一个异步运算的最终结果。线程不安全。</p><p><code>Future</code> 是一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-awaitable">awaitable</a>&nbsp;对象。协程可以等待 <code>Future</code> 对象直到它们有结果或异常集合或被取消。</p><p>通常 <code>Future</code> 用于支持底层回调式代码(例如在协议实现中使用 <code>asyncio</code>&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-protocol.html#asyncio-transports-protocols">transports</a>) 与高层异步/等待式代码交互。</p><p>经验告诉我们永远不要面向用户的接口暴露 <code>Future</code> 对象，同时建议使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.create_future" title="asyncio.loop.create_future"><code>loop.create_future()</code></a>&nbsp;来创建 <code>Future</code> 对象。这种方法可以让 <code>Future</code> 对象使用其它的事件循环实现，它可以注入自己的优化实现。</p><h3 id="set-result-result"><a href="#set-result-result" class="headerlink" title="set_result(result)"></a><code>set_result(result)</code></h3><p>将 <code>Future</code> 标记为&nbsp;<em>完成</em>&nbsp;并设置结果。</p><p>如果 <code>Future</code> 已经&nbsp;<em>完成</em>&nbsp;则抛出一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;错误。</p><h3 id="result"><a href="#result" class="headerlink" title="result()"></a><code>result()</code></h3><p>返回 <code>Future</code> 的结果。</p><p>如果 <code>Future</code> 状态为&nbsp;<em>完成</em>&nbsp;，并由&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.set_result" title="asyncio.Future.set_result"><code>set_result()</code></a>&nbsp;方法设置一个结果，则返回这个结果。</p><p>如果 <code>Future</code> 状态为&nbsp;<em>完成</em>&nbsp;，并由&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.set_exception" title="asyncio.Future.set_exception"><code>set_exception()</code></a>&nbsp;方法设置一个异常，那么这个方法会引发异常。</p><p>如果 <code>Future</code> 已&nbsp;<em>取消</em>，方法会引发一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.CancelledError" title="asyncio.CancelledError"><code>CancelledError</code></a>&nbsp;异常。</p><p>如果 <code>Future</code> 的结果还不可用，此方法会引发一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;异常。</p><h3 id="set-exception-exception"><a href="#set-exception-exception" class="headerlink" title="set_exception(exception)"></a><code>set_exception(exception)</code></h3><p>将 F<code>uture</code> 标记为&nbsp;<em>完成</em>&nbsp;并设置一个异常。</p><p>如果 <code>Future</code> 已经&nbsp;<em>完成</em>&nbsp;则抛出一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;错误。</p><h3 id="done"><a href="#done" class="headerlink" title="done()"></a><code>done()</code></h3><p>如果 <code>Future</code> 为已&nbsp;<em>完成</em>&nbsp;则返回&nbsp;<code>True</code>。</p><p>如果 <code>Future</code> 为&nbsp;<em>取消</em>&nbsp;或调用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.set_result" title="asyncio.Future.set_result"><code>set_result()</code></a>&nbsp;设置了结果或调用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.set_exception" title="asyncio.Future.set_exception"><code>set_exception()</code></a>&nbsp;设置了异常，那么它就是&nbsp;<em>完成</em>。</p><h3 id="cancelled"><a href="#cancelled" class="headerlink" title="cancelled()"></a><code>cancelled()</code></h3><p>如果 <code>Future</code> 已 取消 则返回 <code>True</code>。</p><p>这个方法通常在设置结果或异常前用来检查 <code>Future</code> 是否已 <em>取消</em>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token keyword">not</span> fut<span class="token punctuation">.</span>cancelled<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="add-done-callback-callback-context-None"><a href="#add-done-callback-callback-context-None" class="headerlink" title="add_done_callback(callback, *, context=None)"></a><code>add_done_callback(callback, *, context=None)</code></h3><p>添加一个在 <code>Future</code>&nbsp;<em>完成</em>&nbsp;时运行的回调函数。</p><p>调用&nbsp;<em><code>callback</code></em>&nbsp;时，<code>Future</code> 对象是它的唯一参数。</p><p>调用这个方法时 <code>Future</code> 已经&nbsp;<em>完成</em>&nbsp;, 回调函数已被&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.call_soon" title="asyncio.loop.call_soon"><code>loop.call_soon()</code></a>&nbsp;调度。</p><p>可选键值类的参数&nbsp;<em><code>context</code></em>&nbsp;允许&nbsp;<em><code>callback</code></em>&nbsp;运行在一个指定的自定义&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/contextvars.html#contextvars.Context" title="contextvars.Context"><code>contextvars.Context</code></a>&nbsp;对象中。如果没有提供&nbsp;<em><code>context</code></em>&nbsp;，则使用当前上下文。</p><p>可以用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/functools.html#functools.partial" title="functools.partial"><code>functools.partial()</code></a>&nbsp;给回调函数传递参数，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Call 'print("Future:", fut)' when "fut" is done.</span>fut<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>    functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">,</span> <span class="token string">"Future:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="remove-done-callback-callback"><a href="#remove-done-callback-callback" class="headerlink" title="remove_done_callback(callback)"></a><code>remove_done_callback(callback)</code></h3><p>从回调列表中移除 <code>callback</code>。</p><p>返回被移除的回调函数的数量，通常为 1，除非一个回调函数被添加多次。</p><h3 id="cancel-msg-None"><a href="#cancel-msg-None" class="headerlink" title="cancel(msg=None)"></a><code>cancel(msg=None)</code></h3><p>取消 <code>Future</code> 并调度回调函数。</p><p>如果 <code>Future</code> 已经 <em>完成</em> 或 <em>取消</em>，返回 <code>False</code>。否则将 <code>Future</code> 状态改为 <em>取消</em> 并在调度回调函数后返回 <code>True</code>。</p><h3 id="exception"><a href="#exception" class="headerlink" title="exception()"></a><code>exception()</code></h3><p>返回 <code>Future</code> 已设置的异常。</p><p>只有 <code>Future</code> 在&nbsp;<em>完成</em>&nbsp;时才返回异常（或者&nbsp;<code>None</code>&nbsp;，如果没有设置异常）。</p><p>如果 <code>Future</code> 已&nbsp;<em>取消</em>，方法会引发一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.CancelledError" title="asyncio.CancelledError"><code>CancelledError</code></a>&nbsp;异常。</p><p>如果 <code>Future</code> 还没&nbsp;<em>完成</em>&nbsp;，这个方法会引发一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;异常。</p><h3 id="get-loop"><a href="#get-loop" class="headerlink" title="get_loop()"></a><code>get_loop()</code></h3><p>返回 <code>Future</code> 对象已绑定的事件循环。</p><h2 id="Future-函数"><a href="#Future-函数" class="headerlink" title="Future 函数"></a>Future 函数</h2><h3 id="asyncio-isfuture-obj"><a href="#asyncio-isfuture-obj" class="headerlink" title="asyncio.isfuture(obj)"></a><code>asyncio.isfuture(obj)</code></h3><p>如果 <code>obj</code> 为下面任意对象，返回 <code>True</code>：</p><ul><li>一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future" title="asyncio.Future"><code>asyncio.Future</code></a>&nbsp;类的实例，</li><li>一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task" title="asyncio.Task"><code>asyncio.Task</code></a>&nbsp;类的实例，</li><li>带有&nbsp;<code>_asyncio_future_blocking</code>&nbsp;属性的类似 <code>Future</code> 的对象。</li></ul><h3 id="asyncio-ensure-future-obj-loop-None"><a href="#asyncio-ensure-future-obj-loop-None" class="headerlink" title="asyncio.ensure_future(obj, *, loop=None)"></a><code>asyncio.ensure_future(obj, *, loop=None)</code></h3><p>返回：</p><ul><li><p><em><code>obj</code></em>&nbsp;参数会是保持原样，如果&nbsp;<em><code>obj</code></em>&nbsp;是&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future" title="asyncio.Future"><code>Future</code></a>、&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task" title="asyncio.Task"><code>Task</code></a>&nbsp;或 类似 Future 的对象(&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.isfuture" title="asyncio.isfuture"><code>isfuture()</code></a>&nbsp;用于测试。)</p></li><li><p>封装了&nbsp;<em><code>obj</code></em>&nbsp;的&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task" title="asyncio.Task"><code>Task</code></a>&nbsp;对象，如果&nbsp;<em><code>obj</code></em>&nbsp;是一个协程 (使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.iscoroutine" title="asyncio.iscoroutine"><code>iscoroutine()</code></a>&nbsp;进行检测)；在此情况下该协程将通过&nbsp;<code>ensure_future()</code>&nbsp;加入执行计划。</p></li><li><p>等待&nbsp;<em><code>obj</code></em>&nbsp;的&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.Task" title="asyncio.Task"><code>Task</code></a>&nbsp;对象，如果&nbsp;<em><code>obj</code></em>&nbsp;是一个可等待对象(&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/inspect.html#inspect.isawaitable" title="inspect.isawaitable"><code>inspect.isawaitable()</code></a>&nbsp;用于测试)</p></li></ul><p>如果 <code>obj</code> 不是上述对象会引发一个 <code>TypeError</code> 异常。</p><h3 id="asyncio-wrap-future-future-loop-None"><a href="#asyncio-wrap-future-future-loop-None" class="headerlink" title="asyncio.wrap_future(future, *, loop=None)"></a><code>asyncio.wrap_future(future, *, loop=None)</code></h3><p>将一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.Future" title="concurrent.futures.Future"><code>concurrent.futures.Future</code></a>&nbsp;对象封装到&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future" title="asyncio.Future"><code>asyncio.Future</code></a>&nbsp;对象中。</p><h2 id="Waiting-for-a-Future"><a href="#Waiting-for-a-Future" class="headerlink" title="Waiting for a Future"></a>Waiting for a Future</h2><p><code>Future</code> 的行为就像协程，因此，任何用于等待协程的有用技术也可以用来等待 <code>future</code> 被标记为完成。本示例将 <code>future</code> 传递给事件循环的 <code>run_until_complete()</code> 方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_future_event_loop.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">def</span> <span class="token function">mark_done</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'setting future result to </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    future<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span>result<span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    all_done <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scheduling mark_done'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>mark_done<span class="token punctuation">,</span> all_done<span class="token punctuation">,</span> <span class="token string">'the result'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>all_done<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'returned result: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'future result: </span><span class="token interpolation"><span class="token punctuation">{</span>all_done<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用 <code>set_result()</code> 时，<code>Future</code> 的状态更改为完成，并且 <code>Future</code> 实例保留提供给该方法的结果供以后检索。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_future_event_loop.pyscheduling mark_doneentering event loopsetting future result to <span class="token string">'the result'</span>returned result: <span class="token string">'the result'</span>closing event loopfuture result: <span class="token string">'the result'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Future</code> 也可以与 <code>await</code> 关键字一起使用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_future_await.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">def</span> <span class="token function">mark_done</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'setting future result to </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    future<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    all_done <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scheduling mark_done'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>mark_done<span class="token punctuation">,</span> all_done<span class="token punctuation">,</span> <span class="token string">'the result'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> all_done    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'returned result: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Future</code> 的结果是由 <code>await</code> 返回的，因此通常可以在常规协程和 <code>Future</code> 实例中使用相同的代码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_future_await.pyscheduling mark_donesetting future result to <span class="token string">'the result'</span>returned result: <span class="token string">'the result'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Future-Callbacks"><a href="#Future-Callbacks" class="headerlink" title="Future Callbacks"></a>Future Callbacks</h2><p>除了像协程一样工作，<code>Future</code> 还可以在完成时调用回调。回调按注册顺序调用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_future_callback.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string">: future done: </span><span class="token interpolation"><span class="token punctuation">{</span>future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">register_callbacks</span><span class="token punctuation">(</span>all_done<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks on future'</span><span class="token punctuation">)</span>    all_done<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    all_done<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>all_done<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> register_callbacks<span class="token punctuation">(</span>all_done<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'setting result of future'</span><span class="token punctuation">)</span>    all_done<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">'the result'</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    all_done <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>all_done<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调应包含一个参数，即 <code>Future</code> 实例。要将其他参数传递给回调，请使用 <code>functools.partial()</code> 创建包装器。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_future_callback.pyregistering callbacks on futuresetting result of future<span class="token number">1</span>: future done: <span class="token string">'the result'</span><span class="token number">2</span>: future done: <span class="token string">'the result'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用事件循环创建-Future"><a href="#使用事件循环创建-Future" class="headerlink" title="使用事件循环创建 Future"></a>使用事件循环创建 Future</h2><p>这个例子创建一个 <code>Future</code> 对象，创建和调度一个异步任务去设置 <code>Future</code> 结果，然后等待其结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">set_after</span><span class="token punctuation">(</span>fut<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Sleep for *delay* seconds.</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>    <span class="token comment"># Set *value* as a result of *fut* Future.</span>    fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Get the current event loop.</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Create a new Future object.</span>    fut <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Run "set_after()" coroutine in a parallel Task.</span>    <span class="token comment"># We are using the low-level "loop.create_task()" API here because</span>    <span class="token comment"># we already have a reference to the event loop at hand.</span>    <span class="token comment"># Otherwise we could have just used "asyncio.create_task()".</span>    loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>        set_after<span class="token punctuation">(</span>fut<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'... world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello ...'</span><span class="token punctuation">)</span>    <span class="token comment"># Wait until *fut* has a result (1 second) and print it.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> fut<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重要</strong>：该 <code>Future</code> 对象是为了模仿 <code>concurrent.futures.Future</code> 类。主要差异包含：</p><ul><li><p>与 asyncio 的 Future 不同，<a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.Future" title="concurrent.futures.Future"><code>concurrent.futures.Future</code></a>&nbsp;实例不是可等待对象。</p></li><li><p><a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.result" title="asyncio.Future.result"><code>asyncio.Future.result()</code></a>&nbsp;和&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.exception" title="asyncio.Future.exception"><code>asyncio.Future.exception()</code></a>&nbsp;不接受&nbsp;<em>timeout</em>&nbsp;参数。</p></li><li><p>Future 没有&nbsp;<em>完成</em>&nbsp;时&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.result" title="asyncio.Future.result"><code>asyncio.Future.result()</code></a>&nbsp;和&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.exception" title="asyncio.Future.exception"><code>asyncio.Future.exception()</code></a>&nbsp;抛出一个&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code>InvalidStateError</code></a>&nbsp;异常。</p></li><li><p>使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.add_done_callback" title="asyncio.Future.add_done_callback"><code>asyncio.Future.add_done_callback()</code></a>&nbsp;注册的回调函数不会立即调用，而是被&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.call_soon" title="asyncio.loop.call_soon"><code>loop.call_soon()</code></a>&nbsp;调度。</p></li><li><p><code>asyncio.Future</code> 不能兼容&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.wait" title="concurrent.futures.wait"><code>concurrent.futures.wait()</code></a>&nbsp;和&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/concurrent.futures.html#concurrent.futures.as_completed" title="concurrent.futures.as_completed"><code>concurrent.futures.as_completed()</code></a>&nbsp;函数。</p></li><li><p><a href="https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio.Future.cancel" title="asyncio.Future.cancel"><code>asyncio.Future.cancel()</code></a>&nbsp;接受一个可选的&nbsp;<code>msg</code>&nbsp;参数，但&nbsp;<code>concurrent.futures.cancel()</code>&nbsp;无此参数。</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/Python-%E7%BC%96%E7%A8%8B/">Python 编程</category>
      
      
      <category domain="https://xinetzone.github.io/tags/asyncio-Future/">asyncio.Future</category>
      
      
      <comments>https://xinetzone.github.io/post/zh-CN/3cef5935d457.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Scheduling Calls 设定定时器</title>
      <link>https://xinetzone.github.io/post/zh-CN/c30844b50b8e.html</link>
      <guid>https://xinetzone.github.io/post/zh-CN/c30844b50b8e.html</guid>
      <pubDate>Wed, 21 Apr 2021 02:11:36 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;除了管理协程和 I/O 回调外，&lt;code&gt;asyncio&lt;/code&gt; 事件循环还可以根据循环中保留的计时器值来调度对常规函数的调用。&lt;/p&gt;
&lt;h2 id=&quot;Scheduling-a-Callback-“Soon”&quot;&gt;&lt;a href=&quot;#Scheduling-a-Cal</description>
        
      
      
      
      <content:encoded><![CDATA[<p>除了管理协程和 I/O 回调外，<code>asyncio</code> 事件循环还可以根据循环中保留的计时器值来调度对常规函数的调用。</p><h2 id="Scheduling-a-Callback-“Soon”"><a href="#Scheduling-a-Callback-“Soon”" class="headerlink" title="Scheduling a Callback “Soon”"></a>Scheduling a Callback “Soon”</h2><p>如果回调的时间无关紧要，则可以使用 <code>call_soon()</code> 为循环的下一次迭代安排调用。调用该函数后，该函数之后的所有其他位置参数都将传递给该回调。要将关键字参数传递给回调，请使用 <a href="https://pymotw.com/3/functools/index.html#module-functools">functools</a> 模块中的 <code>partial()</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_call_soon.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> kwarg<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'callback invoked with </span><span class="token interpolation"><span class="token punctuation">{</span>arg<span class="token punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token punctuation">{</span>kwarg<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    wrapped <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> kwarg<span class="token operator">=</span><span class="token string">'not default'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>wrapped<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调按调度的顺序被调用。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_call_soon.pyentering event loopregistering callbackscallback invoked with <span class="token number">1</span> and defaultcallback invoked with <span class="token number">2</span> and not defaultclosing event loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解：大多数&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio.html#module-asyncio" title="asyncio: Asynchronous I/O."><code>asyncio</code></a>&nbsp;的调度函数不让传递关键字参数。为此，请使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/functools.html#functools.partial" title="functools.partial"><code>functools.partial()</code></a>&nbsp;：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># will schedule "print("Hello", flush=True)"</span>loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>    functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 <code>partial</code> 对象通常比使用 <code>lambda</code> 更方便，<code>asyncio</code> 在调试和错误消息中能更好的呈现 <code>partial</code> 对象。</p><p>更加友好的写法是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_call_soon.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> kwarg<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'callback invoked with </span><span class="token interpolation"><span class="token punctuation">{</span>arg<span class="token punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token punctuation">{</span>kwarg<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">call_soon</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    wrapped <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> kwarg<span class="token operator">=</span><span class="token string">'not default'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>wrapped<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> call_soon<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安排回调"><a href="#安排回调" class="headerlink" title="安排回调"></a>安排回调</h3><ol><li><code>loop.call_soon(callback, *args, context=None)</code> 安排 <code>callback</code> 在事件循环的下一次迭代时附带 <code>args</code> 参数被调用。回调按其注册顺序被调用。每个回调仅被调用一次。可选的仅关键字型参数 <code>context</code> 允许为要运行的 <code>callback</code> 指定一个自定义 <code>contextvars.Context</code>。如果没有提供 <code>context</code>，则使用当前上下文。返回一个能用来取消回调的 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.Handle">asyncio.Handle</a> 实例。这个方法不是线程安全的。</li><li><code>loop.call_soon_threadsafe(callback, *args, context=None)</code> 是 <code>call_soon()</code> 的线程安全变体。必须被用于安排 来自其他线程 的回调。查看 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-dev.html#asyncio-multithreading">并发和多线程</a> 章节的文档。</li></ol><h2 id="调度延迟回调"><a href="#调度延迟回调" class="headerlink" title="调度延迟回调"></a>调度延迟回调</h2><p>事件循环提供安排调度函数在将来某个时刻调用的机制。事件循环使用单调时钟来跟踪时间。<code>loop.call_later(delay, callback, *args, context=None)</code> 安排 <code>callback</code> 在给定的 <code>delay</code> 秒（可以是 int 或者 float）后被调用。返回一个 asyncio.<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.TimerHandle">TimerHandle</a> 实例，该实例能用于取消回调。</p><p><code>callback</code> 只被调用一次。如果两个回调被安排在同样的时间点，执行顺序未限定。可选的位置参数&nbsp;<em><code>args</code></em>&nbsp;在被调用的时候传递给&nbsp;<em><code>callback</code></em>&nbsp;。如果你想把关键字参数传递给&nbsp;<em><code>callback</code></em>&nbsp;，请使用&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/functools.html#functools.partial" title="functools.partial"><code>functools.partial()</code></a>&nbsp;。</p><p>可选的仅关键字型参数&nbsp;<em>context</em>&nbsp;允许为要运行的&nbsp;<em>callback</em>&nbsp;指定一个自定义&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/contextvars.html#contextvars.Context" title="contextvars.Context"><code>contextvars.Context</code></a>。如果没有提供&nbsp;<em><code>context</code></em>&nbsp;，则使用当前上下文。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_call_later.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'callback </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> invoked'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_later<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_later<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.4</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此示例中，使用不同的参数将相同的回调函数调度了几次不同的时间。使用 <code>call_soon()</code> 的最终实例导致在任何定时实例之前使用参数 3 调用回调，这表明“soon”通常意味着最小的延迟。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$ python3 asyncio_call_later<span class="token punctuation">.</span>pyentering event loopregistering callbackscallback <span class="token number">3</span> invokedcallback <span class="token number">2</span> invokedcallback <span class="token number">1</span> invokedclosing event loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安排特定时间的回调"><a href="#安排特定时间的回调" class="headerlink" title="安排特定时间的回调"></a>安排特定时间的回调</h2><p>也可以安排在特定时间进行回调。该 <code>loop</code> 使用单调时钟（monotonic clock）而不是挂钟时间（wall-clock tim），以确保“now”的值永不回归。要为计划的回调选择时间，必须使用 <code>loop</code> 的 <code>time()</code> 方法从该时钟的内部状态开始。</p><p><code>loop.call_at(when, callback, *args, context=None)</code> 安排 <code>callback</code> 在给定的绝对时间戳 <code>when</code> (<code>int</code> 或 <code>float</code>) 被调用，使用与 <code>loop.time()</code> 同样的时间参考。这个函数的行为与&nbsp;<a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.call_later" title="asyncio.loop.call_later"><code>call_later()</code></a>&nbsp;相同。返回一个 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.TimerHandle" title="asyncio.TimerHandle"><code>asyncio.TimerHandle</code></a>&nbsp;实例，该实例能用于取消回调。</p><p><code>loop.time()</code> 根据时间循环内部的单调时钟，返回当前时间为一个 <code>float</code> 值。参见 <a href="https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.sleep">asyncio.sleep()</a> 函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># asyncio_call_at.py</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'callback </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> invoked at </span><span class="token interpolation"><span class="token punctuation">{</span>loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'clock time: </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'loop  time: </span><span class="token interpolation"><span class="token punctuation">{</span>now<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'registering callbacks'</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_at<span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_at<span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>call_soon<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'entering event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'closing event loop'</span><span class="token punctuation">)</span>    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，对应的 <code>loop</code> 的时间与 <code>time.time()</code> 返回的值不匹配。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 asyncio_call_at.pyentering event loopclock time: <span class="token number">1618973483.6534503</span>loop  time: <span class="token number">3016024.109</span>registering callbackscallback <span class="token number">3</span> invoked at <span class="token number">3016024.109</span>callback <span class="token number">2</span> invoked at <span class="token number">3016024.218</span>callback <span class="token number">1</span> invoked at <span class="token number">3016024.312</span>closing event loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://xinetzone.github.io/categories/Python-%E7%BC%96%E7%A8%8B/">Python 编程</category>
      
      
      <category domain="https://xinetzone.github.io/tags/asyncio/">asyncio</category>
      
      
      <comments>https://xinetzone.github.io/post/zh-CN/c30844b50b8e.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
